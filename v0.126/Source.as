//------------------------------------------------------------
//Box2D.Collision.Shapes.b2CircleDef

package Box2D.Collision.Shapes
{
    import Box2D.Common.Math.b2Vec2;

    public class b2CircleDef extends b2ShapeDef 
    {

        public var localPosition:b2Vec2 = new b2Vec2(0, 0);
        public var radius:Number;

        public function b2CircleDef()
        {
            type = b2Shape.e_circleShape;
            this.radius = 1;
        }

    }
}//package Box2D.Collision.Shapes

//------------------------------------------------------------
//Box2D.Collision.Shapes.b2CircleShape

package Box2D.Collision.Shapes
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Common.Math.b2XForm;
    import Box2D.Collision.b2Segment;
    import Box2D.Collision.b2AABB;
    import Box2D.Common.b2Settings;
    import Box2D.Dynamics.*;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Common.*;

    public class b2CircleShape extends b2Shape 
    {

        public var m_localPosition:b2Vec2 = new b2Vec2();
        public var m_radius:Number;

        public function b2CircleShape(_arg_1:b2ShapeDef)
        {
            super(_arg_1);
            var _local_2:b2CircleDef = (_arg_1 as b2CircleDef);
            m_type = e_circleShape;
            this.m_localPosition.SetV(_local_2.localPosition);
            this.m_radius = _local_2.radius;
        }

        override public function TestPoint(_arg_1:b2XForm, _arg_2:b2Vec2):Boolean
        {
            var _local_3:b2Mat22 = _arg_1.R;
            var _local_4:Number = (_arg_1.position.x + ((_local_3.col1.x * this.m_localPosition.x) + (_local_3.col2.x * this.m_localPosition.y)));
            var _local_5:Number = (_arg_1.position.y + ((_local_3.col1.y * this.m_localPosition.x) + (_local_3.col2.y * this.m_localPosition.y)));
            _local_4 = (_arg_2.x - _local_4);
            _local_5 = (_arg_2.y - _local_5);
            return (((_local_4 * _local_4) + (_local_5 * _local_5)) <= (this.m_radius * this.m_radius));
        }

        override public function TestSegment(_arg_1:b2XForm, _arg_2:Array, _arg_3:b2Vec2, _arg_4:b2Segment, _arg_5:Number):Boolean
        {
            var _local_10:Number;
            var _local_6:b2Mat22 = _arg_1.R;
            var _local_7:Number = (_arg_1.position.x + ((_local_6.col1.x * this.m_localPosition.x) + (_local_6.col2.x * this.m_localPosition.y)));
            var _local_8:Number = (_arg_1.position.y + ((_local_6.col1.y * this.m_localPosition.x) + (_local_6.col2.y * this.m_localPosition.y)));
            var _local_9:Number = (_arg_4.p1.x - _local_7);
            _local_10 = (_arg_4.p1.y - _local_8);
            var _local_11:Number = (((_local_9 * _local_9) + (_local_10 * _local_10)) - (this.m_radius * this.m_radius));
            if (_local_11 < 0)
            {
                return (false);
            };
            var _local_12:Number = (_arg_4.p2.x - _arg_4.p1.x);
            var _local_13:Number = (_arg_4.p2.y - _arg_4.p1.y);
            var _local_14:Number = ((_local_9 * _local_12) + (_local_10 * _local_13));
            var _local_15:Number = ((_local_12 * _local_12) + (_local_13 * _local_13));
            var _local_16:Number = ((_local_14 * _local_14) - (_local_15 * _local_11));
            if (((_local_16 < 0) || (_local_15 < Number.MIN_VALUE)))
            {
                return (false);
            };
            var _local_17:Number = -(_local_14 + Math.sqrt(_local_16));
            if (((0 <= _local_17) && (_local_17 <= (_arg_5 * _local_15))))
            {
                _local_17 = (_local_17 / _local_15);
                _arg_2[0] = _local_17;
                _arg_3.x = (_local_9 + (_local_17 * _local_12));
                _arg_3.y = (_local_10 + (_local_17 * _local_13));
                _arg_3.Normalize();
                return (true);
            };
            return (false);
        }

        override public function ComputeAABB(_arg_1:b2AABB, _arg_2:b2XForm):void
        {
            var _local_3:b2Mat22 = _arg_2.R;
            var _local_4:Number = (_arg_2.position.x + ((_local_3.col1.x * this.m_localPosition.x) + (_local_3.col2.x * this.m_localPosition.y)));
            var _local_5:Number = (_arg_2.position.y + ((_local_3.col1.y * this.m_localPosition.x) + (_local_3.col2.y * this.m_localPosition.y)));
            _arg_1.lowerBound.Set((_local_4 - this.m_radius), (_local_5 - this.m_radius));
            _arg_1.upperBound.Set((_local_4 + this.m_radius), (_local_5 + this.m_radius));
        }

        override public function ComputeSweptAABB(_arg_1:b2AABB, _arg_2:b2XForm, _arg_3:b2XForm):void
        {
            var _local_4:b2Mat22;
            _local_4 = _arg_2.R;
            var _local_5:Number = (_arg_2.position.x + ((_local_4.col1.x * this.m_localPosition.x) + (_local_4.col2.x * this.m_localPosition.y)));
            var _local_6:Number = (_arg_2.position.y + ((_local_4.col1.y * this.m_localPosition.x) + (_local_4.col2.y * this.m_localPosition.y)));
            _local_4 = _arg_3.R;
            var _local_7:Number = (_arg_3.position.x + ((_local_4.col1.x * this.m_localPosition.x) + (_local_4.col2.x * this.m_localPosition.y)));
            var _local_8:Number = (_arg_3.position.y + ((_local_4.col1.y * this.m_localPosition.x) + (_local_4.col2.y * this.m_localPosition.y)));
            _arg_1.lowerBound.Set((((_local_5 < _local_7) ? _local_5 : _local_7) - this.m_radius), (((_local_6 < _local_8) ? _local_6 : _local_8) - this.m_radius));
            _arg_1.upperBound.Set((((_local_5 > _local_7) ? _local_5 : _local_7) + this.m_radius), (((_local_6 > _local_8) ? _local_6 : _local_8) + this.m_radius));
        }

        override public function ComputeMass(_arg_1:b2MassData):void
        {
            _arg_1.mass = (((m_density * b2Settings.b2_pi) * this.m_radius) * this.m_radius);
            _arg_1.center.SetV(this.m_localPosition);
            _arg_1.I = (_arg_1.mass * (((0.5 * this.m_radius) * this.m_radius) + ((this.m_localPosition.x * this.m_localPosition.x) + (this.m_localPosition.y * this.m_localPosition.y))));
        }

        public function GetLocalPosition():b2Vec2
        {
            return (this.m_localPosition);
        }

        public function GetRadius():Number
        {
            return (this.m_radius);
        }

        override public function UpdateSweepRadius(_arg_1:b2Vec2):void
        {
            var _local_2:Number = (this.m_localPosition.x - _arg_1.x);
            var _local_3:Number = (this.m_localPosition.y - _arg_1.y);
            _local_2 = Math.sqrt(((_local_2 * _local_2) + (_local_3 * _local_3)));
            m_sweepRadius = ((_local_2 + this.m_radius) - b2Settings.b2_toiSlop);
        }


    }
}//package Box2D.Collision.Shapes

//------------------------------------------------------------
//Box2D.Collision.Shapes.b2FilterData

package Box2D.Collision.Shapes
{
    public class b2FilterData 
    {

        public var categoryBits:uint = 1;
        public var maskBits:uint = 0xFFFF;
        public var groupIndex:int = 0;


        public function Copy():b2FilterData
        {
            var _local_1:b2FilterData = new b2FilterData();
            _local_1.categoryBits = this.categoryBits;
            _local_1.maskBits = this.maskBits;
            _local_1.groupIndex = this.groupIndex;
            return (_local_1);
        }


    }
}//package Box2D.Collision.Shapes

//------------------------------------------------------------
//Box2D.Collision.Shapes.b2MassData

package Box2D.Collision.Shapes
{
    import Box2D.Common.Math.b2Vec2;

    public class b2MassData 
    {

        public var mass:Number = 0;
        public var center:b2Vec2 = new b2Vec2(0, 0);
        public var I:Number = 0;


    }
}//package Box2D.Collision.Shapes

//------------------------------------------------------------
//Box2D.Collision.Shapes.b2PolygonDef

package Box2D.Collision.Shapes
{
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Common.b2Settings;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.*;
    import Box2D.Common.*;

    public class b2PolygonDef extends b2ShapeDef 
    {

        private static var s_mat:b2Mat22 = new b2Mat22();

        public var vertices:Array = new Array(b2Settings.b2_maxPolygonVertices);
        public var vertexCount:int;

        public function b2PolygonDef()
        {
            type = b2Shape.e_polygonShape;
            this.vertexCount = 0;
            var _local_1:int;
            while (_local_1 < b2Settings.b2_maxPolygonVertices)
            {
                this.vertices[_local_1] = new b2Vec2();
                _local_1++;
            };
        }

        public function SetAsBox(_arg_1:Number, _arg_2:Number):void
        {
            this.vertexCount = 4;
            this.vertices[0].Set(-(_arg_1), -(_arg_2));
            this.vertices[1].Set(_arg_1, -(_arg_2));
            this.vertices[2].Set(_arg_1, _arg_2);
            this.vertices[3].Set(-(_arg_1), _arg_2);
        }

        public function SetAsBoxXY(_arg_1:Number, _arg_2:Number, _arg_3:Number, _arg_4:Number):void
        {
            this.vertexCount = 4;
            this.vertices[0].Set((_arg_1 - _arg_3), (_arg_2 - _arg_4));
            this.vertices[1].Set((_arg_1 + _arg_3), (_arg_2 - _arg_4));
            this.vertices[2].Set((_arg_1 + _arg_3), (_arg_2 + _arg_4));
            this.vertices[3].Set((_arg_1 - _arg_3), (_arg_2 + _arg_4));
        }

        public function SetAsOrientedBox(_arg_1:Number, _arg_2:Number, _arg_3:b2Vec2=null, _arg_4:Number=0, _arg_5:Number=0, _arg_6:Number=0):void
        {
            var _local_7:b2Vec2;
            var _local_8:b2Mat22;
            var _local_9:int;
            this.vertexCount = 4;
            this.vertices[0].Set((_arg_5 - _arg_1), (_arg_6 - _arg_2));
            this.vertices[1].Set((_arg_5 + _arg_1), (_arg_6 - _arg_2));
            this.vertices[2].Set((_arg_5 + _arg_1), (_arg_6 + _arg_2));
            this.vertices[3].Set((_arg_5 - _arg_1), (_arg_6 + _arg_2));
            if (_arg_3)
            {
                _local_7 = _arg_3;
                _local_8 = s_mat;
                _local_8.Set(_arg_4);
                _local_9 = 0;
                while (_local_9 < this.vertexCount)
                {
                    _arg_3 = this.vertices[_local_9];
                    _arg_1 = (_local_7.x + ((_local_8.col1.x * _arg_3.x) + (_local_8.col2.x * _arg_3.y)));
                    _arg_3.y = (_local_7.y + ((_local_8.col1.y * _arg_3.x) + (_local_8.col2.y * _arg_3.y)));
                    _arg_3.x = _arg_1;
                    _local_9++;
                };
            };
        }


    }
}//package Box2D.Collision.Shapes

//------------------------------------------------------------
//Box2D.Collision.Shapes.b2PolygonShape

package Box2D.Collision.Shapes
{
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Collision.b2AABB;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Collision.b2OBB;
    import Box2D.Common.b2Settings;
    import Box2D.Common.Math.b2XForm;
    import Box2D.Collision.b2Segment;
    import Box2D.Common.Math.b2Math;
    import Box2D.Dynamics.*;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Common.*;

    public class b2PolygonShape extends b2Shape 
    {

        private static var s_computeMat:b2Mat22 = new b2Mat22();
        private static var s_sweptAABB1:b2AABB = new b2AABB();
        private static var s_sweptAABB2:b2AABB = new b2AABB();

        private var s_supportVec:b2Vec2 = new b2Vec2();
        public var m_centroid:b2Vec2;
        public var m_obb:b2OBB = new b2OBB();
        public var m_vertices:Array = new Array(b2Settings.b2_maxPolygonVertices);
        public var m_normals:Array = new Array(b2Settings.b2_maxPolygonVertices);
        public var m_coreVertices:Array = new Array(b2Settings.b2_maxPolygonVertices);
        public var m_vertexCount:int;

        public function b2PolygonShape(_arg_1:b2ShapeDef)
        {
            var _local_3:int;
            var _local_6:Number;
            var _local_7:Number;
            var _local_8:Number;
            var _local_9:Number;
            var _local_10:Number;
            var _local_11:Number;
            var _local_12:Number;
            var _local_13:Number;
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:Number;
            super(_arg_1);
            m_type = e_polygonShape;
            var _local_2:b2PolygonDef = (_arg_1 as b2PolygonDef);
            this.m_vertexCount = _local_2.vertexCount;
            var _local_4:int = _local_3;
            var _local_5:int = _local_3;
            _local_3 = 0;
            while (_local_3 < this.m_vertexCount)
            {
                this.m_vertices[_local_3] = _local_2.vertices[_local_3].Copy();
                _local_3++;
            };
            _local_3 = 0;
            while (_local_3 < this.m_vertexCount)
            {
                _local_4 = _local_3;
                _local_5 = (((_local_3 + 1) < this.m_vertexCount) ? (_local_3 + 1) : 0);
                _local_6 = (this.m_vertices[_local_5].x - this.m_vertices[_local_4].x);
                _local_7 = (this.m_vertices[_local_5].y - this.m_vertices[_local_4].y);
                _local_8 = Math.sqrt(((_local_6 * _local_6) + (_local_7 * _local_7)));
                this.m_normals[_local_3] = new b2Vec2((_local_7 / _local_8), (-(_local_6) / _local_8));
                _local_3++;
            };
            this.m_centroid = ComputeCentroid(_local_2.vertices, _local_2.vertexCount);
            ComputeOBB(this.m_obb, this.m_vertices, this.m_vertexCount);
            _local_3 = 0;
            while (_local_3 < this.m_vertexCount)
            {
                _local_4 = (((_local_3 - 1) >= 0) ? (_local_3 - 1) : (this.m_vertexCount - 1));
                _local_5 = _local_3;
                _local_9 = this.m_normals[_local_4].x;
                _local_10 = this.m_normals[_local_4].y;
                _local_11 = this.m_normals[_local_5].x;
                _local_12 = this.m_normals[_local_5].y;
                _local_13 = (this.m_vertices[_local_3].x - this.m_centroid.x);
                _local_14 = (this.m_vertices[_local_3].y - this.m_centroid.y);
                _local_15 = (((_local_9 * _local_13) + (_local_10 * _local_14)) - b2Settings.b2_toiSlop);
                _local_16 = (((_local_11 * _local_13) + (_local_12 * _local_14)) - b2Settings.b2_toiSlop);
                _local_17 = (1 / ((_local_9 * _local_12) - (_local_10 * _local_11)));
                this.m_coreVertices[_local_3] = new b2Vec2(((_local_17 * ((_local_12 * _local_15) - (_local_10 * _local_16))) + this.m_centroid.x), ((_local_17 * ((_local_9 * _local_16) - (_local_11 * _local_15))) + this.m_centroid.y));
                _local_3++;
            };
        }

        public static function ComputeCentroid(_arg_1:Array, _arg_2:int):b2Vec2
        {
            var _local_3:b2Vec2;
            var _local_7:Number;
            var _local_9:b2Vec2;
            var _local_10:b2Vec2;
            var _local_11:Number;
            var _local_12:Number;
            var _local_13:Number;
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            _local_3 = new b2Vec2();
            var _local_4:Number = 0;
            var _local_5:Number = 0;
            var _local_6:Number = 0;
            _local_7 = (1 / 3);
            var _local_8:int;
            while (_local_8 < _arg_2)
            {
                _local_9 = _arg_1[_local_8];
                _local_10 = (((_local_8 + 1) < _arg_2) ? _arg_1[int((_local_8 + 1))] : _arg_1[0]);
                _local_11 = (_local_9.x - _local_5);
                _local_12 = (_local_9.y - _local_6);
                _local_13 = (_local_10.x - _local_5);
                _local_14 = (_local_10.y - _local_6);
                _local_15 = ((_local_11 * _local_14) - (_local_12 * _local_13));
                _local_16 = (0.5 * _local_15);
                _local_4 = (_local_4 + _local_16);
                _local_3.x = (_local_3.x + ((_local_16 * _local_7) * ((_local_5 + _local_9.x) + _local_10.x)));
                _local_3.y = (_local_3.y + ((_local_16 * _local_7) * ((_local_6 + _local_9.y) + _local_10.y)));
                _local_8++;
            };
            _local_3.x = (_local_3.x * (1 / _local_4));
            _local_3.y = (_local_3.y * (1 / _local_4));
            return (_local_3);
        }

        public static function ComputeOBB(_arg_1:b2OBB, _arg_2:Array, _arg_3:int):void
        {
            var _local_4:int;
            var _local_7:b2Vec2;
            var _local_8:Number;
            var _local_9:Number;
            var _local_10:Number;
            var _local_11:Number;
            var _local_12:Number;
            var _local_13:Number;
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:int;
            var _local_18:Number;
            var _local_19:Number;
            var _local_20:Number;
            var _local_21:Number;
            var _local_22:Number;
            var _local_23:Number;
            var _local_24:Number;
            var _local_25:b2Mat22;
            var _local_5:Array = new Array((b2Settings.b2_maxPolygonVertices + 1));
            _local_4 = 0;
            while (_local_4 < _arg_3)
            {
                _local_5[_local_4] = _arg_2[_local_4];
                _local_4++;
            };
            _local_5[_arg_3] = _local_5[0];
            var _local_6:Number = Number.MAX_VALUE;
            _local_4 = 1;
            while (_local_4 <= _arg_3)
            {
                _local_7 = _local_5[int((_local_4 - 1))];
                _local_8 = (_local_5[_local_4].x - _local_7.x);
                _local_9 = (_local_5[_local_4].y - _local_7.y);
                _local_10 = Math.sqrt(((_local_8 * _local_8) + (_local_9 * _local_9)));
                _local_8 = (_local_8 / _local_10);
                _local_9 = (_local_9 / _local_10);
                _local_11 = -(_local_9);
                _local_12 = _local_8;
                _local_13 = Number.MAX_VALUE;
                _local_14 = Number.MAX_VALUE;
                _local_15 = -(Number.MAX_VALUE);
                _local_16 = -(Number.MAX_VALUE);
                _local_17 = 0;
                while (_local_17 < _arg_3)
                {
                    _local_19 = (_local_5[_local_17].x - _local_7.x);
                    _local_20 = (_local_5[_local_17].y - _local_7.y);
                    _local_21 = ((_local_8 * _local_19) + (_local_9 * _local_20));
                    _local_22 = ((_local_11 * _local_19) + (_local_12 * _local_20));
                    if (_local_21 < _local_13)
                    {
                        _local_13 = _local_21;
                    };
                    if (_local_22 < _local_14)
                    {
                        _local_14 = _local_22;
                    };
                    if (_local_21 > _local_15)
                    {
                        _local_15 = _local_21;
                    };
                    if (_local_22 > _local_16)
                    {
                        _local_16 = _local_22;
                    };
                    _local_17++;
                };
                _local_18 = ((_local_15 - _local_13) * (_local_16 - _local_14));
                if (_local_18 < (0.95 * _local_6))
                {
                    _local_6 = _local_18;
                    _arg_1.R.col1.x = _local_8;
                    _arg_1.R.col1.y = _local_9;
                    _arg_1.R.col2.x = _local_11;
                    _arg_1.R.col2.y = _local_12;
                    _local_23 = (0.5 * (_local_13 + _local_15));
                    _local_24 = (0.5 * (_local_14 + _local_16));
                    _local_25 = _arg_1.R;
                    _arg_1.center.x = (_local_7.x + ((_local_25.col1.x * _local_23) + (_local_25.col2.x * _local_24)));
                    _arg_1.center.y = (_local_7.y + ((_local_25.col1.y * _local_23) + (_local_25.col2.y * _local_24)));
                    _arg_1.extents.x = (0.5 * (_local_15 - _local_13));
                    _arg_1.extents.y = (0.5 * (_local_16 - _local_14));
                };
                _local_4++;
            };
        }


        override public function TestPoint(_arg_1:b2XForm, _arg_2:b2Vec2):Boolean
        {
            var _local_3:b2Vec2;
            var _local_10:Number;
            var _local_4:b2Mat22 = _arg_1.R;
            var _local_5:Number = (_arg_2.x - _arg_1.position.x);
            var _local_6:Number = (_arg_2.y - _arg_1.position.y);
            var _local_7:Number = ((_local_5 * _local_4.col1.x) + (_local_6 * _local_4.col1.y));
            var _local_8:Number = ((_local_5 * _local_4.col2.x) + (_local_6 * _local_4.col2.y));
            var _local_9:int;
            while (_local_9 < this.m_vertexCount)
            {
                _local_3 = this.m_vertices[_local_9];
                _local_5 = (_local_7 - _local_3.x);
                _local_6 = (_local_8 - _local_3.y);
                _local_3 = this.m_normals[_local_9];
                _local_10 = ((_local_3.x * _local_5) + (_local_3.y * _local_6));
                if (_local_10 > 0)
                {
                    return (false);
                };
                _local_9++;
            };
            return (true);
        }

        override public function TestSegment(_arg_1:b2XForm, _arg_2:Array, _arg_3:b2Vec2, _arg_4:b2Segment, _arg_5:Number):Boolean
        {
            var _local_8:Number;
            var _local_9:Number;
            var _local_10:b2Mat22;
            var _local_11:b2Vec2;
            var _local_20:Number;
            var _local_21:Number;
            var _local_6:Number = 0;
            var _local_7:Number = _arg_5;
            _local_8 = (_arg_4.p1.x - _arg_1.position.x);
            _local_9 = (_arg_4.p1.y - _arg_1.position.y);
            _local_10 = _arg_1.R;
            var _local_12:Number = ((_local_8 * _local_10.col1.x) + (_local_9 * _local_10.col1.y));
            var _local_13:Number = ((_local_8 * _local_10.col2.x) + (_local_9 * _local_10.col2.y));
            _local_8 = (_arg_4.p2.x - _arg_1.position.x);
            _local_9 = (_arg_4.p2.y - _arg_1.position.y);
            _local_10 = _arg_1.R;
            var _local_14:Number = ((_local_8 * _local_10.col1.x) + (_local_9 * _local_10.col1.y));
            var _local_15:Number = ((_local_8 * _local_10.col2.x) + (_local_9 * _local_10.col2.y));
            var _local_16:Number = (_local_14 - _local_12);
            var _local_17:Number = (_local_15 - _local_13);
            var _local_18:int = -1;
            var _local_19:int;
            while (_local_19 < this.m_vertexCount)
            {
                _local_11 = this.m_vertices[_local_19];
                _local_8 = (_local_11.x - _local_12);
                _local_9 = (_local_11.y - _local_13);
                _local_11 = this.m_normals[_local_19];
                _local_20 = ((_local_11.x * _local_8) + (_local_11.y * _local_9));
                _local_21 = ((_local_11.x * _local_16) + (_local_11.y * _local_17));
                if (((_local_21 < 0) && (_local_20 < (_local_6 * _local_21))))
                {
                    _local_6 = (_local_20 / _local_21);
                    _local_18 = _local_19;
                }
                else
                {
                    if (((_local_21 > 0) && (_local_20 < (_local_7 * _local_21))))
                    {
                        _local_7 = (_local_20 / _local_21);
                    };
                };
                if (_local_7 < _local_6)
                {
                    return (false);
                };
                _local_19++;
            };
            if (_local_18 >= 0)
            {
                _arg_2[0] = _local_6;
                _local_10 = _arg_1.R;
                _local_11 = this.m_normals[_local_18];
                _arg_3.x = ((_local_10.col1.x * _local_11.x) + (_local_10.col2.x * _local_11.y));
                _arg_3.y = ((_local_10.col1.y * _local_11.x) + (_local_10.col2.y * _local_11.y));
                return (true);
            };
            return (false);
        }

        override public function ComputeAABB(_arg_1:b2AABB, _arg_2:b2XForm):void
        {
            var _local_3:b2Mat22;
            var _local_4:b2Vec2;
            var _local_5:b2Mat22 = s_computeMat;
            _local_3 = _arg_2.R;
            _local_4 = this.m_obb.R.col1;
            _local_5.col1.x = ((_local_3.col1.x * _local_4.x) + (_local_3.col2.x * _local_4.y));
            _local_5.col1.y = ((_local_3.col1.y * _local_4.x) + (_local_3.col2.y * _local_4.y));
            _local_4 = this.m_obb.R.col2;
            _local_5.col2.x = ((_local_3.col1.x * _local_4.x) + (_local_3.col2.x * _local_4.y));
            _local_5.col2.y = ((_local_3.col1.y * _local_4.x) + (_local_3.col2.y * _local_4.y));
            _local_5.Abs();
            var _local_6:b2Mat22 = _local_5;
            _local_4 = this.m_obb.extents;
            var _local_7:Number = ((_local_6.col1.x * _local_4.x) + (_local_6.col2.x * _local_4.y));
            var _local_8:Number = ((_local_6.col1.y * _local_4.x) + (_local_6.col2.y * _local_4.y));
            _local_3 = _arg_2.R;
            _local_4 = this.m_obb.center;
            var _local_9:Number = (_arg_2.position.x + ((_local_3.col1.x * _local_4.x) + (_local_3.col2.x * _local_4.y)));
            var _local_10:Number = (_arg_2.position.y + ((_local_3.col1.y * _local_4.x) + (_local_3.col2.y * _local_4.y)));
            _arg_1.lowerBound.Set((_local_9 - _local_7), (_local_10 - _local_8));
            _arg_1.upperBound.Set((_local_9 + _local_7), (_local_10 + _local_8));
        }

        override public function ComputeSweptAABB(_arg_1:b2AABB, _arg_2:b2XForm, _arg_3:b2XForm):void
        {
            var _local_4:b2AABB = s_sweptAABB1;
            var _local_5:b2AABB = s_sweptAABB2;
            this.ComputeAABB(_local_4, _arg_2);
            this.ComputeAABB(_local_5, _arg_3);
            _arg_1.lowerBound.Set(((_local_4.lowerBound.x < _local_5.lowerBound.x) ? _local_4.lowerBound.x : _local_5.lowerBound.x), ((_local_4.lowerBound.y < _local_5.lowerBound.y) ? _local_4.lowerBound.y : _local_5.lowerBound.y));
            _arg_1.upperBound.Set(((_local_4.upperBound.x > _local_5.upperBound.x) ? _local_4.upperBound.x : _local_5.upperBound.x), ((_local_4.upperBound.y > _local_5.upperBound.y) ? _local_4.upperBound.y : _local_5.upperBound.y));
        }

        override public function ComputeMass(_arg_1:b2MassData):void
        {
            var _local_10:b2Vec2;
            var _local_11:b2Vec2;
            var _local_12:Number;
            var _local_13:Number;
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:Number;
            var _local_18:Number;
            var _local_19:Number;
            var _local_20:Number;
            var _local_21:Number;
            var _local_22:Number;
            var _local_23:Number;
            var _local_24:Number;
            var _local_25:Number;
            var _local_2:Number = 0;
            var _local_3:Number = 0;
            var _local_4:Number = 0;
            var _local_5:Number = 0;
            var _local_6:Number = 0;
            var _local_7:Number = 0;
            var _local_8:Number = (1 / 3);
            var _local_9:int;
            while (_local_9 < this.m_vertexCount)
            {
                _local_10 = this.m_vertices[_local_9];
                _local_11 = (((_local_9 + 1) < this.m_vertexCount) ? this.m_vertices[int((_local_9 + 1))] : this.m_vertices[0]);
                _local_12 = (_local_10.x - _local_6);
                _local_13 = (_local_10.y - _local_7);
                _local_14 = (_local_11.x - _local_6);
                _local_15 = (_local_11.y - _local_7);
                _local_16 = ((_local_12 * _local_15) - (_local_13 * _local_14));
                _local_17 = (0.5 * _local_16);
                _local_4 = (_local_4 + _local_17);
                _local_2 = (_local_2 + ((_local_17 * _local_8) * ((_local_6 + _local_10.x) + _local_11.x)));
                _local_3 = (_local_3 + ((_local_17 * _local_8) * ((_local_7 + _local_10.y) + _local_11.y)));
                _local_18 = _local_6;
                _local_19 = _local_7;
                _local_20 = _local_12;
                _local_21 = _local_13;
                _local_22 = _local_14;
                _local_23 = _local_15;
                _local_24 = ((_local_8 * ((0.25 * (((_local_20 * _local_20) + (_local_22 * _local_20)) + (_local_22 * _local_22))) + ((_local_18 * _local_20) + (_local_18 * _local_22)))) + ((0.5 * _local_18) * _local_18));
                _local_25 = ((_local_8 * ((0.25 * (((_local_21 * _local_21) + (_local_23 * _local_21)) + (_local_23 * _local_23))) + ((_local_19 * _local_21) + (_local_19 * _local_23)))) + ((0.5 * _local_19) * _local_19));
                _local_5 = (_local_5 + (_local_16 * (_local_24 + _local_25)));
                _local_9++;
            };
            _arg_1.mass = (m_density * _local_4);
            _local_2 = (_local_2 * (1 / _local_4));
            _local_3 = (_local_3 * (1 / _local_4));
            _arg_1.center.Set(_local_2, _local_3);
            _arg_1.I = (m_density * _local_5);
        }

        public function GetOBB():b2OBB
        {
            return (this.m_obb);
        }

        public function GetCentroid():b2Vec2
        {
            return (this.m_centroid);
        }

        public function GetVertexCount():int
        {
            return (this.m_vertexCount);
        }

        public function GetVertices():Array
        {
            return (this.m_vertices);
        }

        public function GetCoreVertices():Array
        {
            return (this.m_coreVertices);
        }

        public function GetNormals():Array
        {
            return (this.m_normals);
        }

        public function GetFirstVertex(_arg_1:b2XForm):b2Vec2
        {
            return (b2Math.b2MulX(_arg_1, this.m_coreVertices[0]));
        }

        public function Centroid(_arg_1:b2XForm):b2Vec2
        {
            return (b2Math.b2MulX(_arg_1, this.m_centroid));
        }

        public function Support(_arg_1:b2XForm, _arg_2:Number, _arg_3:Number):b2Vec2
        {
            var _local_4:b2Vec2;
            var _local_5:b2Mat22;
            var _local_11:Number;
            _local_5 = _arg_1.R;
            var _local_6:Number = ((_arg_2 * _local_5.col1.x) + (_arg_3 * _local_5.col1.y));
            var _local_7:Number = ((_arg_2 * _local_5.col2.x) + (_arg_3 * _local_5.col2.y));
            var _local_8:int;
            _local_4 = this.m_coreVertices[0];
            var _local_9:Number = ((_local_4.x * _local_6) + (_local_4.y * _local_7));
            var _local_10:int = 1;
            while (_local_10 < this.m_vertexCount)
            {
                _local_4 = this.m_coreVertices[_local_10];
                _local_11 = ((_local_4.x * _local_6) + (_local_4.y * _local_7));
                if (_local_11 > _local_9)
                {
                    _local_8 = _local_10;
                    _local_9 = _local_11;
                };
                _local_10++;
            };
            _local_5 = _arg_1.R;
            _local_4 = this.m_coreVertices[_local_8];
            this.s_supportVec.x = (_arg_1.position.x + ((_local_5.col1.x * _local_4.x) + (_local_5.col2.x * _local_4.y)));
            this.s_supportVec.y = (_arg_1.position.y + ((_local_5.col1.y * _local_4.x) + (_local_5.col2.y * _local_4.y)));
            return (this.s_supportVec);
        }

        override public function UpdateSweepRadius(_arg_1:b2Vec2):void
        {
            var _local_2:b2Vec2;
            var _local_4:Number;
            var _local_5:Number;
            m_sweepRadius = 0;
            var _local_3:int;
            while (_local_3 < this.m_vertexCount)
            {
                _local_2 = this.m_coreVertices[_local_3];
                _local_4 = (_local_2.x - _arg_1.x);
                _local_5 = (_local_2.y - _arg_1.y);
                _local_4 = Math.sqrt(((_local_4 * _local_4) + (_local_5 * _local_5)));
                if (_local_4 > m_sweepRadius)
                {
                    m_sweepRadius = _local_4;
                };
                _local_3++;
            };
        }


    }
}//package Box2D.Collision.Shapes

//------------------------------------------------------------
//Box2D.Collision.Shapes.b2Shape

package Box2D.Collision.Shapes
{
    import Box2D.Collision.b2AABB;
    import Box2D.Dynamics.b2Body;
    import Box2D.Collision.b2Pair;
    import Box2D.Common.Math.b2XForm;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Collision.b2Segment;
    import Box2D.Collision.b2BroadPhase;

    public class b2Shape 
    {

        private static var s_proxyAABB:b2AABB = new b2AABB();
        private static var s_syncAABB:b2AABB = new b2AABB();
        private static var s_resetAABB:b2AABB = new b2AABB();
        public static const e_unknownShape:int = -1;
        public static const e_circleShape:int = 0;
        public static const e_polygonShape:int = 1;
        public static const e_shapeTypeCount:int = 2;

        public var m_type:int;
        public var m_next:b2Shape;
        public var m_body:b2Body;
        public var m_sweepRadius:Number;
        public var m_density:Number;
        public var m_friction:Number;
        public var m_restitution:Number;
        public var m_proxyId:uint;
        public var m_filter:b2FilterData;
        public var m_isSensor:Boolean;
        public var m_userData:*;

        public function b2Shape(_arg_1:b2ShapeDef)
        {
            this.m_userData = _arg_1.userData;
            this.m_friction = _arg_1.friction;
            this.m_restitution = _arg_1.restitution;
            this.m_density = _arg_1.density;
            this.m_body = null;
            this.m_sweepRadius = 0;
            this.m_next = null;
            this.m_proxyId = b2Pair.b2_nullProxy;
            this.m_filter = _arg_1.filter.Copy();
            this.m_isSensor = _arg_1.isSensor;
        }

        public static function Create(_arg_1:b2ShapeDef, _arg_2:*):b2Shape
        {
            switch (_arg_1.type)
            {
                case e_circleShape:
                    return (new b2CircleShape(_arg_1));
                case e_polygonShape:
                    return (new b2PolygonShape(_arg_1));
                default:
                    return (null);
            };
        }

        public static function Destroy(_arg_1:b2Shape, _arg_2:*):void
        {
        }


        public function GetType():int
        {
            return (this.m_type);
        }

        public function IsSensor():Boolean
        {
            return (this.m_isSensor);
        }

        public function SetFilterData(_arg_1:b2FilterData):void
        {
            this.m_filter = _arg_1.Copy();
        }

        public function GetFilterData():b2FilterData
        {
            return (this.m_filter.Copy());
        }

        public function GetBody():b2Body
        {
            return (this.m_body);
        }

        public function GetNext():b2Shape
        {
            return (this.m_next);
        }

        public function GetUserData():*
        {
            return (this.m_userData);
        }

        public function SetUserData(_arg_1:*):void
        {
            this.m_userData = _arg_1;
        }

        public function TestPoint(_arg_1:b2XForm, _arg_2:b2Vec2):Boolean
        {
            return (false);
        }

        public function TestSegment(_arg_1:b2XForm, _arg_2:Array, _arg_3:b2Vec2, _arg_4:b2Segment, _arg_5:Number):Boolean
        {
            return (false);
        }

        public function ComputeAABB(_arg_1:b2AABB, _arg_2:b2XForm):void
        {
        }

        public function ComputeSweptAABB(_arg_1:b2AABB, _arg_2:b2XForm, _arg_3:b2XForm):void
        {
        }

        public function ComputeMass(_arg_1:b2MassData):void
        {
        }

        public function GetSweepRadius():Number
        {
            return (this.m_sweepRadius);
        }

        public function GetFriction():Number
        {
            return (this.m_friction);
        }

        public function GetRestitution():Number
        {
            return (this.m_restitution);
        }

        public function CreateProxy(_arg_1:b2BroadPhase, _arg_2:b2XForm):void
        {
            var _local_3:b2AABB = s_proxyAABB;
            this.ComputeAABB(_local_3, _arg_2);
            var _local_4:Boolean = _arg_1.InRange(_local_3);
            if (_local_4)
            {
                this.m_proxyId = _arg_1.CreateProxy(_local_3, this);
            }
            else
            {
                this.m_proxyId = b2Pair.b2_nullProxy;
            };
        }

        public function DestroyProxy(_arg_1:b2BroadPhase):void
        {
            if (this.m_proxyId != b2Pair.b2_nullProxy)
            {
                _arg_1.DestroyProxy(this.m_proxyId);
                this.m_proxyId = b2Pair.b2_nullProxy;
            };
        }

        public function Synchronize(_arg_1:b2BroadPhase, _arg_2:b2XForm, _arg_3:b2XForm):Boolean
        {
            if (this.m_proxyId == b2Pair.b2_nullProxy)
            {
                return (false);
            };
            var _local_4:b2AABB = s_syncAABB;
            this.ComputeSweptAABB(_local_4, _arg_2, _arg_3);
            if (_arg_1.InRange(_local_4))
            {
                _arg_1.MoveProxy(this.m_proxyId, _local_4);
                return (true);
            };
            return (false);
        }

        public function RefilterProxy(_arg_1:b2BroadPhase, _arg_2:b2XForm):void
        {
            if (this.m_proxyId == b2Pair.b2_nullProxy)
            {
                return;
            };
            _arg_1.DestroyProxy(this.m_proxyId);
            var _local_3:b2AABB = s_resetAABB;
            this.ComputeAABB(_local_3, _arg_2);
            var _local_4:Boolean = _arg_1.InRange(_local_3);
            if (_local_4)
            {
                this.m_proxyId = _arg_1.CreateProxy(_local_3, this);
            }
            else
            {
                this.m_proxyId = b2Pair.b2_nullProxy;
            };
        }

        public function UpdateSweepRadius(_arg_1:b2Vec2):void
        {
        }


    }
}//package Box2D.Collision.Shapes

//------------------------------------------------------------
//Box2D.Collision.Shapes.b2ShapeDef

package Box2D.Collision.Shapes
{
    public class b2ShapeDef 
    {

        public var type:int = b2Shape.e_unknownShape;
        public var userData:* = null;
        public var friction:Number = 0.2;
        public var restitution:Number = 0;
        public var density:Number = 0;
        public var isSensor:Boolean = false;
        public var filter:b2FilterData = new b2FilterData();


    }
}//package Box2D.Collision.Shapes

//------------------------------------------------------------
//Box2D.Collision.b2AABB

package Box2D.Collision
{
    import Box2D.Common.Math.b2Vec2;

    public class b2AABB 
    {

        public var lowerBound:b2Vec2 = new b2Vec2();
        public var upperBound:b2Vec2 = new b2Vec2();


        public function IsValid():Boolean
        {
            var _local_1:Number = (this.upperBound.x - this.lowerBound.x);
            var _local_2:Number = (this.upperBound.y - this.lowerBound.y);
            var _local_3:Boolean = ((_local_1 >= 0) && (_local_2 >= 0));
            return (((_local_3) && (this.lowerBound.IsValid())) && (this.upperBound.IsValid()));
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2Bound

package Box2D.Collision
{
    public class b2Bound 
    {

        public var value:uint;
        public var proxyId:uint;
        public var stabbingCount:uint;


        public function IsLower():Boolean
        {
            return ((this.value & 0x01) == 0);
        }

        public function IsUpper():Boolean
        {
            return ((this.value & 0x01) == 1);
        }

        public function Swap(_arg_1:b2Bound):void
        {
            var _local_2:uint = this.value;
            var _local_3:uint = this.proxyId;
            var _local_4:uint = this.stabbingCount;
            this.value = _arg_1.value;
            this.proxyId = _arg_1.proxyId;
            this.stabbingCount = _arg_1.stabbingCount;
            _arg_1.value = _local_2;
            _arg_1.proxyId = _local_3;
            _arg_1.stabbingCount = _local_4;
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2BoundValues

package Box2D.Collision
{
    public class b2BoundValues 
    {

        public var lowerValues:Array = [0, 0];
        public var upperValues:Array = [0, 0];


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2BroadPhase

package Box2D.Collision
{
    import Box2D.Common.b2Settings;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2Math;
    import Box2D.Common.Math.*;
    import Box2D.Common.*;

    public class b2BroadPhase 
    {

        public static var s_validate:Boolean = false;
        public static const b2_invalid:uint = b2Settings.USHRT_MAX;//0xFFFF
        public static const b2_nullEdge:uint = b2Settings.USHRT_MAX;//0xFFFF

        public var m_pairManager:b2PairManager = new b2PairManager();
        public var m_proxyPool:Array = new Array(b2Settings.b2_maxPairs);
        public var m_freeProxy:uint;
        public var m_bounds:Array = new Array((2 * b2Settings.b2_maxProxies));
        public var m_queryResults:Array = new Array(b2Settings.b2_maxProxies);
        public var m_queryResultCount:int;
        public var m_worldAABB:b2AABB;
        public var m_quantizationFactor:b2Vec2 = new b2Vec2();
        public var m_proxyCount:int;
        public var m_timeStamp:uint;

        public function b2BroadPhase(_arg_1:b2AABB, _arg_2:b2PairCallback)
        {
            var _local_3:int;
            var _local_5:Number;
            var _local_6:b2Proxy;
            var _local_7:int;
            super();
            this.m_pairManager.Initialize(this, _arg_2);
            this.m_worldAABB = _arg_1;
            this.m_proxyCount = 0;
            _local_3 = 0;
            while (_local_3 < b2Settings.b2_maxProxies)
            {
                this.m_queryResults[_local_3] = 0;
                _local_3++;
            };
            this.m_bounds = new Array(2);
            _local_3 = 0;
            while (_local_3 < 2)
            {
                this.m_bounds[_local_3] = new Array((2 * b2Settings.b2_maxProxies));
                _local_7 = 0;
                while (_local_7 < (2 * b2Settings.b2_maxProxies))
                {
                    this.m_bounds[_local_3][_local_7] = new b2Bound();
                    _local_7++;
                };
                _local_3++;
            };
            var _local_4:Number = (_arg_1.upperBound.x - _arg_1.lowerBound.x);
            _local_5 = (_arg_1.upperBound.y - _arg_1.lowerBound.y);
            this.m_quantizationFactor.x = (b2Settings.USHRT_MAX / _local_4);
            this.m_quantizationFactor.y = (b2Settings.USHRT_MAX / _local_5);
            _local_3 = 0;
            while (_local_3 < (b2Settings.b2_maxProxies - 1))
            {
                _local_6 = new b2Proxy();
                this.m_proxyPool[_local_3] = _local_6;
                _local_6.SetNext((_local_3 + 1));
                _local_6.timeStamp = 0;
                _local_6.overlapCount = b2_invalid;
                _local_6.userData = null;
                _local_3++;
            };
            _local_6 = new b2Proxy();
            this.m_proxyPool[int((b2Settings.b2_maxProxies - 1))] = _local_6;
            _local_6.SetNext(b2Pair.b2_nullProxy);
            _local_6.timeStamp = 0;
            _local_6.overlapCount = b2_invalid;
            _local_6.userData = null;
            this.m_freeProxy = 0;
            this.m_timeStamp = 1;
            this.m_queryResultCount = 0;
        }

        public static function BinarySearch(_arg_1:Array, _arg_2:int, _arg_3:uint):uint
        {
            var _local_6:int;
            var _local_7:b2Bound;
            var _local_4:int;
            var _local_5:int = (_arg_2 - 1);
            while (_local_4 <= _local_5)
            {
                _local_6 = int(((_local_4 + _local_5) / 2));
                _local_7 = _arg_1[_local_6];
                if (_local_7.value > _arg_3)
                {
                    _local_5 = (_local_6 - 1);
                }
                else
                {
                    if (_local_7.value < _arg_3)
                    {
                        _local_4 = (_local_6 + 1);
                    }
                    else
                    {
                        return (uint(_local_6));
                    };
                };
            };
            return (uint(_local_4));
        }


        public function InRange(_arg_1:b2AABB):Boolean
        {
            var _local_2:Number;
            var _local_3:Number;
            var _local_4:Number;
            var _local_5:Number;
            _local_2 = _arg_1.lowerBound.x;
            _local_3 = _arg_1.lowerBound.y;
            _local_2 = (_local_2 - this.m_worldAABB.upperBound.x);
            _local_3 = (_local_3 - this.m_worldAABB.upperBound.y);
            _local_4 = this.m_worldAABB.lowerBound.x;
            _local_5 = this.m_worldAABB.lowerBound.y;
            _local_4 = (_local_4 - _arg_1.upperBound.x);
            _local_5 = (_local_5 - _arg_1.upperBound.y);
            _local_2 = b2Math.b2Max(_local_2, _local_4);
            _local_3 = b2Math.b2Max(_local_3, _local_5);
            return (b2Math.b2Max(_local_2, _local_3) < 0);
        }

        public function GetProxy(_arg_1:int):b2Proxy
        {
            var _local_2:b2Proxy = this.m_proxyPool[_arg_1];
            if (((_arg_1 == b2Pair.b2_nullProxy) || (_local_2.IsValid() == false)))
            {
                return (null);
            };
            return (_local_2);
        }

        public function CreateProxy(_arg_1:b2AABB, _arg_2:*):uint
        {
            var _local_3:uint;
            var _local_4:b2Proxy;
            var _local_11:Array;
            var _local_12:uint;
            var _local_13:uint;
            var _local_14:Array;
            var _local_15:Array;
            var _local_16:Array;
            var _local_17:int;
            var _local_18:int;
            var _local_19:b2Bound;
            var _local_20:b2Bound;
            var _local_21:b2Bound;
            var _local_22:int;
            var _local_23:b2Proxy;
            var _local_5:uint = this.m_freeProxy;
            _local_4 = this.m_proxyPool[_local_5];
            this.m_freeProxy = _local_4.GetNext();
            _local_4.overlapCount = 0;
            _local_4.userData = _arg_2;
            var _local_6:uint = (2 * this.m_proxyCount);
            var _local_7:Array = new Array();
            var _local_8:Array = new Array();
            this.ComputeBounds(_local_7, _local_8, _arg_1);
            var _local_9:int;
            while (_local_9 < 2)
            {
                _local_11 = this.m_bounds[_local_9];
                _local_14 = [_local_12];
                _local_15 = [_local_13];
                this.Query(_local_14, _local_15, _local_7[_local_9], _local_8[_local_9], _local_11, _local_6, _local_9);
                _local_12 = _local_14[0];
                _local_13 = _local_15[0];
                _local_16 = new Array();
                _local_18 = (_local_6 - _local_13);
                _local_17 = 0;
                while (_local_17 < _local_18)
                {
                    _local_16[_local_17] = new b2Bound();
                    _local_19 = _local_16[_local_17];
                    _local_20 = _local_11[int((_local_13 + _local_17))];
                    _local_19.value = _local_20.value;
                    _local_19.proxyId = _local_20.proxyId;
                    _local_19.stabbingCount = _local_20.stabbingCount;
                    _local_17++;
                };
                _local_18 = _local_16.length;
                _local_22 = (_local_13 + 2);
                _local_17 = 0;
                while (_local_17 < _local_18)
                {
                    _local_20 = _local_16[_local_17];
                    _local_19 = _local_11[int((_local_22 + _local_17))];
                    _local_19.value = _local_20.value;
                    _local_19.proxyId = _local_20.proxyId;
                    _local_19.stabbingCount = _local_20.stabbingCount;
                    _local_17++;
                };
                _local_16 = new Array();
                _local_18 = (_local_13 - _local_12);
                _local_17 = 0;
                while (_local_17 < _local_18)
                {
                    _local_16[_local_17] = new b2Bound();
                    _local_19 = _local_16[_local_17];
                    _local_20 = _local_11[int((_local_12 + _local_17))];
                    _local_19.value = _local_20.value;
                    _local_19.proxyId = _local_20.proxyId;
                    _local_19.stabbingCount = _local_20.stabbingCount;
                    _local_17++;
                };
                _local_18 = _local_16.length;
                _local_22 = (_local_12 + 1);
                _local_17 = 0;
                while (_local_17 < _local_18)
                {
                    _local_20 = _local_16[_local_17];
                    _local_19 = _local_11[int((_local_22 + _local_17))];
                    _local_19.value = _local_20.value;
                    _local_19.proxyId = _local_20.proxyId;
                    _local_19.stabbingCount = _local_20.stabbingCount;
                    _local_17++;
                };
                _local_13++;
                _local_19 = _local_11[_local_12];
                _local_20 = _local_11[_local_13];
                _local_19.value = _local_7[_local_9];
                _local_19.proxyId = _local_5;
                _local_20.value = _local_8[_local_9];
                _local_20.proxyId = _local_5;
                _local_21 = _local_11[int((_local_12 - 1))];
                _local_19.stabbingCount = ((_local_12 == 0) ? 0 : _local_21.stabbingCount);
                _local_21 = _local_11[int((_local_13 - 1))];
                _local_20.stabbingCount = _local_21.stabbingCount;
                _local_3 = _local_12;
                while (_local_3 < _local_13)
                {
                    _local_21 = _local_11[_local_3];
                    _local_21.stabbingCount++;
                    _local_3++;
                };
                _local_3 = _local_12;
                while (_local_3 < (_local_6 + 2))
                {
                    _local_19 = _local_11[_local_3];
                    _local_23 = this.m_proxyPool[_local_19.proxyId];
                    if (_local_19.IsLower())
                    {
                        _local_23.lowerBounds[_local_9] = _local_3;
                    }
                    else
                    {
                        _local_23.upperBounds[_local_9] = _local_3;
                    };
                    _local_3++;
                };
                _local_9++;
            };
            this.m_proxyCount++;
            var _local_10:int;
            while (_local_10 < this.m_queryResultCount)
            {
                this.m_pairManager.AddBufferedPair(_local_5, this.m_queryResults[_local_10]);
                _local_10++;
            };
            this.m_pairManager.Commit();
            this.m_queryResultCount = 0;
            this.IncrementTimeStamp();
            return (_local_5);
        }

        public function DestroyProxy(_arg_1:uint):void
        {
            var _local_2:b2Bound;
            var _local_3:b2Bound;
            var _local_8:Array;
            var _local_9:uint;
            var _local_10:uint;
            var _local_11:uint;
            var _local_12:uint;
            var _local_13:Array;
            var _local_14:int;
            var _local_15:int;
            var _local_16:int;
            var _local_17:uint;
            var _local_18:int;
            var _local_19:b2Proxy;
            var _local_4:b2Proxy = this.m_proxyPool[_arg_1];
            var _local_5:int = (2 * this.m_proxyCount);
            var _local_6:int;
            while (_local_6 < 2)
            {
                _local_8 = this.m_bounds[_local_6];
                _local_9 = _local_4.lowerBounds[_local_6];
                _local_10 = _local_4.upperBounds[_local_6];
                _local_2 = _local_8[_local_9];
                _local_11 = _local_2.value;
                _local_3 = _local_8[_local_10];
                _local_12 = _local_3.value;
                _local_13 = new Array();
                _local_15 = ((_local_10 - _local_9) - 1);
                _local_14 = 0;
                while (_local_14 < _local_15)
                {
                    _local_13[_local_14] = new b2Bound();
                    _local_2 = _local_13[_local_14];
                    _local_3 = _local_8[int(((_local_9 + 1) + _local_14))];
                    _local_2.value = _local_3.value;
                    _local_2.proxyId = _local_3.proxyId;
                    _local_2.stabbingCount = _local_3.stabbingCount;
                    _local_14++;
                };
                _local_15 = _local_13.length;
                _local_16 = _local_9;
                _local_14 = 0;
                while (_local_14 < _local_15)
                {
                    _local_3 = _local_13[_local_14];
                    _local_2 = _local_8[int((_local_16 + _local_14))];
                    _local_2.value = _local_3.value;
                    _local_2.proxyId = _local_3.proxyId;
                    _local_2.stabbingCount = _local_3.stabbingCount;
                    _local_14++;
                };
                _local_13 = new Array();
                _local_15 = ((_local_5 - _local_10) - 1);
                _local_14 = 0;
                while (_local_14 < _local_15)
                {
                    _local_13[_local_14] = new b2Bound();
                    _local_2 = _local_13[_local_14];
                    _local_3 = _local_8[int(((_local_10 + 1) + _local_14))];
                    _local_2.value = _local_3.value;
                    _local_2.proxyId = _local_3.proxyId;
                    _local_2.stabbingCount = _local_3.stabbingCount;
                    _local_14++;
                };
                _local_15 = _local_13.length;
                _local_16 = (_local_10 - 1);
                _local_14 = 0;
                while (_local_14 < _local_15)
                {
                    _local_3 = _local_13[_local_14];
                    _local_2 = _local_8[int((_local_16 + _local_14))];
                    _local_2.value = _local_3.value;
                    _local_2.proxyId = _local_3.proxyId;
                    _local_2.stabbingCount = _local_3.stabbingCount;
                    _local_14++;
                };
                _local_15 = (_local_5 - 2);
                _local_17 = _local_9;
                while (_local_17 < _local_15)
                {
                    _local_2 = _local_8[_local_17];
                    _local_19 = this.m_proxyPool[_local_2.proxyId];
                    if (_local_2.IsLower())
                    {
                        _local_19.lowerBounds[_local_6] = _local_17;
                    }
                    else
                    {
                        _local_19.upperBounds[_local_6] = _local_17;
                    };
                    _local_17++;
                };
                _local_15 = (_local_10 - 1);
                _local_18 = _local_9;
                while (_local_18 < _local_15)
                {
                    _local_2 = _local_8[_local_18];
                    _local_2.stabbingCount--;
                    _local_18++;
                };
                this.Query([0], [0], _local_11, _local_12, _local_8, (_local_5 - 2), _local_6);
                _local_6++;
            };
            var _local_7:int;
            while (_local_7 < this.m_queryResultCount)
            {
                this.m_pairManager.RemoveBufferedPair(_arg_1, this.m_queryResults[_local_7]);
                _local_7++;
            };
            this.m_pairManager.Commit();
            this.m_queryResultCount = 0;
            this.IncrementTimeStamp();
            _local_4.userData = null;
            _local_4.overlapCount = b2_invalid;
            _local_4.lowerBounds[0] = b2_invalid;
            _local_4.lowerBounds[1] = b2_invalid;
            _local_4.upperBounds[0] = b2_invalid;
            _local_4.upperBounds[1] = b2_invalid;
            _local_4.SetNext(this.m_freeProxy);
            this.m_freeProxy = _arg_1;
            this.m_proxyCount--;
        }

        public function MoveProxy(_arg_1:uint, _arg_2:b2AABB):void
        {
            var _local_3:Array;
            var _local_4:int;
            var _local_5:uint;
            var _local_6:uint;
            var _local_7:b2Bound;
            var _local_8:b2Bound;
            var _local_9:b2Bound;
            var _local_10:uint;
            var _local_11:b2Proxy;
            var _local_16:Array;
            var _local_17:uint;
            var _local_18:uint;
            var _local_19:uint;
            var _local_20:uint;
            var _local_21:int;
            var _local_22:int;
            var _local_23:uint;
            var _local_24:b2Proxy;
            if (((_arg_1 == b2Pair.b2_nullProxy) || (b2Settings.b2_maxProxies <= _arg_1)))
            {
                return;
            };
            if (_arg_2.IsValid() == false)
            {
                return;
            };
            var _local_12:uint = (2 * this.m_proxyCount);
            var _local_13:b2Proxy = this.m_proxyPool[_arg_1];
            var _local_14:b2BoundValues = new b2BoundValues();
            this.ComputeBounds(_local_14.lowerValues, _local_14.upperValues, _arg_2);
            var _local_15:b2BoundValues = new b2BoundValues();
            _local_5 = 0;
            while (_local_5 < 2)
            {
                _local_7 = this.m_bounds[_local_5][_local_13.lowerBounds[_local_5]];
                _local_15.lowerValues[_local_5] = _local_7.value;
                _local_7 = this.m_bounds[_local_5][_local_13.upperBounds[_local_5]];
                _local_15.upperValues[_local_5] = _local_7.value;
                _local_5++;
            };
            _local_5 = 0;
            while (_local_5 < 2)
            {
                _local_16 = this.m_bounds[_local_5];
                _local_17 = _local_13.lowerBounds[_local_5];
                _local_18 = _local_13.upperBounds[_local_5];
                _local_19 = _local_14.lowerValues[_local_5];
                _local_20 = _local_14.upperValues[_local_5];
                _local_7 = _local_16[_local_17];
                _local_21 = (_local_19 - _local_7.value);
                _local_7.value = _local_19;
                _local_7 = _local_16[_local_18];
                _local_22 = (_local_20 - _local_7.value);
                _local_7.value = _local_20;
                if (_local_21 < 0)
                {
                    _local_6 = _local_17;
                    while (((_local_6 > 0) && (_local_19 < (_local_16[int((_local_6 - 1))] as b2Bound).value)))
                    {
                        _local_7 = _local_16[_local_6];
                        _local_8 = _local_16[int((_local_6 - 1))];
                        _local_23 = _local_8.proxyId;
                        _local_24 = this.m_proxyPool[_local_8.proxyId];
                        _local_8.stabbingCount++;
                        if (_local_8.IsUpper() == true)
                        {
                            if (this.TestOverlap(_local_14, _local_24))
                            {
                                this.m_pairManager.AddBufferedPair(_arg_1, _local_23);
                            };
                            _local_3 = _local_24.upperBounds;
                            _local_4 = _local_3[_local_5];
                            _local_4++;
                            _local_3[_local_5] = _local_4;
                            _local_7.stabbingCount++;
                        }
                        else
                        {
                            _local_3 = _local_24.lowerBounds;
                            _local_4 = _local_3[_local_5];
                            _local_4++;
                            _local_3[_local_5] = _local_4;
                            _local_7.stabbingCount--;
                        };
                        _local_3 = _local_13.lowerBounds;
                        _local_4 = _local_3[_local_5];
                        _local_4--;
                        _local_3[_local_5] = _local_4;
                        _local_7.Swap(_local_8);
                        _local_6--;
                    };
                };
                if (_local_22 > 0)
                {
                    _local_6 = _local_18;
                    while (((_local_6 < (_local_12 - 1)) && ((_local_16[int((_local_6 + 1))] as b2Bound).value <= _local_20)))
                    {
                        _local_7 = _local_16[_local_6];
                        _local_9 = _local_16[int((_local_6 + 1))];
                        _local_10 = _local_9.proxyId;
                        _local_11 = this.m_proxyPool[_local_10];
                        _local_9.stabbingCount++;
                        if (_local_9.IsLower() == true)
                        {
                            if (this.TestOverlap(_local_14, _local_11))
                            {
                                this.m_pairManager.AddBufferedPair(_arg_1, _local_10);
                            };
                            _local_3 = _local_11.lowerBounds;
                            _local_4 = _local_3[_local_5];
                            _local_4--;
                            _local_3[_local_5] = _local_4;
                            _local_7.stabbingCount++;
                        }
                        else
                        {
                            _local_3 = _local_11.upperBounds;
                            _local_4 = _local_3[_local_5];
                            _local_4--;
                            _local_3[_local_5] = _local_4;
                            _local_7.stabbingCount--;
                        };
                        _local_3 = _local_13.upperBounds;
                        _local_4 = _local_3[_local_5];
                        _local_4++;
                        _local_3[_local_5] = _local_4;
                        _local_7.Swap(_local_9);
                        _local_6++;
                    };
                };
                if (_local_21 > 0)
                {
                    _local_6 = _local_17;
                    while (((_local_6 < (_local_12 - 1)) && ((_local_16[int((_local_6 + 1))] as b2Bound).value <= _local_19)))
                    {
                        _local_7 = _local_16[_local_6];
                        _local_9 = _local_16[int((_local_6 + 1))];
                        _local_10 = _local_9.proxyId;
                        _local_11 = this.m_proxyPool[_local_10];
                        _local_9.stabbingCount--;
                        if (_local_9.IsUpper())
                        {
                            if (this.TestOverlap(_local_15, _local_11))
                            {
                                this.m_pairManager.RemoveBufferedPair(_arg_1, _local_10);
                            };
                            _local_3 = _local_11.upperBounds;
                            _local_4 = _local_3[_local_5];
                            _local_4--;
                            _local_3[_local_5] = _local_4;
                            _local_7.stabbingCount--;
                        }
                        else
                        {
                            _local_3 = _local_11.lowerBounds;
                            _local_4 = _local_3[_local_5];
                            _local_4--;
                            _local_3[_local_5] = _local_4;
                            _local_7.stabbingCount++;
                        };
                        _local_3 = _local_13.lowerBounds;
                        _local_4 = _local_3[_local_5];
                        _local_4++;
                        _local_3[_local_5] = _local_4;
                        _local_7.Swap(_local_9);
                        _local_6++;
                    };
                };
                if (_local_22 < 0)
                {
                    _local_6 = _local_18;
                    while (((_local_6 > 0) && (_local_20 < (_local_16[int((_local_6 - 1))] as b2Bound).value)))
                    {
                        _local_7 = _local_16[_local_6];
                        _local_8 = _local_16[int((_local_6 - 1))];
                        _local_23 = _local_8.proxyId;
                        _local_24 = this.m_proxyPool[_local_23];
                        _local_8.stabbingCount--;
                        if (_local_8.IsLower() == true)
                        {
                            if (this.TestOverlap(_local_15, _local_24))
                            {
                                this.m_pairManager.RemoveBufferedPair(_arg_1, _local_23);
                            };
                            _local_3 = _local_24.lowerBounds;
                            _local_4 = _local_3[_local_5];
                            _local_4++;
                            _local_3[_local_5] = _local_4;
                            _local_7.stabbingCount--;
                        }
                        else
                        {
                            _local_3 = _local_24.upperBounds;
                            _local_4 = _local_3[_local_5];
                            _local_4++;
                            _local_3[_local_5] = _local_4;
                            _local_7.stabbingCount++;
                        };
                        _local_3 = _local_13.upperBounds;
                        _local_4 = _local_3[_local_5];
                        _local_4--;
                        _local_3[_local_5] = _local_4;
                        _local_7.Swap(_local_8);
                        _local_6--;
                    };
                };
                _local_5++;
            };
        }

        public function Commit():void
        {
            this.m_pairManager.Commit();
        }

        public function QueryAABB(_arg_1:b2AABB, _arg_2:*, _arg_3:int):int
        {
            var _local_6:uint;
            var _local_7:uint;
            var _local_12:b2Proxy;
            var _local_4:Array = new Array();
            var _local_5:Array = new Array();
            this.ComputeBounds(_local_4, _local_5, _arg_1);
            var _local_8:Array = [_local_6];
            var _local_9:Array = [_local_7];
            this.Query(_local_8, _local_9, _local_4[0], _local_5[0], this.m_bounds[0], (2 * this.m_proxyCount), 0);
            this.Query(_local_8, _local_9, _local_4[1], _local_5[1], this.m_bounds[1], (2 * this.m_proxyCount), 1);
            var _local_10:int;
            var _local_11:int;
            while (((_local_11 < this.m_queryResultCount) && (_local_10 < _arg_3)))
            {
                _local_12 = this.m_proxyPool[this.m_queryResults[_local_11]];
                _arg_2[_local_11] = _local_12.userData;
                _local_11++;
                _local_10++;
            };
            this.m_queryResultCount = 0;
            this.IncrementTimeStamp();
            return (_local_10);
        }

        public function Validate():void
        {
            var _local_1:b2Pair;
            var _local_2:b2Proxy;
            var _local_3:b2Proxy;
            var _local_4:Boolean;
            var _local_6:b2Bound;
            var _local_7:uint;
            var _local_8:uint;
            var _local_9:uint;
            var _local_10:b2Bound;
            var _local_5:int;
            while (_local_5 < 2)
            {
                _local_6 = this.m_bounds[_local_5];
                _local_7 = (2 * this.m_proxyCount);
                _local_8 = 0;
                _local_9 = 0;
                while (_local_9 < _local_7)
                {
                    _local_10 = _local_6[_local_9];
                    if (_local_10.IsLower() == true)
                    {
                        _local_8++;
                    }
                    else
                    {
                        _local_8--;
                    };
                    _local_9++;
                };
                _local_5++;
            };
        }

        private function ComputeBounds(_arg_1:Array, _arg_2:Array, _arg_3:b2AABB):void
        {
            var _local_4:Number = _arg_3.lowerBound.x;
            var _local_5:Number = _arg_3.lowerBound.y;
            _local_4 = b2Math.b2Min(_local_4, this.m_worldAABB.upperBound.x);
            _local_5 = b2Math.b2Min(_local_5, this.m_worldAABB.upperBound.y);
            _local_4 = b2Math.b2Max(_local_4, this.m_worldAABB.lowerBound.x);
            _local_5 = b2Math.b2Max(_local_5, this.m_worldAABB.lowerBound.y);
            var _local_6:Number = _arg_3.upperBound.x;
            var _local_7:Number = _arg_3.upperBound.y;
            _local_6 = b2Math.b2Min(_local_6, this.m_worldAABB.upperBound.x);
            _local_7 = b2Math.b2Min(_local_7, this.m_worldAABB.upperBound.y);
            _local_6 = b2Math.b2Max(_local_6, this.m_worldAABB.lowerBound.x);
            _local_7 = b2Math.b2Max(_local_7, this.m_worldAABB.lowerBound.y);
            _arg_1[0] = (uint((this.m_quantizationFactor.x * (_local_4 - this.m_worldAABB.lowerBound.x))) & (b2Settings.USHRT_MAX - 1));
            _arg_2[0] = ((uint((this.m_quantizationFactor.x * (_local_6 - this.m_worldAABB.lowerBound.x))) & 0xFFFF) | 0x01);
            _arg_1[1] = (uint((this.m_quantizationFactor.y * (_local_5 - this.m_worldAABB.lowerBound.y))) & (b2Settings.USHRT_MAX - 1));
            _arg_2[1] = ((uint((this.m_quantizationFactor.y * (_local_7 - this.m_worldAABB.lowerBound.y))) & 0xFFFF) | 0x01);
        }

        private function TestOverlapValidate(_arg_1:b2Proxy, _arg_2:b2Proxy):Boolean
        {
            var _local_4:Array;
            var _local_5:b2Bound;
            var _local_6:b2Bound;
            var _local_3:int;
            while (_local_3 < 2)
            {
                _local_4 = this.m_bounds[_local_3];
                _local_5 = _local_4[_arg_1.lowerBounds[_local_3]];
                _local_6 = _local_4[_arg_2.upperBounds[_local_3]];
                if (_local_5.value > _local_6.value)
                {
                    return (false);
                };
                _local_5 = _local_4[_arg_1.upperBounds[_local_3]];
                _local_6 = _local_4[_arg_2.lowerBounds[_local_3]];
                if (_local_5.value < _local_6.value)
                {
                    return (false);
                };
                _local_3++;
            };
            return (true);
        }

        public function TestOverlap(_arg_1:b2BoundValues, _arg_2:b2Proxy):Boolean
        {
            var _local_4:Array;
            var _local_5:b2Bound;
            var _local_3:int;
            while (_local_3 < 2)
            {
                _local_4 = this.m_bounds[_local_3];
                _local_5 = _local_4[_arg_2.upperBounds[_local_3]];
                if (_arg_1.lowerValues[_local_3] > _local_5.value)
                {
                    return (false);
                };
                _local_5 = _local_4[_arg_2.lowerBounds[_local_3]];
                if (_arg_1.upperValues[_local_3] < _local_5.value)
                {
                    return (false);
                };
                _local_3++;
            };
            return (true);
        }

        private function Query(_arg_1:Array, _arg_2:Array, _arg_3:uint, _arg_4:uint, _arg_5:Array, _arg_6:uint, _arg_7:int):void
        {
            var _local_10:b2Bound;
            var _local_12:int;
            var _local_13:int;
            var _local_14:b2Proxy;
            var _local_8:uint = BinarySearch(_arg_5, _arg_6, _arg_3);
            var _local_9:uint = BinarySearch(_arg_5, _arg_6, _arg_4);
            var _local_11:uint = _local_8;
            while (_local_11 < _local_9)
            {
                _local_10 = _arg_5[_local_11];
                if (_local_10.IsLower())
                {
                    this.IncrementOverlapCount(_local_10.proxyId);
                };
                _local_11++;
            };
            if (_local_8 > 0)
            {
                _local_12 = (_local_8 - 1);
                _local_10 = _arg_5[_local_12];
                _local_13 = _local_10.stabbingCount;
                while (_local_13)
                {
                    _local_10 = _arg_5[_local_12];
                    if (_local_10.IsLower())
                    {
                        _local_14 = this.m_proxyPool[_local_10.proxyId];
                        if (_local_8 <= _local_14.upperBounds[_arg_7])
                        {
                            this.IncrementOverlapCount(_local_10.proxyId);
                            _local_13--;
                        };
                    };
                    _local_12--;
                };
            };
            _arg_1[0] = _local_8;
            _arg_2[0] = _local_9;
        }

        private function IncrementOverlapCount(_arg_1:uint):void
        {
            var _local_2:b2Proxy = this.m_proxyPool[_arg_1];
            if (_local_2.timeStamp < this.m_timeStamp)
            {
                _local_2.timeStamp = this.m_timeStamp;
                _local_2.overlapCount = 1;
            }
            else
            {
                _local_2.overlapCount = 2;
                this.m_queryResults[this.m_queryResultCount] = _arg_1;
                this.m_queryResultCount++;
            };
        }

        private function IncrementTimeStamp():void
        {
            var _local_1:uint;
            if (this.m_timeStamp == b2Settings.USHRT_MAX)
            {
                _local_1 = 0;
                while (_local_1 < b2Settings.b2_maxProxies)
                {
                    (this.m_proxyPool[_local_1] as b2Proxy).timeStamp = 0;
                    _local_1++;
                };
                this.m_timeStamp = 1;
            }
            else
            {
                this.m_timeStamp++;
            };
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2BufferedPair

package Box2D.Collision
{
    public class b2BufferedPair 
    {

        public var proxyId1:uint;
        public var proxyId2:uint;


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2Collision

package Box2D.Collision
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2Math;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Collision.Shapes.b2PolygonShape;
    import Box2D.Common.Math.b2XForm;
    import Box2D.Common.b2Settings;
    import Box2D.Collision.Shapes.b2CircleShape;
    import Box2D.Collision.Shapes.*;
    import Box2D.Common.Math.*;
    import Box2D.Common.*;

    public class b2Collision 
    {

        public static const b2_nullFeature:uint = 0xFF;
        private static var b2CollidePolyTempVec:b2Vec2 = new b2Vec2();


        public static function ClipSegmentToLine(_arg_1:Array, _arg_2:Array, _arg_3:b2Vec2, _arg_4:Number):int
        {
            var _local_5:ClipVertex;
            var _local_6:int;
            var _local_7:b2Vec2;
            var _local_8:b2Vec2;
            var _local_9:Number;
            var _local_11:Number;
            var _local_12:b2Vec2;
            var _local_13:ClipVertex;
            _local_6 = 0;
            _local_5 = _arg_2[0];
            _local_7 = _local_5.v;
            _local_5 = _arg_2[1];
            _local_8 = _local_5.v;
            _local_9 = (b2Math.b2Dot(_arg_3, _local_7) - _arg_4);
            var _local_10:Number = (b2Math.b2Dot(_arg_3, _local_8) - _arg_4);
            if (_local_9 <= 0)
            {
                var _local_14:* = _local_6++;
                _arg_1[_local_14] = _arg_2[0];
            };
            if (_local_10 <= 0)
            {
                _local_14 = _local_6++;
                _arg_1[_local_14] = _arg_2[1];
            };
            if ((_local_9 * _local_10) < 0)
            {
                _local_11 = (_local_9 / (_local_9 - _local_10));
                _local_5 = _arg_1[_local_6];
                _local_12 = _local_5.v;
                _local_12.x = (_local_7.x + (_local_11 * (_local_8.x - _local_7.x)));
                _local_12.y = (_local_7.y + (_local_11 * (_local_8.y - _local_7.y)));
                _local_5 = _arg_1[_local_6];
                if (_local_9 > 0)
                {
                    _local_13 = _arg_2[0];
                    _local_5.id = _local_13.id;
                }
                else
                {
                    _local_13 = _arg_2[1];
                    _local_5.id = _local_13.id;
                };
                _local_6++;
            };
            return (_local_6);
        }

        public static function EdgeSeparation(_arg_1:b2PolygonShape, _arg_2:b2XForm, _arg_3:int, _arg_4:b2PolygonShape, _arg_5:b2XForm):Number
        {
            var _local_11:b2Mat22;
            var _local_12:b2Vec2;
            var _local_25:Number;
            var _local_6:int = _arg_1.m_vertexCount;
            var _local_7:Array = _arg_1.m_vertices;
            var _local_8:Array = _arg_1.m_normals;
            var _local_9:int = _arg_4.m_vertexCount;
            var _local_10:Array = _arg_4.m_vertices;
            _local_11 = _arg_2.R;
            _local_12 = _local_8[_arg_3];
            var _local_13:Number = ((_local_11.col1.x * _local_12.x) + (_local_11.col2.x * _local_12.y));
            var _local_14:Number = ((_local_11.col1.y * _local_12.x) + (_local_11.col2.y * _local_12.y));
            _local_11 = _arg_5.R;
            var _local_15:Number = ((_local_11.col1.x * _local_13) + (_local_11.col1.y * _local_14));
            var _local_16:Number = ((_local_11.col2.x * _local_13) + (_local_11.col2.y * _local_14));
            var _local_17:int;
            var _local_18:Number = Number.MAX_VALUE;
            var _local_19:int;
            while (_local_19 < _local_9)
            {
                _local_12 = _local_10[_local_19];
                _local_25 = ((_local_12.x * _local_15) + (_local_12.y * _local_16));
                if (_local_25 < _local_18)
                {
                    _local_18 = _local_25;
                    _local_17 = _local_19;
                };
                _local_19++;
            };
            _local_12 = _local_7[_arg_3];
            _local_11 = _arg_2.R;
            var _local_20:Number = (_arg_2.position.x + ((_local_11.col1.x * _local_12.x) + (_local_11.col2.x * _local_12.y)));
            var _local_21:Number = (_arg_2.position.y + ((_local_11.col1.y * _local_12.x) + (_local_11.col2.y * _local_12.y)));
            _local_12 = _local_10[_local_17];
            _local_11 = _arg_5.R;
            var _local_22:Number = (_arg_5.position.x + ((_local_11.col1.x * _local_12.x) + (_local_11.col2.x * _local_12.y)));
            var _local_23:Number = (_arg_5.position.y + ((_local_11.col1.y * _local_12.x) + (_local_11.col2.y * _local_12.y)));
            _local_22 = (_local_22 - _local_20);
            _local_23 = (_local_23 - _local_21);
            var _local_24:Number = ((_local_22 * _local_13) + (_local_23 * _local_14));
            return (_local_24);
        }

        public static function FindMaxSeparation(_arg_1:Array, _arg_2:b2PolygonShape, _arg_3:b2XForm, _arg_4:b2PolygonShape, _arg_5:b2XForm):Number
        {
            var _local_8:b2Vec2;
            var _local_9:b2Mat22;
            var _local_22:int;
            var _local_23:Number;
            var _local_24:int;
            var _local_25:Number;
            var _local_6:int = _arg_2.m_vertexCount;
            var _local_7:Array = _arg_2.m_normals;
            _local_9 = _arg_5.R;
            _local_8 = _arg_4.m_centroid;
            var _local_10:Number = (_arg_5.position.x + ((_local_9.col1.x * _local_8.x) + (_local_9.col2.x * _local_8.y)));
            var _local_11:Number = (_arg_5.position.y + ((_local_9.col1.y * _local_8.x) + (_local_9.col2.y * _local_8.y)));
            _local_9 = _arg_3.R;
            _local_8 = _arg_2.m_centroid;
            _local_10 = (_local_10 - (_arg_3.position.x + ((_local_9.col1.x * _local_8.x) + (_local_9.col2.x * _local_8.y))));
            _local_11 = (_local_11 - (_arg_3.position.y + ((_local_9.col1.y * _local_8.x) + (_local_9.col2.y * _local_8.y))));
            var _local_12:Number = ((_local_10 * _arg_3.R.col1.x) + (_local_11 * _arg_3.R.col1.y));
            var _local_13:Number = ((_local_10 * _arg_3.R.col2.x) + (_local_11 * _arg_3.R.col2.y));
            var _local_14:int;
            var _local_15:Number = -(Number.MAX_VALUE);
            var _local_16:int;
            while (_local_16 < _local_6)
            {
                _local_8 = _local_7[_local_16];
                _local_25 = ((_local_8.x * _local_12) + (_local_8.y * _local_13));
                if (_local_25 > _local_15)
                {
                    _local_15 = _local_25;
                    _local_14 = _local_16;
                };
                _local_16++;
            };
            var _local_17:Number = EdgeSeparation(_arg_2, _arg_3, _local_14, _arg_4, _arg_5);
            if (_local_17 > 0)
            {
                return (_local_17);
            };
            var _local_18:int = (((_local_14 - 1) >= 0) ? (_local_14 - 1) : (_local_6 - 1));
            var _local_19:Number = EdgeSeparation(_arg_2, _arg_3, _local_18, _arg_4, _arg_5);
            if (_local_19 > 0)
            {
                return (_local_19);
            };
            var _local_20:int = (((_local_14 + 1) < _local_6) ? (_local_14 + 1) : 0);
            var _local_21:Number = EdgeSeparation(_arg_2, _arg_3, _local_20, _arg_4, _arg_5);
            if (_local_21 > 0)
            {
                return (_local_21);
            };
            if (((_local_19 > _local_17) && (_local_19 > _local_21)))
            {
                _local_24 = -1;
                _local_22 = _local_18;
                _local_23 = _local_19;
            }
            else
            {
                if (_local_21 > _local_17)
                {
                    _local_24 = 1;
                    _local_22 = _local_20;
                    _local_23 = _local_21;
                }
                else
                {
                    _arg_1[0] = _local_14;
                    return (_local_17);
                };
            };
            while (true)
            {
                if (_local_24 == -1)
                {
                    _local_14 = (((_local_22 - 1) >= 0) ? (_local_22 - 1) : (_local_6 - 1));
                }
                else
                {
                    _local_14 = (((_local_22 + 1) < _local_6) ? (_local_22 + 1) : 0);
                };
                _local_17 = EdgeSeparation(_arg_2, _arg_3, _local_14, _arg_4, _arg_5);
                if (_local_17 > 0)
                {
                    return (_local_17);
                };
                if (_local_17 > _local_23)
                {
                    _local_22 = _local_14;
                    _local_23 = _local_17;
                }
                else
                {
                    break;
                };
            };
            _arg_1[0] = _local_22;
            return (_local_23);
        }

        public static function FindIncidentEdge(_arg_1:Array, _arg_2:b2PolygonShape, _arg_3:b2XForm, _arg_4:int, _arg_5:b2PolygonShape, _arg_6:b2XForm):void
        {
            var _local_12:b2Mat22;
            var _local_13:b2Vec2;
            var _local_20:ClipVertex;
            var _local_23:Number;
            var _local_7:int = _arg_2.m_vertexCount;
            var _local_8:Array = _arg_2.m_normals;
            var _local_9:int = _arg_5.m_vertexCount;
            var _local_10:Array = _arg_5.m_vertices;
            var _local_11:Array = _arg_5.m_normals;
            _local_12 = _arg_3.R;
            _local_13 = _local_8[_arg_4];
            var _local_14:Number = ((_local_12.col1.x * _local_13.x) + (_local_12.col2.x * _local_13.y));
            var _local_15:Number = ((_local_12.col1.y * _local_13.x) + (_local_12.col2.y * _local_13.y));
            _local_12 = _arg_6.R;
            var _local_16:Number = ((_local_12.col1.x * _local_14) + (_local_12.col1.y * _local_15));
            _local_15 = ((_local_12.col2.x * _local_14) + (_local_12.col2.y * _local_15));
            _local_14 = _local_16;
            var _local_17:int;
            var _local_18:Number = Number.MAX_VALUE;
            var _local_19:int;
            while (_local_19 < _local_9)
            {
                _local_13 = _local_11[_local_19];
                _local_23 = ((_local_14 * _local_13.x) + (_local_15 * _local_13.y));
                if (_local_23 < _local_18)
                {
                    _local_18 = _local_23;
                    _local_17 = _local_19;
                };
                _local_19++;
            };
            var _local_21:int = _local_17;
            var _local_22:int = (((_local_21 + 1) < _local_9) ? (_local_21 + 1) : 0);
            _local_20 = _arg_1[0];
            _local_13 = _local_10[_local_21];
            _local_12 = _arg_6.R;
            _local_20.v.x = (_arg_6.position.x + ((_local_12.col1.x * _local_13.x) + (_local_12.col2.x * _local_13.y)));
            _local_20.v.y = (_arg_6.position.y + ((_local_12.col1.y * _local_13.x) + (_local_12.col2.y * _local_13.y)));
            _local_20.id.features.referenceEdge = _arg_4;
            _local_20.id.features.incidentEdge = _local_21;
            _local_20.id.features.incidentVertex = 0;
            _local_20 = _arg_1[1];
            _local_13 = _local_10[_local_22];
            _local_12 = _arg_6.R;
            _local_20.v.x = (_arg_6.position.x + ((_local_12.col1.x * _local_13.x) + (_local_12.col2.x * _local_13.y)));
            _local_20.v.y = (_arg_6.position.y + ((_local_12.col1.y * _local_13.x) + (_local_12.col2.y * _local_13.y)));
            _local_20.id.features.referenceEdge = _arg_4;
            _local_20.id.features.incidentEdge = _local_22;
            _local_20.id.features.incidentVertex = 1;
        }

        public static function b2CollidePolygons(_arg_1:b2Manifold, _arg_2:b2PolygonShape, _arg_3:b2XForm, _arg_4:b2PolygonShape, _arg_5:b2XForm):void
        {
            var _local_6:ClipVertex;
            var _local_13:b2PolygonShape;
            var _local_14:b2PolygonShape;
            var _local_17:int;
            var _local_18:uint;
            var _local_34:int;
            var _local_37:b2Vec2;
            var _local_38:Number;
            var _local_39:b2ManifoldPoint;
            _arg_1.pointCount = 0;
            var _local_7:int;
            var _local_8:Array = [_local_7];
            var _local_9:Number = FindMaxSeparation(_local_8, _arg_2, _arg_3, _arg_4, _arg_5);
            _local_7 = _local_8[0];
            if (_local_9 > 0)
            {
                return;
            };
            var _local_10:int;
            var _local_11:Array = [_local_10];
            var _local_12:Number = FindMaxSeparation(_local_11, _arg_4, _arg_5, _arg_2, _arg_3);
            _local_10 = _local_11[0];
            if (_local_12 > 0)
            {
                return;
            };
            var _local_15:b2XForm = new b2XForm();
            var _local_16:b2XForm = new b2XForm();
            var _local_19:Number = 0.98;
            var _local_20:Number = 0.001;
            if (_local_12 > ((_local_19 * _local_9) + _local_20))
            {
                _local_13 = _arg_4;
                _local_14 = _arg_2;
                _local_15.Set(_arg_5);
                _local_16.Set(_arg_3);
                _local_17 = _local_10;
                _local_18 = 1;
            }
            else
            {
                _local_13 = _arg_2;
                _local_14 = _arg_4;
                _local_15.Set(_arg_3);
                _local_16.Set(_arg_5);
                _local_17 = _local_7;
                _local_18 = 0;
            };
            var _local_21:Array = [new ClipVertex(), new ClipVertex()];
            FindIncidentEdge(_local_21, _local_13, _local_15, _local_17, _local_14, _local_16);
            var _local_22:int = _local_13.m_vertexCount;
            var _local_23:Array = _local_13.m_vertices;
            var _local_24:b2Vec2 = _local_23[_local_17];
            var _local_25:b2Vec2 = _local_24.Copy();
            if ((_local_17 + 1) < _local_22)
            {
                _local_24 = _local_23[int((_local_17 + 1))];
                _local_37 = _local_24.Copy();
            }
            else
            {
                _local_24 = _local_23[0];
                _local_37 = _local_24.Copy();
            };
            var _local_26:b2Vec2 = b2Math.SubtractVV(_local_37, _local_25);
            var _local_27:b2Vec2 = b2Math.b2MulMV(_local_15.R, b2Math.SubtractVV(_local_37, _local_25));
            _local_27.Normalize();
            var _local_28:b2Vec2 = b2Math.b2CrossVF(_local_27, 1);
            _local_25 = b2Math.b2MulX(_local_15, _local_25);
            _local_37 = b2Math.b2MulX(_local_15, _local_37);
            var _local_29:Number = b2Math.b2Dot(_local_28, _local_25);
            var _local_30:Number = -(b2Math.b2Dot(_local_27, _local_25));
            var _local_31:Number = b2Math.b2Dot(_local_27, _local_37);
            var _local_32:Array = [new ClipVertex(), new ClipVertex()];
            var _local_33:Array = [new ClipVertex(), new ClipVertex()];
            _local_34 = ClipSegmentToLine(_local_32, _local_21, _local_27.Negative(), _local_30);
            if (_local_34 < 2)
            {
                return;
            };
            _local_34 = ClipSegmentToLine(_local_33, _local_32, _local_27, _local_31);
            if (_local_34 < 2)
            {
                return;
            };
            _arg_1.normal = ((_local_18) ? _local_28.Negative() : _local_28.Copy());
            var _local_35:int;
            var _local_36:int;
            while (_local_36 < b2Settings.b2_maxManifoldPoints)
            {
                _local_6 = _local_33[_local_36];
                _local_38 = (b2Math.b2Dot(_local_28, _local_6.v) - _local_29);
                if (_local_38 <= 0)
                {
                    _local_39 = _arg_1.points[_local_35];
                    _local_39.separation = _local_38;
                    _local_39.localPoint1 = b2Math.b2MulXT(_arg_3, _local_6.v);
                    _local_39.localPoint2 = b2Math.b2MulXT(_arg_5, _local_6.v);
                    _local_39.id.key = _local_6.id._key;
                    _local_39.id.features.flip = _local_18;
                    _local_35++;
                };
                _local_36++;
            };
            _arg_1.pointCount = _local_35;
        }

        public static function b2CollideCircles(_arg_1:b2Manifold, _arg_2:b2CircleShape, _arg_3:b2XForm, _arg_4:b2CircleShape, _arg_5:b2XForm):void
        {
            var _local_6:b2Mat22;
            var _local_7:b2Vec2;
            var _local_18:Number;
            var _local_24:Number;
            var _local_25:Number;
            _arg_1.pointCount = 0;
            _local_6 = _arg_3.R;
            _local_7 = _arg_2.m_localPosition;
            var _local_8:Number = (_arg_3.position.x + ((_local_6.col1.x * _local_7.x) + (_local_6.col2.x * _local_7.y)));
            var _local_9:Number = (_arg_3.position.y + ((_local_6.col1.y * _local_7.x) + (_local_6.col2.y * _local_7.y)));
            _local_6 = _arg_5.R;
            _local_7 = _arg_4.m_localPosition;
            var _local_10:Number = (_arg_5.position.x + ((_local_6.col1.x * _local_7.x) + (_local_6.col2.x * _local_7.y)));
            var _local_11:Number = (_arg_5.position.y + ((_local_6.col1.y * _local_7.x) + (_local_6.col2.y * _local_7.y)));
            var _local_12:Number = (_local_10 - _local_8);
            var _local_13:Number = (_local_11 - _local_9);
            var _local_14:Number = ((_local_12 * _local_12) + (_local_13 * _local_13));
            var _local_15:Number = _arg_2.m_radius;
            var _local_16:Number = _arg_4.m_radius;
            var _local_17:Number = (_local_15 + _local_16);
            if (_local_14 > (_local_17 * _local_17))
            {
                return;
            };
            if (_local_14 < Number.MIN_VALUE)
            {
                _local_18 = -(_local_17);
                _arg_1.normal.Set(0, 1);
            }
            else
            {
                _local_24 = Math.sqrt(_local_14);
                _local_18 = (_local_24 - _local_17);
                _local_25 = (1 / _local_24);
                _arg_1.normal.x = (_local_25 * _local_12);
                _arg_1.normal.y = (_local_25 * _local_13);
            };
            _arg_1.pointCount = 1;
            var _local_19:b2ManifoldPoint = _arg_1.points[0];
            _local_19.id.key = 0;
            _local_19.separation = _local_18;
            _local_8 = (_local_8 + (_local_15 * _arg_1.normal.x));
            _local_9 = (_local_9 + (_local_15 * _arg_1.normal.y));
            _local_10 = (_local_10 - (_local_16 * _arg_1.normal.x));
            _local_11 = (_local_11 - (_local_16 * _arg_1.normal.y));
            var _local_20:Number = (0.5 * (_local_8 + _local_10));
            var _local_21:Number = (0.5 * (_local_9 + _local_11));
            var _local_22:Number = (_local_20 - _arg_3.position.x);
            var _local_23:Number = (_local_21 - _arg_3.position.y);
            _local_19.localPoint1.x = ((_local_22 * _arg_3.R.col1.x) + (_local_23 * _arg_3.R.col1.y));
            _local_19.localPoint1.y = ((_local_22 * _arg_3.R.col2.x) + (_local_23 * _arg_3.R.col2.y));
            _local_22 = (_local_20 - _arg_5.position.x);
            _local_23 = (_local_21 - _arg_5.position.y);
            _local_19.localPoint2.x = ((_local_22 * _arg_5.R.col1.x) + (_local_23 * _arg_5.R.col1.y));
            _local_19.localPoint2.y = ((_local_22 * _arg_5.R.col2.x) + (_local_23 * _arg_5.R.col2.y));
        }

        public static function b2CollidePolygonAndCircle(_arg_1:b2Manifold, _arg_2:b2PolygonShape, _arg_3:b2XForm, _arg_4:b2CircleShape, _arg_5:b2XForm):void
        {
            var _local_6:b2ManifoldPoint;
            var _local_7:Number;
            var _local_8:Number;
            var _local_9:Number;
            var _local_10:Number;
            var _local_11:b2Vec2;
            var _local_12:b2Mat22;
            var _local_17:Number;
            var _local_32:Number;
            var _local_33:Number;
            var _local_34:Number;
            _arg_1.pointCount = 0;
            _local_12 = _arg_5.R;
            _local_11 = _arg_4.m_localPosition;
            var _local_13:Number = (_arg_5.position.x + ((_local_12.col1.x * _local_11.x) + (_local_12.col2.x * _local_11.y)));
            var _local_14:Number = (_arg_5.position.y + ((_local_12.col1.y * _local_11.x) + (_local_12.col2.y * _local_11.y)));
            _local_7 = (_local_13 - _arg_3.position.x);
            _local_8 = (_local_14 - _arg_3.position.y);
            _local_12 = _arg_3.R;
            var _local_15:Number = ((_local_7 * _local_12.col1.x) + (_local_8 * _local_12.col1.y));
            var _local_16:Number = ((_local_7 * _local_12.col2.x) + (_local_8 * _local_12.col2.y));
            var _local_18:int;
            var _local_19:Number = -(Number.MAX_VALUE);
            var _local_20:Number = _arg_4.m_radius;
            var _local_21:int = _arg_2.m_vertexCount;
            var _local_22:Array = _arg_2.m_vertices;
            var _local_23:Array = _arg_2.m_normals;
            var _local_24:int;
            while (_local_24 < _local_21)
            {
                _local_11 = _local_22[_local_24];
                _local_7 = (_local_15 - _local_11.x);
                _local_8 = (_local_16 - _local_11.y);
                _local_11 = _local_23[_local_24];
                _local_34 = ((_local_11.x * _local_7) + (_local_11.y * _local_8));
                if (_local_34 > _local_20)
                {
                    return;
                };
                if (_local_34 > _local_19)
                {
                    _local_19 = _local_34;
                    _local_18 = _local_24;
                };
                _local_24++;
            };
            if (_local_19 < Number.MIN_VALUE)
            {
                _arg_1.pointCount = 1;
                _local_11 = _local_23[_local_18];
                _local_12 = _arg_3.R;
                _arg_1.normal.x = ((_local_12.col1.x * _local_11.x) + (_local_12.col2.x * _local_11.y));
                _arg_1.normal.y = ((_local_12.col1.y * _local_11.x) + (_local_12.col2.y * _local_11.y));
                _local_6 = _arg_1.points[0];
                _local_6.id.features.incidentEdge = _local_18;
                _local_6.id.features.incidentVertex = b2_nullFeature;
                _local_6.id.features.referenceEdge = 0;
                _local_6.id.features.flip = 0;
                _local_9 = (_local_13 - (_local_20 * _arg_1.normal.x));
                _local_10 = (_local_14 - (_local_20 * _arg_1.normal.y));
                _local_7 = (_local_9 - _arg_3.position.x);
                _local_8 = (_local_10 - _arg_3.position.y);
                _local_12 = _arg_3.R;
                _local_6.localPoint1.x = ((_local_7 * _local_12.col1.x) + (_local_8 * _local_12.col1.y));
                _local_6.localPoint1.y = ((_local_7 * _local_12.col2.x) + (_local_8 * _local_12.col2.y));
                _local_7 = (_local_9 - _arg_5.position.x);
                _local_8 = (_local_10 - _arg_5.position.y);
                _local_12 = _arg_5.R;
                _local_6.localPoint2.x = ((_local_7 * _local_12.col1.x) + (_local_8 * _local_12.col1.y));
                _local_6.localPoint2.y = ((_local_7 * _local_12.col2.x) + (_local_8 * _local_12.col2.y));
                _local_6.separation = (_local_19 - _local_20);
                return;
            };
            var _local_25:int = _local_18;
            var _local_26:int = (((_local_25 + 1) < _local_21) ? (_local_25 + 1) : 0);
            _local_11 = _local_22[_local_25];
            var _local_27:b2Vec2 = _local_22[_local_26];
            var _local_28:Number = (_local_27.x - _local_11.x);
            var _local_29:Number = (_local_27.y - _local_11.y);
            var _local_30:Number = Math.sqrt(((_local_28 * _local_28) + (_local_29 * _local_29)));
            _local_28 = (_local_28 / _local_30);
            _local_29 = (_local_29 / _local_30);
            _local_7 = (_local_15 - _local_11.x);
            _local_8 = (_local_16 - _local_11.y);
            var _local_31:Number = ((_local_7 * _local_28) + (_local_8 * _local_29));
            _local_6 = _arg_1.points[0];
            if (_local_31 <= 0)
            {
                _local_32 = _local_11.x;
                _local_33 = _local_11.y;
                _local_6.id.features.incidentEdge = b2_nullFeature;
                _local_6.id.features.incidentVertex = _local_25;
            }
            else
            {
                if (_local_31 >= _local_30)
                {
                    _local_32 = _local_27.x;
                    _local_33 = _local_27.y;
                    _local_6.id.features.incidentEdge = b2_nullFeature;
                    _local_6.id.features.incidentVertex = _local_26;
                }
                else
                {
                    _local_32 = ((_local_28 * _local_31) + _local_11.x);
                    _local_33 = ((_local_29 * _local_31) + _local_11.y);
                    _local_6.id.features.incidentEdge = _local_18;
                    _local_6.id.features.incidentVertex = b2_nullFeature;
                };
            };
            _local_7 = (_local_15 - _local_32);
            _local_8 = (_local_16 - _local_33);
            _local_17 = Math.sqrt(((_local_7 * _local_7) + (_local_8 * _local_8)));
            _local_7 = (_local_7 / _local_17);
            _local_8 = (_local_8 / _local_17);
            if (_local_17 > _local_20)
            {
                return;
            };
            _arg_1.pointCount = 1;
            _local_12 = _arg_3.R;
            _arg_1.normal.x = ((_local_12.col1.x * _local_7) + (_local_12.col2.x * _local_8));
            _arg_1.normal.y = ((_local_12.col1.y * _local_7) + (_local_12.col2.y * _local_8));
            _local_9 = (_local_13 - (_local_20 * _arg_1.normal.x));
            _local_10 = (_local_14 - (_local_20 * _arg_1.normal.y));
            _local_7 = (_local_9 - _arg_3.position.x);
            _local_8 = (_local_10 - _arg_3.position.y);
            _local_12 = _arg_3.R;
            _local_6.localPoint1.x = ((_local_7 * _local_12.col1.x) + (_local_8 * _local_12.col1.y));
            _local_6.localPoint1.y = ((_local_7 * _local_12.col2.x) + (_local_8 * _local_12.col2.y));
            _local_7 = (_local_9 - _arg_5.position.x);
            _local_8 = (_local_10 - _arg_5.position.y);
            _local_12 = _arg_5.R;
            _local_6.localPoint2.x = ((_local_7 * _local_12.col1.x) + (_local_8 * _local_12.col1.y));
            _local_6.localPoint2.y = ((_local_7 * _local_12.col2.x) + (_local_8 * _local_12.col2.y));
            _local_6.separation = (_local_17 - _local_20);
            _local_6.id.features.referenceEdge = 0;
            _local_6.id.features.flip = 0;
        }

        public static function b2TestOverlap(_arg_1:b2AABB, _arg_2:b2AABB):Boolean
        {
            var _local_3:b2Vec2 = _arg_2.lowerBound;
            var _local_4:b2Vec2 = _arg_1.upperBound;
            var _local_5:Number = (_local_3.x - _local_4.x);
            var _local_6:Number = (_local_3.y - _local_4.y);
            _local_3 = _arg_1.lowerBound;
            _local_4 = _arg_2.upperBound;
            var _local_7:Number = (_local_3.x - _local_4.x);
            var _local_8:Number = (_local_3.y - _local_4.y);
            if (((_local_5 > 0) || (_local_6 > 0)))
            {
                return (false);
            };
            if (((_local_7 > 0) || (_local_8 > 0)))
            {
                return (false);
            };
            return (true);
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2ContactID

package Box2D.Collision
{
    public class b2ContactID 
    {

        public var features:Features = new Features();
        public var _key:uint;

        public function b2ContactID()
        {
            this.features._m_id = this;
        }

        public function Set(_arg_1:b2ContactID):void
        {
            this.key = _arg_1._key;
        }

        public function Copy():b2ContactID
        {
            var _local_1:b2ContactID = new b2ContactID();
            _local_1.key = this.key;
            return (_local_1);
        }

        public function get key():uint
        {
            return (this._key);
        }

        public function set key(_arg_1:uint):void
        {
            this._key = _arg_1;
            this.features._referenceEdge = (this._key & 0xFF);
            this.features._incidentEdge = (((this._key & 0xFF00) >> 8) & 0xFF);
            this.features._incidentVertex = (((this._key & 0xFF0000) >> 16) & 0xFF);
            this.features._flip = (((this._key & 0xFF000000) >> 24) & 0xFF);
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2ContactPoint

package Box2D.Collision
{
    import Box2D.Collision.Shapes.b2Shape;
    import Box2D.Common.Math.b2Vec2;

    public class b2ContactPoint 
    {

        public var shape1:b2Shape;
        public var shape2:b2Shape;
        public var position:b2Vec2 = new b2Vec2();
        public var velocity:b2Vec2 = new b2Vec2();
        public var normal:b2Vec2 = new b2Vec2();
        public var separation:Number;
        public var friction:Number;
        public var restitution:Number;
        public var id:b2ContactID = new b2ContactID();


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2Distance

package Box2D.Collision
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2Math;
    import Box2D.Common.Math.b2XForm;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Common.b2Settings;
    import Box2D.Collision.Shapes.b2CircleShape;
    import Box2D.Collision.Shapes.b2PolygonShape;
    import Box2D.Collision.Shapes.b2Shape;
    import Box2D.Collision.Shapes.*;
    import Box2D.Common.Math.*;
    import Box2D.Common.*;

    public class b2Distance 
    {

        private static var s_p1s:Array = [new b2Vec2(), new b2Vec2(), new b2Vec2()];
        private static var s_p2s:Array = [new b2Vec2(), new b2Vec2(), new b2Vec2()];
        private static var s_points:Array = [new b2Vec2(), new b2Vec2(), new b2Vec2()];
        private static var gPoint:b2Point = new b2Point();
        public static var g_GJK_Iterations:int = 0;


        public static function ProcessTwo(_arg_1:b2Vec2, _arg_2:b2Vec2, _arg_3:Array, _arg_4:Array, _arg_5:Array):int
        {
            var _local_9:b2Vec2;
            var _local_10:b2Vec2;
            var _local_11:b2Vec2;
            var _local_17:Number;
            var _local_6:b2Vec2 = _arg_5[0];
            var _local_7:b2Vec2 = _arg_5[1];
            var _local_8:b2Vec2 = _arg_3[0];
            _local_9 = _arg_3[1];
            _local_10 = _arg_4[0];
            _local_11 = _arg_4[1];
            var _local_12:Number = -(_local_7.x);
            var _local_13:Number = -(_local_7.y);
            var _local_14:Number = (_local_6.x - _local_7.x);
            var _local_15:Number = (_local_6.y - _local_7.y);
            var _local_16:Number = Math.sqrt(((_local_14 * _local_14) + (_local_15 * _local_15)));
            _local_14 = (_local_14 / _local_16);
            _local_15 = (_local_15 / _local_16);
            _local_17 = ((_local_12 * _local_14) + (_local_13 * _local_15));
            if (((_local_17 <= 0) || (_local_16 < Number.MIN_VALUE)))
            {
                _arg_1.SetV(_local_9);
                _arg_2.SetV(_local_11);
                _local_8.SetV(_local_9);
                _local_10.SetV(_local_11);
                _local_6.SetV(_local_7);
                return (1);
            };
            _local_17 = (_local_17 / _local_16);
            _arg_1.x = (_local_9.x + (_local_17 * (_local_8.x - _local_9.x)));
            _arg_1.y = (_local_9.y + (_local_17 * (_local_8.y - _local_9.y)));
            _arg_2.x = (_local_11.x + (_local_17 * (_local_10.x - _local_11.x)));
            _arg_2.y = (_local_11.y + (_local_17 * (_local_10.y - _local_11.y)));
            return (2);
        }

        public static function ProcessThree(_arg_1:b2Vec2, _arg_2:b2Vec2, _arg_3:Array, _arg_4:Array, _arg_5:Array):int
        {
            var _local_6:b2Vec2;
            var _local_7:b2Vec2;
            var _local_8:b2Vec2;
            var _local_9:b2Vec2;
            var _local_10:b2Vec2;
            var _local_11:b2Vec2;
            var _local_12:b2Vec2;
            var _local_13:b2Vec2;
            var _local_35:Number;
            _local_6 = _arg_5[0];
            _local_7 = _arg_5[1];
            _local_8 = _arg_5[2];
            _local_9 = _arg_3[0];
            _local_10 = _arg_3[1];
            _local_11 = _arg_3[2];
            _local_12 = _arg_4[0];
            _local_13 = _arg_4[1];
            var _local_14:b2Vec2 = _arg_4[2];
            var _local_15:Number = _local_6.x;
            var _local_16:Number = _local_6.y;
            var _local_17:Number = _local_7.x;
            var _local_18:Number = _local_7.y;
            var _local_19:Number = _local_8.x;
            var _local_20:Number = _local_8.y;
            var _local_21:Number = (_local_17 - _local_15);
            var _local_22:Number = (_local_18 - _local_16);
            var _local_23:Number = (_local_19 - _local_15);
            var _local_24:Number = (_local_20 - _local_16);
            var _local_25:Number = (_local_19 - _local_17);
            var _local_26:Number = (_local_20 - _local_18);
            var _local_27:Number = -((_local_15 * _local_21) + (_local_16 * _local_22));
            var _local_28:Number = ((_local_17 * _local_21) + (_local_18 * _local_22));
            var _local_29:Number = -((_local_15 * _local_23) + (_local_16 * _local_24));
            var _local_30:Number = ((_local_19 * _local_23) + (_local_20 * _local_24));
            var _local_31:Number = -((_local_17 * _local_25) + (_local_18 * _local_26));
            var _local_32:Number = ((_local_19 * _local_25) + (_local_20 * _local_26));
            if (((_local_30 <= 0) && (_local_32 <= 0)))
            {
                _arg_1.SetV(_local_11);
                _arg_2.SetV(_local_14);
                _local_9.SetV(_local_11);
                _local_12.SetV(_local_14);
                _local_6.SetV(_local_8);
                return (1);
            };
            var _local_33:Number = ((_local_21 * _local_24) - (_local_22 * _local_23));
            var _local_34:Number = (_local_33 * ((_local_15 * _local_18) - (_local_16 * _local_17)));
            var _local_36:Number = (_local_33 * ((_local_17 * _local_20) - (_local_18 * _local_19)));
            if (((((_local_36 <= 0) && (_local_31 >= 0)) && (_local_32 >= 0)) && ((_local_31 + _local_32) > 0)))
            {
                _local_35 = (_local_31 / (_local_31 + _local_32));
                _arg_1.x = (_local_10.x + (_local_35 * (_local_11.x - _local_10.x)));
                _arg_1.y = (_local_10.y + (_local_35 * (_local_11.y - _local_10.y)));
                _arg_2.x = (_local_13.x + (_local_35 * (_local_14.x - _local_13.x)));
                _arg_2.y = (_local_13.y + (_local_35 * (_local_14.y - _local_13.y)));
                _local_9.SetV(_local_11);
                _local_12.SetV(_local_14);
                _local_6.SetV(_local_8);
                return (2);
            };
            var _local_37:Number = (_local_33 * ((_local_19 * _local_16) - (_local_20 * _local_15)));
            if (((((_local_37 <= 0) && (_local_29 >= 0)) && (_local_30 >= 0)) && ((_local_29 + _local_30) > 0)))
            {
                _local_35 = (_local_29 / (_local_29 + _local_30));
                _arg_1.x = (_local_9.x + (_local_35 * (_local_11.x - _local_9.x)));
                _arg_1.y = (_local_9.y + (_local_35 * (_local_11.y - _local_9.y)));
                _arg_2.x = (_local_12.x + (_local_35 * (_local_14.x - _local_12.x)));
                _arg_2.y = (_local_12.y + (_local_35 * (_local_14.y - _local_12.y)));
                _local_10.SetV(_local_11);
                _local_13.SetV(_local_14);
                _local_7.SetV(_local_8);
                return (2);
            };
            var _local_38:Number = ((_local_36 + _local_37) + _local_34);
            _local_38 = (1 / _local_38);
            var _local_39:Number = (_local_36 * _local_38);
            var _local_40:Number = (_local_37 * _local_38);
            var _local_41:Number = ((1 - _local_39) - _local_40);
            _arg_1.x = (((_local_39 * _local_9.x) + (_local_40 * _local_10.x)) + (_local_41 * _local_11.x));
            _arg_1.y = (((_local_39 * _local_9.y) + (_local_40 * _local_10.y)) + (_local_41 * _local_11.y));
            _arg_2.x = (((_local_39 * _local_12.x) + (_local_40 * _local_13.x)) + (_local_41 * _local_14.x));
            _arg_2.y = (((_local_39 * _local_12.y) + (_local_40 * _local_13.y)) + (_local_41 * _local_14.y));
            return (3);
        }

        public static function InPoints(_arg_1:b2Vec2, _arg_2:Array, _arg_3:int):Boolean
        {
            var _local_6:b2Vec2;
            var _local_7:Number;
            var _local_8:Number;
            var _local_9:Number;
            var _local_10:Number;
            var _local_4:Number = (100 * Number.MIN_VALUE);
            var _local_5:int;
            while (_local_5 < _arg_3)
            {
                _local_6 = _arg_2[_local_5];
                _local_7 = Math.abs((_arg_1.x - _local_6.x));
                _local_8 = Math.abs((_arg_1.y - _local_6.y));
                _local_9 = Math.max(Math.abs(_arg_1.x), Math.abs(_local_6.x));
                _local_10 = Math.max(Math.abs(_arg_1.y), Math.abs(_local_6.y));
                if (((_local_7 < (_local_4 * (_local_9 + 1))) && (_local_8 < (_local_4 * (_local_10 + 1)))))
                {
                    return (true);
                };
                _local_5++;
            };
            return (false);
        }

        public static function DistanceGeneric(_arg_1:b2Vec2, _arg_2:b2Vec2, _arg_3:*, _arg_4:b2XForm, _arg_5:*, _arg_6:b2XForm):Number
        {
            var _local_7:b2Vec2;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:b2Vec2;
            var _local_18:b2Vec2;
            var _local_19:Number;
            var _local_20:Number;
            var _local_21:Number;
            var _local_22:Number;
            var _local_23:int;
            var _local_8:Array = s_p1s;
            var _local_9:Array = s_p2s;
            var _local_10:Array = s_points;
            var _local_11:int;
            _arg_1.SetV(_arg_3.GetFirstVertex(_arg_4));
            _arg_2.SetV(_arg_5.GetFirstVertex(_arg_6));
            var _local_12:Number = 0;
            var _local_13:int = 20;
            var _local_14:int;
            while (_local_14 < _local_13)
            {
                _local_15 = (_arg_2.x - _arg_1.x);
                _local_16 = (_arg_2.y - _arg_1.y);
                _local_17 = _arg_3.Support(_arg_4, _local_15, _local_16);
                _local_18 = _arg_5.Support(_arg_6, -(_local_15), -(_local_16));
                _local_12 = ((_local_15 * _local_15) + (_local_16 * _local_16));
                _local_19 = (_local_18.x - _local_17.x);
                _local_20 = (_local_18.y - _local_17.y);
                _local_21 = ((_local_15 * _local_19) + (_local_16 * _local_20));
                if ((_local_12 - _local_21) <= (0.01 * _local_12))
                {
                    if (_local_11 == 0)
                    {
                        _arg_1.SetV(_local_17);
                        _arg_2.SetV(_local_18);
                    };
                    g_GJK_Iterations = _local_14;
                    return (Math.sqrt(_local_12));
                };
                switch (_local_11)
                {
                    case 0:
                        _local_7 = _local_8[0];
                        _local_7.SetV(_local_17);
                        _local_7 = _local_9[0];
                        _local_7.SetV(_local_18);
                        _local_7 = _local_10[0];
                        _local_7.x = _local_19;
                        _local_7.y = _local_20;
                        _arg_1.SetV(_local_8[0]);
                        _arg_2.SetV(_local_9[0]);
                        _local_11++;
                        break;
                    case 1:
                        _local_7 = _local_8[1];
                        _local_7.SetV(_local_17);
                        _local_7 = _local_9[1];
                        _local_7.SetV(_local_18);
                        _local_7 = _local_10[1];
                        _local_7.x = _local_19;
                        _local_7.y = _local_20;
                        _local_11 = ProcessTwo(_arg_1, _arg_2, _local_8, _local_9, _local_10);
                        break;
                    case 2:
                        _local_7 = _local_8[2];
                        _local_7.SetV(_local_17);
                        _local_7 = _local_9[2];
                        _local_7.SetV(_local_18);
                        _local_7 = _local_10[2];
                        _local_7.x = _local_19;
                        _local_7.y = _local_20;
                        _local_11 = ProcessThree(_arg_1, _arg_2, _local_8, _local_9, _local_10);
                        break;
                };
                if (_local_11 == 3)
                {
                    g_GJK_Iterations = _local_14;
                    return (0);
                };
                _local_22 = -(Number.MAX_VALUE);
                _local_23 = 0;
                while (_local_23 < _local_11)
                {
                    _local_7 = _local_10[_local_23];
                    _local_22 = b2Math.b2Max(_local_22, ((_local_7.x * _local_7.x) + (_local_7.y * _local_7.y)));
                    _local_23++;
                };
                if (((_local_11 == 3) || (_local_12 <= ((100 * Number.MIN_VALUE) * _local_22))))
                {
                    g_GJK_Iterations = _local_14;
                    _local_15 = (_arg_2.x - _arg_1.x);
                    _local_16 = (_arg_2.y - _arg_1.y);
                    _local_12 = ((_local_15 * _local_15) + (_local_16 * _local_16));
                    return (Math.sqrt(_local_12));
                };
                _local_14++;
            };
            g_GJK_Iterations = _local_13;
            return (Math.sqrt(_local_12));
        }

        public static function DistanceCC(_arg_1:b2Vec2, _arg_2:b2Vec2, _arg_3:b2CircleShape, _arg_4:b2XForm, _arg_5:b2CircleShape, _arg_6:b2XForm):Number
        {
            var _local_7:b2Mat22;
            var _local_8:b2Vec2;
            var _local_19:Number;
            var _local_20:Number;
            _local_7 = _arg_4.R;
            _local_8 = _arg_3.m_localPosition;
            var _local_9:Number = (_arg_4.position.x + ((_local_7.col1.x * _local_8.x) + (_local_7.col2.x * _local_8.y)));
            var _local_10:Number = (_arg_4.position.y + ((_local_7.col1.y * _local_8.x) + (_local_7.col2.y * _local_8.y)));
            _local_7 = _arg_6.R;
            _local_8 = _arg_5.m_localPosition;
            var _local_11:Number = (_arg_6.position.x + ((_local_7.col1.x * _local_8.x) + (_local_7.col2.x * _local_8.y)));
            var _local_12:Number = (_arg_6.position.y + ((_local_7.col1.y * _local_8.x) + (_local_7.col2.y * _local_8.y)));
            var _local_13:Number = (_local_11 - _local_9);
            var _local_14:Number = (_local_12 - _local_10);
            var _local_15:Number = ((_local_13 * _local_13) + (_local_14 * _local_14));
            var _local_16:Number = (_arg_3.m_radius - b2Settings.b2_toiSlop);
            var _local_17:Number = (_arg_5.m_radius - b2Settings.b2_toiSlop);
            var _local_18:Number = (_local_16 + _local_17);
            if (_local_15 > (_local_18 * _local_18))
            {
                _local_19 = Math.sqrt(_local_15);
                _local_13 = (_local_13 / _local_19);
                _local_14 = (_local_14 / _local_19);
                _local_20 = (_local_19 - _local_18);
                _arg_1.x = (_local_9 + (_local_16 * _local_13));
                _arg_1.y = (_local_10 + (_local_16 * _local_14));
                _arg_2.x = (_local_11 - (_local_17 * _local_13));
                _arg_2.y = (_local_12 - (_local_17 * _local_14));
                return (_local_20);
            };
            if (_local_15 > (Number.MIN_VALUE * Number.MIN_VALUE))
            {
                _local_19 = Math.sqrt(_local_15);
                _local_13 = (_local_13 / _local_19);
                _local_14 = (_local_14 / _local_19);
                _arg_1.x = (_local_9 + (_local_16 * _local_13));
                _arg_1.y = (_local_10 + (_local_16 * _local_14));
                _arg_2.x = _arg_1.x;
                _arg_2.y = _arg_1.y;
                return (0);
            };
            _arg_1.x = _local_9;
            _arg_1.y = _local_10;
            _arg_2.x = _arg_1.x;
            _arg_2.y = _arg_1.y;
            return (0);
        }

        public static function DistancePC(_arg_1:b2Vec2, _arg_2:b2Vec2, _arg_3:b2PolygonShape, _arg_4:b2XForm, _arg_5:b2CircleShape, _arg_6:b2XForm):Number
        {
            var _local_7:b2Mat22;
            var _local_8:b2Vec2;
            var _local_12:Number;
            var _local_13:Number;
            var _local_14:Number;
            var _local_9:b2Point = gPoint;
            _local_8 = _arg_5.m_localPosition;
            _local_7 = _arg_6.R;
            _local_9.p.x = (_arg_6.position.x + ((_local_7.col1.x * _local_8.x) + (_local_7.col2.x * _local_8.y)));
            _local_9.p.y = (_arg_6.position.y + ((_local_7.col1.y * _local_8.x) + (_local_7.col2.y * _local_8.y)));
            var _local_10:Number = DistanceGeneric(_arg_1, _arg_2, _arg_3, _arg_4, _local_9, b2Math.b2XForm_identity);
            var _local_11:Number = (_arg_5.m_radius - b2Settings.b2_toiSlop);
            if (_local_10 > _local_11)
            {
                _local_10 = (_local_10 - _local_11);
                _local_12 = (_arg_2.x - _arg_1.x);
                _local_13 = (_arg_2.y - _arg_1.y);
                _local_14 = Math.sqrt(((_local_12 * _local_12) + (_local_13 * _local_13)));
                _local_12 = (_local_12 / _local_14);
                _local_13 = (_local_13 / _local_14);
                _arg_2.x = (_arg_2.x - (_local_11 * _local_12));
                _arg_2.y = (_arg_2.y - (_local_11 * _local_13));
            }
            else
            {
                _local_10 = 0;
                _arg_2.x = _arg_1.x;
                _arg_2.y = _arg_1.y;
            };
            return (_local_10);
        }

        public static function Distance(_arg_1:b2Vec2, _arg_2:b2Vec2, _arg_3:b2Shape, _arg_4:b2XForm, _arg_5:b2Shape, _arg_6:b2XForm):Number
        {
            var _local_7:int = _arg_3.m_type;
            var _local_8:int = _arg_5.m_type;
            if (((_local_7 == b2Shape.e_circleShape) && (_local_8 == b2Shape.e_circleShape)))
            {
                return (DistanceCC(_arg_1, _arg_2, (_arg_3 as b2CircleShape), _arg_4, (_arg_5 as b2CircleShape), _arg_6));
            };
            if (((_local_7 == b2Shape.e_polygonShape) && (_local_8 == b2Shape.e_circleShape)))
            {
                return (DistancePC(_arg_1, _arg_2, (_arg_3 as b2PolygonShape), _arg_4, (_arg_5 as b2CircleShape), _arg_6));
            };
            if (((_local_7 == b2Shape.e_circleShape) && (_local_8 == b2Shape.e_polygonShape)))
            {
                return (DistancePC(_arg_2, _arg_1, (_arg_5 as b2PolygonShape), _arg_6, (_arg_3 as b2CircleShape), _arg_4));
            };
            if (((_local_7 == b2Shape.e_polygonShape) && (_local_8 == b2Shape.e_polygonShape)))
            {
                return (DistanceGeneric(_arg_1, _arg_2, (_arg_3 as b2PolygonShape), _arg_4, (_arg_5 as b2PolygonShape), _arg_6));
            };
            return (0);
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2Manifold

package Box2D.Collision
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.b2Settings;
    import Box2D.Common.Math.*;
    import Box2D.Common.*;

    public class b2Manifold 
    {

        public var points:Array;
        public var normal:b2Vec2;
        public var pointCount:int = 0;

        public function b2Manifold()
        {
            this.points = new Array(b2Settings.b2_maxManifoldPoints);
            var _local_1:int;
            while (_local_1 < b2Settings.b2_maxManifoldPoints)
            {
                this.points[_local_1] = new b2ManifoldPoint();
                _local_1++;
            };
            this.normal = new b2Vec2();
        }

        public function Reset():void
        {
            var _local_1:int;
            while (_local_1 < b2Settings.b2_maxManifoldPoints)
            {
                (this.points[_local_1] as b2ManifoldPoint).Reset();
                _local_1++;
            };
            this.normal.SetZero();
            this.pointCount = 0;
        }

        public function Set(_arg_1:b2Manifold):void
        {
            this.pointCount = _arg_1.pointCount;
            var _local_2:int;
            while (_local_2 < b2Settings.b2_maxManifoldPoints)
            {
                (this.points[_local_2] as b2ManifoldPoint).Set(_arg_1.points[_local_2]);
                _local_2++;
            };
            this.normal.SetV(_arg_1.normal);
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2ManifoldPoint

package Box2D.Collision
{
    import Box2D.Common.Math.b2Vec2;

    public class b2ManifoldPoint 
    {

        public var localPoint1:b2Vec2 = new b2Vec2();
        public var localPoint2:b2Vec2 = new b2Vec2();
        public var separation:Number;
        public var normalImpulse:Number;
        public var tangentImpulse:Number;
        public var id:b2ContactID = new b2ContactID();


        public function Reset():void
        {
            this.localPoint1.SetZero();
            this.localPoint2.SetZero();
            this.separation = 0;
            this.normalImpulse = 0;
            this.tangentImpulse = 0;
            this.id.key = 0;
        }

        public function Set(_arg_1:b2ManifoldPoint):void
        {
            this.localPoint1.SetV(_arg_1.localPoint1);
            this.localPoint2.SetV(_arg_1.localPoint2);
            this.separation = _arg_1.separation;
            this.normalImpulse = _arg_1.normalImpulse;
            this.tangentImpulse = _arg_1.tangentImpulse;
            this.id.key = _arg_1.id.key;
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2OBB

package Box2D.Collision
{
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Common.Math.b2Vec2;

    public class b2OBB 
    {

        public var R:b2Mat22 = new b2Mat22();
        public var center:b2Vec2 = new b2Vec2();
        public var extents:b2Vec2 = new b2Vec2();


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2Pair

package Box2D.Collision
{
    import Box2D.Common.b2Settings;

    public class b2Pair 
    {

        public static var b2_nullPair:uint = b2Settings.USHRT_MAX;
        public static var b2_nullProxy:uint = b2Settings.USHRT_MAX;
        public static var b2_tableCapacity:int = b2Settings.b2_maxPairs;
        public static var b2_tableMask:int = (b2_tableCapacity - 1);
        public static var e_pairBuffered:uint = 1;
        public static var e_pairRemoved:uint = 2;
        public static var e_pairFinal:uint = 4;

        public var userData:* = null;
        public var proxyId1:uint;
        public var proxyId2:uint;
        public var next:uint;
        public var status:uint;


        public function SetBuffered():void
        {
            this.status = (this.status | e_pairBuffered);
        }

        public function ClearBuffered():void
        {
            this.status = (this.status & (~(e_pairBuffered)));
        }

        public function IsBuffered():Boolean
        {
            return ((this.status & e_pairBuffered) == e_pairBuffered);
        }

        public function SetRemoved():void
        {
            this.status = (this.status | e_pairRemoved);
        }

        public function ClearRemoved():void
        {
            this.status = (this.status & (~(e_pairRemoved)));
        }

        public function IsRemoved():Boolean
        {
            return ((this.status & e_pairRemoved) == e_pairRemoved);
        }

        public function SetFinal():void
        {
            this.status = (this.status | e_pairFinal);
        }

        public function IsFinal():Boolean
        {
            return ((this.status & e_pairFinal) == e_pairFinal);
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2PairCallback

package Box2D.Collision
{
    public class b2PairCallback 
    {


        public function PairAdded(_arg_1:*, _arg_2:*):*
        {
            return (null);
        }

        public function PairRemoved(_arg_1:*, _arg_2:*, _arg_3:*):void
        {
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2PairManager

package Box2D.Collision
{
    import Box2D.Common.b2Settings;
    import Box2D.Common.Math.*;
    import Box2D.Common.*;

    public class b2PairManager 
    {

        public var m_broadPhase:b2BroadPhase;
        public var m_callback:b2PairCallback;
        public var m_pairs:Array;
        public var m_freePair:uint;
        public var m_pairCount:int;
        public var m_pairBuffer:Array;
        public var m_pairBufferCount:int;
        public var m_hashTable:Array;

        public function b2PairManager()
        {
            var _local_1:uint;
            super();
            this.m_hashTable = new Array(b2Pair.b2_tableCapacity);
            _local_1 = 0;
            while (_local_1 < b2Pair.b2_tableCapacity)
            {
                this.m_hashTable[_local_1] = b2Pair.b2_nullPair;
                _local_1++;
            };
            this.m_pairs = new Array(b2Settings.b2_maxPairs);
            _local_1 = 0;
            while (_local_1 < b2Settings.b2_maxPairs)
            {
                this.m_pairs[_local_1] = new b2Pair();
                _local_1++;
            };
            this.m_pairBuffer = new Array(b2Settings.b2_maxPairs);
            _local_1 = 0;
            while (_local_1 < b2Settings.b2_maxPairs)
            {
                this.m_pairBuffer[_local_1] = new b2BufferedPair();
                _local_1++;
            };
            _local_1 = 0;
            while (_local_1 < b2Settings.b2_maxPairs)
            {
                this.m_pairs[_local_1].proxyId1 = b2Pair.b2_nullProxy;
                this.m_pairs[_local_1].proxyId2 = b2Pair.b2_nullProxy;
                this.m_pairs[_local_1].userData = null;
                this.m_pairs[_local_1].status = 0;
                this.m_pairs[_local_1].next = (_local_1 + 1);
                _local_1++;
            };
            this.m_pairs[int((b2Settings.b2_maxPairs - 1))].next = b2Pair.b2_nullPair;
            this.m_pairCount = 0;
            this.m_pairBufferCount = 0;
        }

        public static function Hash(_arg_1:uint, _arg_2:uint):uint
        {
            var _local_3:uint = (((_arg_2 << 16) & 0xFFFF0000) | _arg_1);
            _local_3 = ((~(_local_3)) + ((_local_3 << 15) & 0xFFFF8000));
            _local_3 = (_local_3 ^ ((_local_3 >> 12) & 0x0FFFFF));
            _local_3 = (_local_3 + ((_local_3 << 2) & 0xFFFFFFFC));
            _local_3 = (_local_3 ^ ((_local_3 >> 4) & 0x0FFFFFFF));
            _local_3 = (_local_3 * 2057);
            return (_local_3 ^ ((_local_3 >> 16) & 0xFFFF));
        }

        public static function Equals(_arg_1:b2Pair, _arg_2:uint, _arg_3:uint):Boolean
        {
            return ((_arg_1.proxyId1 == _arg_2) && (_arg_1.proxyId2 == _arg_3));
        }

        public static function EqualsPair(_arg_1:b2BufferedPair, _arg_2:b2BufferedPair):Boolean
        {
            return ((_arg_1.proxyId1 == _arg_2.proxyId1) && (_arg_1.proxyId2 == _arg_2.proxyId2));
        }


        public function Initialize(_arg_1:b2BroadPhase, _arg_2:b2PairCallback):void
        {
            this.m_broadPhase = _arg_1;
            this.m_callback = _arg_2;
        }

        public function AddBufferedPair(_arg_1:int, _arg_2:int):void
        {
            var _local_3:b2BufferedPair;
            var _local_4:b2Pair = this.AddPair(_arg_1, _arg_2);
            if (_local_4.IsBuffered() == false)
            {
                _local_4.SetBuffered();
                _local_3 = this.m_pairBuffer[this.m_pairBufferCount];
                _local_3.proxyId1 = _local_4.proxyId1;
                _local_3.proxyId2 = _local_4.proxyId2;
                this.m_pairBufferCount++;
            };
            _local_4.ClearRemoved();
            if (b2BroadPhase.s_validate)
            {
                this.ValidateBuffer();
            };
        }

        public function RemoveBufferedPair(_arg_1:int, _arg_2:int):void
        {
            var _local_3:b2BufferedPair;
            var _local_4:b2Pair = this.Find(_arg_1, _arg_2);
            if (_local_4 == null)
            {
                return;
            };
            if (_local_4.IsBuffered() == false)
            {
                _local_4.SetBuffered();
                _local_3 = this.m_pairBuffer[this.m_pairBufferCount];
                _local_3.proxyId1 = _local_4.proxyId1;
                _local_3.proxyId2 = _local_4.proxyId2;
                this.m_pairBufferCount++;
            };
            _local_4.SetRemoved();
            if (b2BroadPhase.s_validate)
            {
                this.ValidateBuffer();
            };
        }

        public function Commit():void
        {
            var _local_1:b2BufferedPair;
            var _local_2:int;
            var _local_5:b2Pair;
            var _local_6:b2Proxy;
            var _local_7:b2Proxy;
            var _local_3:int;
            var _local_4:Array = this.m_broadPhase.m_proxyPool;
            _local_2 = 0;
            while (_local_2 < this.m_pairBufferCount)
            {
                _local_1 = this.m_pairBuffer[_local_2];
                _local_5 = this.Find(_local_1.proxyId1, _local_1.proxyId2);
                _local_5.ClearBuffered();
                _local_6 = _local_4[_local_5.proxyId1];
                _local_7 = _local_4[_local_5.proxyId2];
                if (_local_5.IsRemoved())
                {
                    if (_local_5.IsFinal() == true)
                    {
                        this.m_callback.PairRemoved(_local_6.userData, _local_7.userData, _local_5.userData);
                    };
                    _local_1 = this.m_pairBuffer[_local_3];
                    _local_1.proxyId1 = _local_5.proxyId1;
                    _local_1.proxyId2 = _local_5.proxyId2;
                    _local_3++;
                }
                else
                {
                    if (_local_5.IsFinal() == false)
                    {
                        _local_5.userData = this.m_callback.PairAdded(_local_6.userData, _local_7.userData);
                        _local_5.SetFinal();
                    };
                };
                _local_2++;
            };
            _local_2 = 0;
            while (_local_2 < _local_3)
            {
                _local_1 = this.m_pairBuffer[_local_2];
                this.RemovePair(_local_1.proxyId1, _local_1.proxyId2);
                _local_2++;
            };
            this.m_pairBufferCount = 0;
            if (b2BroadPhase.s_validate)
            {
                this.ValidateTable();
            };
        }

        private function AddPair(_arg_1:uint, _arg_2:uint):b2Pair
        {
            var _local_6:uint;
            if (_arg_1 > _arg_2)
            {
                _local_6 = _arg_1;
                _arg_1 = _arg_2;
                _arg_2 = _local_6;
            };
            var _local_3:uint = (Hash(_arg_1, _arg_2) & b2Pair.b2_tableMask);
            var _local_4:b2Pair = (_local_4 = this.FindHash(_arg_1, _arg_2, _local_3));
            if (_local_4 != null)
            {
                return (_local_4);
            };
            var _local_5:uint = this.m_freePair;
            _local_4 = this.m_pairs[_local_5];
            this.m_freePair = _local_4.next;
            _local_4.proxyId1 = _arg_1;
            _local_4.proxyId2 = _arg_2;
            _local_4.status = 0;
            _local_4.userData = null;
            _local_4.next = this.m_hashTable[_local_3];
            this.m_hashTable[_local_3] = _local_5;
            this.m_pairCount++;
            return (_local_4);
        }

        private function RemovePair(_arg_1:uint, _arg_2:uint):*
        {
            var _local_3:b2Pair;
            var _local_7:uint;
            var _local_8:uint;
            var _local_9:*;
            if (_arg_1 > _arg_2)
            {
                _local_7 = _arg_1;
                _arg_1 = _arg_2;
                _arg_2 = _local_7;
            };
            var _local_4:uint = (Hash(_arg_1, _arg_2) & b2Pair.b2_tableMask);
            var _local_5:uint = this.m_hashTable[_local_4];
            var _local_6:b2Pair;
            while (_local_5 != b2Pair.b2_nullPair)
            {
                if (Equals(this.m_pairs[_local_5], _arg_1, _arg_2))
                {
                    _local_8 = _local_5;
                    _local_3 = this.m_pairs[_local_5];
                    if (_local_6)
                    {
                        _local_6.next = _local_3.next;
                    }
                    else
                    {
                        this.m_hashTable[_local_4] = _local_3.next;
                    };
                    _local_3 = this.m_pairs[_local_8];
                    _local_9 = _local_3.userData;
                    _local_3.next = this.m_freePair;
                    _local_3.proxyId1 = b2Pair.b2_nullProxy;
                    _local_3.proxyId2 = b2Pair.b2_nullProxy;
                    _local_3.userData = null;
                    _local_3.status = 0;
                    this.m_freePair = _local_8;
                    this.m_pairCount--;
                    return (_local_9);
                };
                _local_6 = this.m_pairs[_local_5];
                _local_5 = _local_6.next;
            };
            return (null);
        }

        private function Find(_arg_1:uint, _arg_2:uint):b2Pair
        {
            var _local_4:uint;
            if (_arg_1 > _arg_2)
            {
                _local_4 = _arg_1;
                _arg_1 = _arg_2;
                _arg_2 = _local_4;
            };
            var _local_3:uint = (Hash(_arg_1, _arg_2) & b2Pair.b2_tableMask);
            return (this.FindHash(_arg_1, _arg_2, _local_3));
        }

        private function FindHash(_arg_1:uint, _arg_2:uint, _arg_3:uint):b2Pair
        {
            var _local_4:b2Pair;
            var _local_5:uint = this.m_hashTable[_arg_3];
            _local_4 = this.m_pairs[_local_5];
            while (((!(_local_5 == b2Pair.b2_nullPair)) && (Equals(_local_4, _arg_1, _arg_2) == false)))
            {
                _local_5 = _local_4.next;
                _local_4 = this.m_pairs[_local_5];
            };
            if (_local_5 == b2Pair.b2_nullPair)
            {
                return (null);
            };
            return (_local_4);
        }

        private function ValidateBuffer():void
        {
        }

        private function ValidateTable():void
        {
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2Point

package Box2D.Collision
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2XForm;

    public class b2Point 
    {

        public var p:b2Vec2 = new b2Vec2();


        public function Support(_arg_1:b2XForm, _arg_2:Number, _arg_3:Number):b2Vec2
        {
            return (this.p);
        }

        public function GetFirstVertex(_arg_1:b2XForm):b2Vec2
        {
            return (this.p);
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2Proxy

package Box2D.Collision
{
    public class b2Proxy 
    {

        public var lowerBounds:Array = [uint(0), uint(0)];
        public var upperBounds:Array = [uint(0), uint(0)];
        public var overlapCount:uint;
        public var timeStamp:uint;
        public var userData:* = null;


        public function GetNext():uint
        {
            return (this.lowerBounds[0]);
        }

        public function SetNext(_arg_1:uint):void
        {
            this.lowerBounds[0] = (_arg_1 & 0xFFFF);
        }

        public function IsValid():Boolean
        {
            return (!(this.overlapCount == b2BroadPhase.b2_invalid));
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2Segment

package Box2D.Collision
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.*;
    import Box2D.Common.*;

    public class b2Segment 
    {

        public var p1:b2Vec2 = new b2Vec2();
        public var p2:b2Vec2 = new b2Vec2();


        public function TestSegment(_arg_1:Array, _arg_2:b2Vec2, _arg_3:b2Segment, _arg_4:Number):Boolean
        {
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:Number;
            var _local_18:Number;
            var _local_5:b2Vec2 = _arg_3.p1;
            var _local_6:Number = (_arg_3.p2.x - _local_5.x);
            var _local_7:Number = (_arg_3.p2.y - _local_5.y);
            var _local_8:Number = (this.p2.x - this.p1.x);
            var _local_9:Number = (this.p2.y - this.p1.y);
            var _local_10:Number = _local_9;
            var _local_11:Number = -(_local_8);
            var _local_12:Number = (100 * Number.MIN_VALUE);
            var _local_13:Number = -((_local_6 * _local_10) + (_local_7 * _local_11));
            if (_local_13 > _local_12)
            {
                _local_14 = (_local_5.x - this.p1.x);
                _local_15 = (_local_5.y - this.p1.y);
                _local_16 = ((_local_14 * _local_10) + (_local_15 * _local_11));
                if (((0 <= _local_16) && (_local_16 <= (_arg_4 * _local_13))))
                {
                    _local_17 = ((-(_local_6) * _local_15) + (_local_7 * _local_14));
                    if ((((-(_local_12) * _local_13) <= _local_17) && (_local_17 <= (_local_13 * (1 + _local_12)))))
                    {
                        _local_16 = (_local_16 / _local_13);
                        _local_18 = Math.sqrt(((_local_10 * _local_10) + (_local_11 * _local_11)));
                        _local_10 = (_local_10 / _local_18);
                        _local_11 = (_local_11 / _local_18);
                        _arg_1[0] = _local_16;
                        _arg_2.Set(_local_10, _local_11);
                        return (true);
                    };
                };
            };
            return (false);
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.b2TimeOfImpact

package Box2D.Collision
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2XForm;
    import Box2D.Common.b2Settings;
    import Box2D.Collision.Shapes.b2Shape;
    import Box2D.Common.Math.b2Sweep;

    public class b2TimeOfImpact 
    {

        public static var s_p1:b2Vec2 = new b2Vec2();
        public static var s_p2:b2Vec2 = new b2Vec2();
        public static var s_xf1:b2XForm = new b2XForm();
        public static var s_xf2:b2XForm = new b2XForm();


        public static function TimeOfImpact(_arg_1:b2Shape, _arg_2:b2Sweep, _arg_3:b2Shape, _arg_4:b2Sweep):Number
        {
            var _local_5:Number;
            var _local_6:Number;
            var _local_25:Number;
            var _local_26:b2XForm;
            var _local_27:b2XForm;
            var _local_28:Number;
            var _local_29:Number;
            var _local_30:Number;
            var _local_31:Number;
            var _local_7:Number = _arg_1.m_sweepRadius;
            var _local_8:Number = _arg_3.m_sweepRadius;
            var _local_9:Number = _arg_2.t0;
            var _local_10:Number = (_arg_2.c.x - _arg_2.c0.x);
            var _local_11:Number = (_arg_2.c.y - _arg_2.c0.y);
            var _local_12:Number = (_arg_4.c.x - _arg_4.c0.x);
            var _local_13:Number = (_arg_4.c.y - _arg_4.c0.y);
            var _local_14:Number = (_arg_2.a - _arg_2.a0);
            var _local_15:Number = (_arg_4.a - _arg_4.a0);
            var _local_16:Number = 0;
            var _local_17:b2Vec2 = s_p1;
            var _local_18:b2Vec2 = s_p2;
            var _local_19:int = 20;
            var _local_20:int;
            var _local_21:Number = 0;
            var _local_22:Number = 0;
            var _local_23:Number = 0;
            var _local_24:Number = 0;
            while (true)
            {
                _local_25 = (((1 - _local_16) * _local_9) + _local_16);
                _local_26 = s_xf1;
                _local_27 = s_xf2;
                _arg_2.GetXForm(_local_26, _local_25);
                _arg_4.GetXForm(_local_27, _local_25);
                _local_23 = b2Distance.Distance(_local_17, _local_18, _arg_1, _local_26, _arg_3, _local_27);
                if (_local_20 == 0)
                {
                    if (_local_23 > (2 * b2Settings.b2_toiSlop))
                    {
                        _local_24 = (1.5 * b2Settings.b2_toiSlop);
                    }
                    else
                    {
                        _local_5 = (0.05 * b2Settings.b2_toiSlop);
                        _local_6 = (_local_23 - (0.5 * b2Settings.b2_toiSlop));
                        _local_24 = ((_local_5 > _local_6) ? _local_5 : _local_6);
                    };
                };
                if ((((_local_23 - _local_24) < (0.05 * b2Settings.b2_toiSlop)) || (_local_20 == _local_19))) break;
                _local_21 = (_local_18.x - _local_17.x);
                _local_22 = (_local_18.y - _local_17.y);
                _local_28 = Math.sqrt(((_local_21 * _local_21) + (_local_22 * _local_22)));
                _local_21 = (_local_21 / _local_28);
                _local_22 = (_local_22 / _local_28);
                _local_29 = ((((_local_21 * (_local_10 - _local_12)) + (_local_22 * (_local_11 - _local_13))) + (((_local_14 < 0) ? -(_local_14) : _local_14) * _local_7)) + (((_local_15 < 0) ? -(_local_15) : _local_15) * _local_8));
                if (_local_29 == 0)
                {
                    _local_16 = 1;
                    break;
                };
                _local_30 = ((_local_23 - _local_24) / _local_29);
                _local_31 = (_local_16 + _local_30);
                if (((_local_31 < 0) || (1 < _local_31)))
                {
                    _local_16 = 1;
                    break;
                };
                if (_local_31 < ((1 + (100 * Number.MIN_VALUE)) * _local_16)) break;
                _local_16 = _local_31;
                _local_20++;
            };
            return (_local_16);
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.ClipVertex

package Box2D.Collision
{
    import Box2D.Common.Math.b2Vec2;

    public class ClipVertex 
    {

        public var v:b2Vec2 = new b2Vec2();
        public var id:b2ContactID = new b2ContactID();


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Collision.Features

package Box2D.Collision
{
    public class Features 
    {

        public var _referenceEdge:int;
        public var _incidentEdge:int;
        public var _incidentVertex:int;
        public var _flip:int;
        public var _m_id:b2ContactID;


        public function set referenceEdge(_arg_1:int):void
        {
            this._referenceEdge = _arg_1;
            this._m_id._key = ((this._m_id._key & 0xFFFFFF00) | (this._referenceEdge & 0xFF));
        }

        public function get referenceEdge():int
        {
            return (this._referenceEdge);
        }

        public function set incidentEdge(_arg_1:int):void
        {
            this._incidentEdge = _arg_1;
            this._m_id._key = ((this._m_id._key & 0xFFFF00FF) | ((this._incidentEdge << 8) & 0xFF00));
        }

        public function get incidentEdge():int
        {
            return (this._incidentEdge);
        }

        public function set incidentVertex(_arg_1:int):void
        {
            this._incidentVertex = _arg_1;
            this._m_id._key = ((this._m_id._key & 0xFF00FFFF) | ((this._incidentVertex << 16) & 0xFF0000));
        }

        public function get incidentVertex():int
        {
            return (this._incidentVertex);
        }

        public function set flip(_arg_1:int):void
        {
            this._flip = _arg_1;
            this._m_id._key = ((this._m_id._key & 0xFFFFFF) | ((this._flip << 24) & 0xFF000000));
        }

        public function get flip():int
        {
            return (this._flip);
        }


    }
}//package Box2D.Collision

//------------------------------------------------------------
//Box2D.Common.Math.b2Mat22

package Box2D.Common.Math
{
    public class b2Mat22 
    {

        public var col1:b2Vec2 = new b2Vec2();
        public var col2:b2Vec2 = new b2Vec2();

        public function b2Mat22(_arg_1:Number=0, _arg_2:b2Vec2=null, _arg_3:b2Vec2=null)
        {
            var _local_4:Number;
            var _local_5:Number;
            super();
            if (((!(_arg_2 == null)) && (!(_arg_3 == null))))
            {
                this.col1.SetV(_arg_2);
                this.col2.SetV(_arg_3);
            }
            else
            {
                _local_4 = Math.cos(_arg_1);
                _local_5 = Math.sin(_arg_1);
                this.col1.x = _local_4;
                this.col2.x = -(_local_5);
                this.col1.y = _local_5;
                this.col2.y = _local_4;
            };
        }

        public function Set(_arg_1:Number):void
        {
            var _local_2:Number;
            _local_2 = Math.cos(_arg_1);
            var _local_3:Number = Math.sin(_arg_1);
            this.col1.x = _local_2;
            this.col2.x = -(_local_3);
            this.col1.y = _local_3;
            this.col2.y = _local_2;
        }

        public function SetVV(_arg_1:b2Vec2, _arg_2:b2Vec2):void
        {
            this.col1.SetV(_arg_1);
            this.col2.SetV(_arg_2);
        }

        public function Copy():b2Mat22
        {
            return (new b2Mat22(0, this.col1, this.col2));
        }

        public function SetM(_arg_1:b2Mat22):void
        {
            this.col1.SetV(_arg_1.col1);
            this.col2.SetV(_arg_1.col2);
        }

        public function AddM(_arg_1:b2Mat22):void
        {
            this.col1.x = (this.col1.x + _arg_1.col1.x);
            this.col1.y = (this.col1.y + _arg_1.col1.y);
            this.col2.x = (this.col2.x + _arg_1.col2.x);
            this.col2.y = (this.col2.y + _arg_1.col2.y);
        }

        public function SetIdentity():void
        {
            this.col1.x = 1;
            this.col2.x = 0;
            this.col1.y = 0;
            this.col2.y = 1;
        }

        public function SetZero():void
        {
            this.col1.x = 0;
            this.col2.x = 0;
            this.col1.y = 0;
            this.col2.y = 0;
        }

        public function GetAngle():Number
        {
            return (Math.atan2(this.col1.y, this.col1.x));
        }

        public function Invert(_arg_1:b2Mat22):b2Mat22
        {
            var _local_2:Number;
            var _local_4:Number;
            var _local_6:Number;
            _local_2 = this.col1.x;
            var _local_3:Number = this.col2.x;
            _local_4 = this.col1.y;
            var _local_5:Number = this.col2.y;
            _local_6 = ((_local_2 * _local_5) - (_local_3 * _local_4));
            _local_6 = (1 / _local_6);
            _arg_1.col1.x = (_local_6 * _local_5);
            _arg_1.col2.x = (-(_local_6) * _local_3);
            _arg_1.col1.y = (-(_local_6) * _local_4);
            _arg_1.col2.y = (_local_6 * _local_2);
            return (_arg_1);
        }

        public function Solve(_arg_1:b2Vec2, _arg_2:Number, _arg_3:Number):b2Vec2
        {
            var _local_4:Number = this.col1.x;
            var _local_5:Number = this.col2.x;
            var _local_6:Number = this.col1.y;
            var _local_7:Number = this.col2.y;
            var _local_8:Number = ((_local_4 * _local_7) - (_local_5 * _local_6));
            _local_8 = (1 / _local_8);
            _arg_1.x = (_local_8 * ((_local_7 * _arg_2) - (_local_5 * _arg_3)));
            _arg_1.y = (_local_8 * ((_local_4 * _arg_3) - (_local_6 * _arg_2)));
            return (_arg_1);
        }

        public function Abs():void
        {
            this.col1.Abs();
            this.col2.Abs();
        }


    }
}//package Box2D.Common.Math

//------------------------------------------------------------
//Box2D.Common.Math.b2Math

package Box2D.Common.Math
{
    public class b2Math 
    {

        public static const b2Vec2_zero:b2Vec2 = new b2Vec2(0, 0);
        public static const b2Mat22_identity:b2Mat22 = new b2Mat22(0, new b2Vec2(1, 0), new b2Vec2(0, 1));
        public static const b2XForm_identity:b2XForm = new b2XForm(b2Vec2_zero, b2Mat22_identity);


        public static function b2IsValid(_arg_1:Number):Boolean
        {
            return (isFinite(_arg_1));
        }

        public static function b2Dot(_arg_1:b2Vec2, _arg_2:b2Vec2):Number
        {
            return ((_arg_1.x * _arg_2.x) + (_arg_1.y * _arg_2.y));
        }

        public static function b2CrossVV(_arg_1:b2Vec2, _arg_2:b2Vec2):Number
        {
            return ((_arg_1.x * _arg_2.y) - (_arg_1.y * _arg_2.x));
        }

        public static function b2CrossVF(_arg_1:b2Vec2, _arg_2:Number):b2Vec2
        {
            return (new b2Vec2((_arg_2 * _arg_1.y), (-(_arg_2) * _arg_1.x)));
        }

        public static function b2CrossFV(_arg_1:Number, _arg_2:b2Vec2):b2Vec2
        {
            return (new b2Vec2((-(_arg_1) * _arg_2.y), (_arg_1 * _arg_2.x)));
        }

        public static function b2MulMV(_arg_1:b2Mat22, _arg_2:b2Vec2):b2Vec2
        {
            return (new b2Vec2(((_arg_1.col1.x * _arg_2.x) + (_arg_1.col2.x * _arg_2.y)), ((_arg_1.col1.y * _arg_2.x) + (_arg_1.col2.y * _arg_2.y))));
        }

        public static function b2MulTMV(_arg_1:b2Mat22, _arg_2:b2Vec2):b2Vec2
        {
            return (new b2Vec2(b2Dot(_arg_2, _arg_1.col1), b2Dot(_arg_2, _arg_1.col2)));
        }

        public static function b2MulX(_arg_1:b2XForm, _arg_2:b2Vec2):b2Vec2
        {
            var _local_3:b2Vec2;
            _local_3 = b2MulMV(_arg_1.R, _arg_2);
            _local_3.x = (_local_3.x + _arg_1.position.x);
            _local_3.y = (_local_3.y + _arg_1.position.y);
            return (_local_3);
        }

        public static function b2MulXT(_arg_1:b2XForm, _arg_2:b2Vec2):b2Vec2
        {
            var _local_3:b2Vec2;
            var _local_4:Number;
            _local_3 = SubtractVV(_arg_2, _arg_1.position);
            _local_4 = ((_local_3.x * _arg_1.R.col1.x) + (_local_3.y * _arg_1.R.col1.y));
            _local_3.y = ((_local_3.x * _arg_1.R.col2.x) + (_local_3.y * _arg_1.R.col2.y));
            _local_3.x = _local_4;
            return (_local_3);
        }

        public static function AddVV(_arg_1:b2Vec2, _arg_2:b2Vec2):b2Vec2
        {
            return (new b2Vec2((_arg_1.x + _arg_2.x), (_arg_1.y + _arg_2.y)));
        }

        public static function SubtractVV(_arg_1:b2Vec2, _arg_2:b2Vec2):b2Vec2
        {
            return (new b2Vec2((_arg_1.x - _arg_2.x), (_arg_1.y - _arg_2.y)));
        }

        public static function b2Distance(_arg_1:b2Vec2, _arg_2:b2Vec2):Number
        {
            var _local_3:Number = (_arg_1.x - _arg_2.x);
            var _local_4:Number = (_arg_1.y - _arg_2.y);
            return (Math.sqrt(((_local_3 * _local_3) + (_local_4 * _local_4))));
        }

        public static function b2DistanceSquared(_arg_1:b2Vec2, _arg_2:b2Vec2):Number
        {
            var _local_3:Number = (_arg_1.x - _arg_2.x);
            var _local_4:Number = (_arg_1.y - _arg_2.y);
            return ((_local_3 * _local_3) + (_local_4 * _local_4));
        }

        public static function MulFV(_arg_1:Number, _arg_2:b2Vec2):b2Vec2
        {
            return (new b2Vec2((_arg_1 * _arg_2.x), (_arg_1 * _arg_2.y)));
        }

        public static function AddMM(_arg_1:b2Mat22, _arg_2:b2Mat22):b2Mat22
        {
            return (new b2Mat22(0, AddVV(_arg_1.col1, _arg_2.col1), AddVV(_arg_1.col2, _arg_2.col2)));
        }

        public static function b2MulMM(_arg_1:b2Mat22, _arg_2:b2Mat22):b2Mat22
        {
            return (new b2Mat22(0, b2MulMV(_arg_1, _arg_2.col1), b2MulMV(_arg_1, _arg_2.col2)));
        }

        public static function b2MulTMM(_arg_1:b2Mat22, _arg_2:b2Mat22):b2Mat22
        {
            var _local_3:b2Vec2 = new b2Vec2(b2Dot(_arg_1.col1, _arg_2.col1), b2Dot(_arg_1.col2, _arg_2.col1));
            var _local_4:b2Vec2 = new b2Vec2(b2Dot(_arg_1.col1, _arg_2.col2), b2Dot(_arg_1.col2, _arg_2.col2));
            var _local_5:b2Mat22 = new b2Mat22(0, _local_3, _local_4);
            return (_local_5);
        }

        public static function b2Abs(_arg_1:Number):Number
        {
            return ((_arg_1 > 0) ? _arg_1 : -(_arg_1));
        }

        public static function b2AbsV(_arg_1:b2Vec2):b2Vec2
        {
            return (new b2Vec2(b2Abs(_arg_1.x), b2Abs(_arg_1.y)));
        }

        public static function b2AbsM(_arg_1:b2Mat22):b2Mat22
        {
            return (new b2Mat22(0, b2AbsV(_arg_1.col1), b2AbsV(_arg_1.col2)));
        }

        public static function b2Min(_arg_1:Number, _arg_2:Number):Number
        {
            return ((_arg_1 < _arg_2) ? _arg_1 : _arg_2);
        }

        public static function b2MinV(_arg_1:b2Vec2, _arg_2:b2Vec2):b2Vec2
        {
            return (new b2Vec2(b2Min(_arg_1.x, _arg_2.x), b2Min(_arg_1.y, _arg_2.y)));
        }

        public static function b2Max(_arg_1:Number, _arg_2:Number):Number
        {
            return ((_arg_1 > _arg_2) ? _arg_1 : _arg_2);
        }

        public static function b2MaxV(_arg_1:b2Vec2, _arg_2:b2Vec2):b2Vec2
        {
            return (new b2Vec2(b2Max(_arg_1.x, _arg_2.x), b2Max(_arg_1.y, _arg_2.y)));
        }

        public static function b2Clamp(_arg_1:Number, _arg_2:Number, _arg_3:Number):Number
        {
            return (b2Max(_arg_2, b2Min(_arg_1, _arg_3)));
        }

        public static function b2ClampV(_arg_1:b2Vec2, _arg_2:b2Vec2, _arg_3:b2Vec2):b2Vec2
        {
            return (b2MaxV(_arg_2, b2MinV(_arg_1, _arg_3)));
        }

        public static function b2Swap(_arg_1:Array, _arg_2:Array):void
        {
            var _local_3:* = _arg_1[0];
            _arg_1[0] = _arg_2[0];
            _arg_2[0] = _local_3;
        }

        public static function b2Random():Number
        {
            return ((Math.random() * 2) - 1);
        }

        public static function b2RandomRange(_arg_1:Number, _arg_2:Number):Number
        {
            var _local_3:Number = Math.random();
            return (((_arg_2 - _arg_1) * _local_3) + _arg_1);
        }

        public static function b2NextPowerOfTwo(_arg_1:uint):uint
        {
            _arg_1 = (_arg_1 | ((_arg_1 >> 1) & 0x7FFFFFFF));
            _arg_1 = (_arg_1 | ((_arg_1 >> 2) & 0x3FFFFFFF));
            _arg_1 = (_arg_1 | ((_arg_1 >> 4) & 0x0FFFFFFF));
            _arg_1 = (_arg_1 | ((_arg_1 >> 8) & 0xFFFFFF));
            _arg_1 = (_arg_1 | ((_arg_1 >> 16) & 0xFFFF));
            return (_arg_1 + 1);
        }

        public static function b2IsPowerOfTwo(_arg_1:uint):Boolean
        {
            return ((_arg_1 > 0) && ((_arg_1 & (_arg_1 - 1)) == 0));
        }


    }
}//package Box2D.Common.Math

//------------------------------------------------------------
//Box2D.Common.Math.b2Sweep

package Box2D.Common.Math
{
    public class b2Sweep 
    {

        public var localCenter:b2Vec2 = new b2Vec2();
        public var c0:b2Vec2 = new b2Vec2();
        public var c:b2Vec2 = new b2Vec2();
        public var a0:Number;
        public var a:Number;
        public var t0:Number;


        public function GetXForm(_arg_1:b2XForm, _arg_2:Number):void
        {
            var _local_4:Number;
            var _local_5:Number;
            if ((1 - this.t0) > Number.MIN_VALUE)
            {
                _local_4 = ((_arg_2 - this.t0) / (1 - this.t0));
                _arg_1.position.x = (((1 - _local_4) * this.c0.x) + (_local_4 * this.c.x));
                _arg_1.position.y = (((1 - _local_4) * this.c0.y) + (_local_4 * this.c.y));
                _local_5 = (((1 - _local_4) * this.a0) + (_local_4 * this.a));
                _arg_1.R.Set(_local_5);
            }
            else
            {
                _arg_1.position.SetV(this.c);
                _arg_1.R.Set(this.a);
            };
            var _local_3:b2Mat22 = _arg_1.R;
            _arg_1.position.x = (_arg_1.position.x - ((_local_3.col1.x * this.localCenter.x) + (_local_3.col2.x * this.localCenter.y)));
            _arg_1.position.y = (_arg_1.position.y - ((_local_3.col1.y * this.localCenter.x) + (_local_3.col2.y * this.localCenter.y)));
        }

        public function Advance(_arg_1:Number):void
        {
            var _local_2:Number;
            if (((this.t0 < _arg_1) && ((1 - this.t0) > Number.MIN_VALUE)))
            {
                _local_2 = ((_arg_1 - this.t0) / (1 - this.t0));
                this.c0.x = (((1 - _local_2) * this.c0.x) + (_local_2 * this.c.x));
                this.c0.y = (((1 - _local_2) * this.c0.y) + (_local_2 * this.c.y));
                this.a0 = (((1 - _local_2) * this.a0) + (_local_2 * this.a));
                this.t0 = _arg_1;
            };
        }


    }
}//package Box2D.Common.Math

//------------------------------------------------------------
//Box2D.Common.Math.b2Vec2

package Box2D.Common.Math
{
    public class b2Vec2 
    {

        public var x:Number;
        public var y:Number;

        public function b2Vec2(_arg_1:Number=0, _arg_2:Number=0):void
        {
            this.x = _arg_1;
            this.y = _arg_2;
        }

        public static function Make(_arg_1:Number, _arg_2:Number):b2Vec2
        {
            return (new b2Vec2(_arg_1, _arg_2));
        }


        public function SetZero():void
        {
            this.x = 0;
            this.y = 0;
        }

        public function Set(_arg_1:Number=0, _arg_2:Number=0):void
        {
            this.x = _arg_1;
            this.y = _arg_2;
        }

        public function SetV(_arg_1:b2Vec2):void
        {
            this.x = _arg_1.x;
            this.y = _arg_1.y;
        }

        public function Negative():b2Vec2
        {
            return (new b2Vec2(-(this.x), -(this.y)));
        }

        public function Copy():b2Vec2
        {
            return (new b2Vec2(this.x, this.y));
        }

        public function Add(_arg_1:b2Vec2):void
        {
            this.x = (this.x + _arg_1.x);
            this.y = (this.y + _arg_1.y);
        }

        public function Subtract(_arg_1:b2Vec2):void
        {
            this.x = (this.x - _arg_1.x);
            this.y = (this.y - _arg_1.y);
        }

        public function Multiply(_arg_1:Number):void
        {
            this.x = (this.x * _arg_1);
            this.y = (this.y * _arg_1);
        }

        public function MulM(_arg_1:b2Mat22):void
        {
            var _local_2:Number = this.x;
            this.x = ((_arg_1.col1.x * _local_2) + (_arg_1.col2.x * this.y));
            this.y = ((_arg_1.col1.y * _local_2) + (_arg_1.col2.y * this.y));
        }

        public function MulTM(_arg_1:b2Mat22):void
        {
            var _local_2:Number = b2Math.b2Dot(this, _arg_1.col1);
            this.y = b2Math.b2Dot(this, _arg_1.col2);
            this.x = _local_2;
        }

        public function CrossVF(_arg_1:Number):void
        {
            var _local_2:Number = this.x;
            this.x = (_arg_1 * this.y);
            this.y = (-(_arg_1) * _local_2);
        }

        public function CrossFV(_arg_1:Number):void
        {
            var _local_2:Number = this.x;
            this.x = (-(_arg_1) * this.y);
            this.y = (_arg_1 * _local_2);
        }

        public function MinV(_arg_1:b2Vec2):void
        {
            this.x = ((this.x < _arg_1.x) ? this.x : _arg_1.x);
            this.y = ((this.y < _arg_1.y) ? this.y : _arg_1.y);
        }

        public function MaxV(_arg_1:b2Vec2):void
        {
            this.x = ((this.x > _arg_1.x) ? this.x : _arg_1.x);
            this.y = ((this.y > _arg_1.y) ? this.y : _arg_1.y);
        }

        public function Abs():void
        {
            if (this.x < 0)
            {
                this.x = -(this.x);
            };
            if (this.y < 0)
            {
                this.y = -(this.y);
            };
        }

        public function Length():Number
        {
            return (Math.sqrt(((this.x * this.x) + (this.y * this.y))));
        }

        public function LengthSquared():Number
        {
            return ((this.x * this.x) + (this.y * this.y));
        }

        public function Normalize():Number
        {
            var _local_1:Number = Math.sqrt(((this.x * this.x) + (this.y * this.y)));
            if (_local_1 < Number.MIN_VALUE)
            {
                return (0);
            };
            var _local_2:Number = (1 / _local_1);
            this.x = (this.x * _local_2);
            this.y = (this.y * _local_2);
            return (_local_1);
        }

        public function IsValid():Boolean
        {
            return ((b2Math.b2IsValid(this.x)) && (b2Math.b2IsValid(this.y)));
        }


    }
}//package Box2D.Common.Math

//------------------------------------------------------------
//Box2D.Common.Math.b2XForm

package Box2D.Common.Math
{
    public class b2XForm 
    {

        public var position:b2Vec2 = new b2Vec2();
        public var R:b2Mat22 = new b2Mat22();

        public function b2XForm(_arg_1:b2Vec2=null, _arg_2:b2Mat22=null):void
        {
            if (_arg_1)
            {
                this.position.SetV(_arg_1);
                this.R.SetM(_arg_2);
            };
        }

        public function Initialize(_arg_1:b2Vec2, _arg_2:b2Mat22):void
        {
            this.position.SetV(_arg_1);
            this.R.SetM(_arg_2);
        }

        public function SetIdentity():void
        {
            this.position.SetZero();
            this.R.SetIdentity();
        }

        public function Set(_arg_1:b2XForm):void
        {
            this.position.SetV(_arg_1.position);
            this.R.SetM(_arg_1.R);
        }


    }
}//package Box2D.Common.Math

//------------------------------------------------------------
//Box2D.Common.b2Color

package Box2D.Common
{
    import Box2D.Common.Math.b2Math;

    public class b2Color 
    {

        private var _r:uint = 0;
        private var _g:uint = 0;
        private var _b:uint = 0;

        public function b2Color(_arg_1:Number, _arg_2:Number, _arg_3:Number)
        {
            this._r = uint((0xFF * b2Math.b2Clamp(_arg_1, 0, 1)));
            this._g = uint((0xFF * b2Math.b2Clamp(_arg_2, 0, 1)));
            this._b = uint((0xFF * b2Math.b2Clamp(_arg_3, 0, 1)));
        }

        public function Set(_arg_1:Number, _arg_2:Number, _arg_3:Number):void
        {
            this._r = uint((0xFF * b2Math.b2Clamp(_arg_1, 0, 1)));
            this._g = uint((0xFF * b2Math.b2Clamp(_arg_2, 0, 1)));
            this._b = uint((0xFF * b2Math.b2Clamp(_arg_3, 0, 1)));
        }

        public function set r(_arg_1:Number):void
        {
            this._r = uint((0xFF * b2Math.b2Clamp(_arg_1, 0, 1)));
        }

        public function set g(_arg_1:Number):void
        {
            this._g = uint((0xFF * b2Math.b2Clamp(_arg_1, 0, 1)));
        }

        public function set b(_arg_1:Number):void
        {
            this._b = uint((0xFF * b2Math.b2Clamp(_arg_1, 0, 1)));
        }

        public function get color():uint
        {
            return ((this._r | (this._g << 8)) | (this._b << 16));
        }


    }
}//package Box2D.Common

//------------------------------------------------------------
//Box2D.Common.b2Settings

package Box2D.Common
{
    import Box2D.Common.Math.b2Vec2;

    public class b2Settings 
    {

        public static const USHRT_MAX:int = 0xFFFF;
        public static const b2_pi:Number = Math.PI;//3.14159265358979
        public static const b2_maxManifoldPoints:int = 2;
        public static const b2_maxPolygonVertices:int = 8;
        public static const b2_maxProxies:int = 0x1000;
        public static const b2_maxPairs:int = (8 * b2_maxProxies);//0x8000
        public static const b2_linearSlop:Number = 0.005;
        public static const b2_angularSlop:Number = ((2 / 180) * b2_pi);//0.0349065850398866
        public static const b2_toiSlop:Number = (8 * b2_linearSlop);//0.04
        public static const b2_maxTOIContactsPerIsland:int = 32;
        public static const b2_velocityThreshold:Number = 1;
        public static const b2_maxLinearCorrection:Number = 0.2;
        public static const b2_maxAngularCorrection:Number = ((8 / 180) * b2_pi);//0.139626340159546
        public static const b2_maxLinearVelocity:Number = 200;
        public static const b2_maxLinearVelocitySquared:Number = (b2_maxLinearVelocity * b2_maxLinearVelocity);//40000
        public static const b2_maxAngularVelocity:Number = 250;
        public static const b2_maxAngularVelocitySquared:Number = (b2_maxAngularVelocity * b2_maxAngularVelocity);//62500
        public static const b2_contactBaumgarte:Number = 0.2;
        public static const b2_timeToSleep:Number = 0.5;
        public static const b2_linearSleepTolerance:Number = 0.01;
        public static const b2_angularSleepTolerance:Number = (2 / 180);//0.0111111111111111


        public static function b2Assert(_arg_1:Boolean):void
        {
            var _local_2:b2Vec2;
            if (!_arg_1)
            {
                _local_2.x++;
            };
        }


    }
}//package Box2D.Common

//------------------------------------------------------------
//Box2D.Dynamics.Contacts.b2CircleContact

package Box2D.Dynamics.Contacts
{
    import Box2D.Collision.b2ContactPoint;
    import Box2D.Collision.b2Manifold;
    import Box2D.Collision.b2ManifoldPoint;
    import Box2D.Collision.Shapes.b2Shape;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Dynamics.b2Body;
    import Box2D.Collision.b2Collision;
    import Box2D.Collision.Shapes.b2CircleShape;
    import Box2D.Dynamics.b2ContactListener;
    import Box2D.Collision.Shapes.*;
    import Box2D.Dynamics.*;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Common.*;

    public class b2CircleContact extends b2Contact 
    {

        private static const s_evalCP:b2ContactPoint = new b2ContactPoint();

        private var m_manifolds:Array = [new b2Manifold()];
        public var m_manifold:b2Manifold;
        private var m0:b2Manifold = new b2Manifold();

        public function b2CircleContact(_arg_1:b2Shape, _arg_2:b2Shape)
        {
            super(_arg_1, _arg_2);
            this.m_manifold = this.m_manifolds[0];
            this.m_manifold.pointCount = 0;
            var _local_3:b2ManifoldPoint = this.m_manifold.points[0];
            _local_3.normalImpulse = 0;
            _local_3.tangentImpulse = 0;
        }

        public static function Create(_arg_1:b2Shape, _arg_2:b2Shape, _arg_3:*):b2Contact
        {
            return (new b2CircleContact(_arg_1, _arg_2));
        }

        public static function Destroy(_arg_1:b2Contact, _arg_2:*):void
        {
        }


        override public function Evaluate(_arg_1:b2ContactListener):void
        {
            var _local_2:b2Vec2;
            var _local_3:b2Vec2;
            var _local_4:b2ManifoldPoint;
            var _local_8:b2ManifoldPoint;
            var _local_5:b2Body = m_shape1.m_body;
            var _local_6:b2Body = m_shape2.m_body;
            this.m0.Set(this.m_manifold);
            b2Collision.b2CollideCircles(this.m_manifold, (m_shape1 as b2CircleShape), _local_5.m_xf, (m_shape2 as b2CircleShape), _local_6.m_xf);
            var _local_7:b2ContactPoint = s_evalCP;
            _local_7.shape1 = m_shape1;
            _local_7.shape2 = m_shape2;
            _local_7.friction = m_friction;
            _local_7.restitution = m_restitution;
            if (this.m_manifold.pointCount > 0)
            {
                m_manifoldCount = 1;
                _local_8 = this.m_manifold.points[0];
                if (this.m0.pointCount == 0)
                {
                    _local_8.normalImpulse = 0;
                    _local_8.tangentImpulse = 0;
                    if (_arg_1)
                    {
                        _local_7.position = _local_5.GetWorldPoint(_local_8.localPoint1);
                        _local_2 = _local_5.GetLinearVelocityFromLocalPoint(_local_8.localPoint1);
                        _local_3 = _local_6.GetLinearVelocityFromLocalPoint(_local_8.localPoint2);
                        _local_7.velocity.Set((_local_3.x - _local_2.x), (_local_3.y - _local_2.y));
                        _local_7.normal.SetV(this.m_manifold.normal);
                        _local_7.separation = _local_8.separation;
                        _local_7.id.key = _local_8.id._key;
                        _arg_1.Add(_local_7);
                    };
                }
                else
                {
                    _local_4 = this.m0.points[0];
                    _local_8.normalImpulse = _local_4.normalImpulse;
                    _local_8.tangentImpulse = _local_4.tangentImpulse;
                    if (_arg_1)
                    {
                        _local_7.position = _local_5.GetWorldPoint(_local_8.localPoint1);
                        _local_2 = _local_5.GetLinearVelocityFromLocalPoint(_local_8.localPoint1);
                        _local_3 = _local_6.GetLinearVelocityFromLocalPoint(_local_8.localPoint2);
                        _local_7.velocity.Set((_local_3.x - _local_2.x), (_local_3.y - _local_2.y));
                        _local_7.normal.SetV(this.m_manifold.normal);
                        _local_7.separation = _local_8.separation;
                        _local_7.id.key = _local_8.id._key;
                        _arg_1.Persist(_local_7);
                    };
                };
            }
            else
            {
                m_manifoldCount = 0;
                if (((this.m0.pointCount > 0) && (_arg_1)))
                {
                    _local_4 = this.m0.points[0];
                    _local_7.position = _local_5.GetWorldPoint(_local_4.localPoint1);
                    _local_2 = _local_5.GetLinearVelocityFromLocalPoint(_local_4.localPoint1);
                    _local_3 = _local_6.GetLinearVelocityFromLocalPoint(_local_4.localPoint2);
                    _local_7.velocity.Set((_local_3.x - _local_2.x), (_local_3.y - _local_2.y));
                    _local_7.normal.SetV(this.m0.normal);
                    _local_7.separation = _local_4.separation;
                    _local_7.id.key = _local_4.id._key;
                    _arg_1.Remove(_local_7);
                };
            };
        }

        override public function GetManifolds():Array
        {
            return (this.m_manifolds);
        }


    }
}//package Box2D.Dynamics.Contacts

//------------------------------------------------------------
//Box2D.Dynamics.Contacts.b2Contact

package Box2D.Dynamics.Contacts
{
    import Box2D.Collision.Shapes.b2Shape;
    import Box2D.Common.Math.b2Math;
    import Box2D.Collision.b2Manifold;
    import Box2D.Dynamics.b2Body;
    import Box2D.Dynamics.b2ContactListener;
    import Box2D.Collision.Shapes.*;
    import Box2D.Dynamics.*;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Common.*;

    public class b2Contact 
    {

        public static var e_nonSolidFlag:uint = 1;
        public static var e_slowFlag:uint = 2;
        public static var e_islandFlag:uint = 4;
        public static var e_toiFlag:uint = 8;
        public static var s_registers:Array;
        public static var s_initialized:Boolean = false;

        public var m_flags:uint;
        public var m_prev:b2Contact;
        public var m_next:b2Contact;
        public var m_node1:b2ContactEdge = new b2ContactEdge();
        public var m_node2:b2ContactEdge = new b2ContactEdge();
        public var m_shape1:b2Shape;
        public var m_shape2:b2Shape;
        public var m_manifoldCount:int;
        public var m_friction:Number;
        public var m_restitution:Number;
        public var m_toi:Number;

        public function b2Contact(_arg_1:b2Shape=null, _arg_2:b2Shape=null)
        {
            this.m_flags = 0;
            if (((!(_arg_1)) || (!(_arg_2))))
            {
                this.m_shape1 = null;
                this.m_shape2 = null;
                return;
            };
            if (((_arg_1.IsSensor()) || (_arg_2.IsSensor())))
            {
                this.m_flags = (this.m_flags | e_nonSolidFlag);
            };
            this.m_shape1 = _arg_1;
            this.m_shape2 = _arg_2;
            this.m_manifoldCount = 0;
            this.m_friction = Math.sqrt((this.m_shape1.m_friction * this.m_shape2.m_friction));
            this.m_restitution = b2Math.b2Max(this.m_shape1.m_restitution, this.m_shape2.m_restitution);
            this.m_prev = null;
            this.m_next = null;
            this.m_node1.contact = null;
            this.m_node1.prev = null;
            this.m_node1.next = null;
            this.m_node1.other = null;
            this.m_node2.contact = null;
            this.m_node2.prev = null;
            this.m_node2.next = null;
            this.m_node2.other = null;
        }

        public static function AddType(_arg_1:Function, _arg_2:Function, _arg_3:int, _arg_4:int):void
        {
            s_registers[_arg_3][_arg_4].createFcn = _arg_1;
            s_registers[_arg_3][_arg_4].destroyFcn = _arg_2;
            s_registers[_arg_3][_arg_4].primary = true;
            if (_arg_3 != _arg_4)
            {
                s_registers[_arg_4][_arg_3].createFcn = _arg_1;
                s_registers[_arg_4][_arg_3].destroyFcn = _arg_2;
                s_registers[_arg_4][_arg_3].primary = false;
            };
        }

        public static function InitializeRegisters():void
        {
            var _local_2:int;
            s_registers = new Array(b2Shape.e_shapeTypeCount);
            var _local_1:int;
            while (_local_1 < b2Shape.e_shapeTypeCount)
            {
                s_registers[_local_1] = new Array(b2Shape.e_shapeTypeCount);
                _local_2 = 0;
                while (_local_2 < b2Shape.e_shapeTypeCount)
                {
                    s_registers[_local_1][_local_2] = new b2ContactRegister();
                    _local_2++;
                };
                _local_1++;
            };
            AddType(b2CircleContact.Create, b2CircleContact.Destroy, b2Shape.e_circleShape, b2Shape.e_circleShape);
            AddType(b2PolyAndCircleContact.Create, b2PolyAndCircleContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_circleShape);
            AddType(b2PolygonContact.Create, b2PolygonContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_polygonShape);
        }

        public static function Create(_arg_1:b2Shape, _arg_2:b2Shape, _arg_3:*):b2Contact
        {
            var _local_8:b2Contact;
            var _local_9:int;
            var _local_10:b2Manifold;
            if (s_initialized == false)
            {
                InitializeRegisters();
                s_initialized = true;
            };
            var _local_4:int = _arg_1.m_type;
            var _local_5:int = _arg_2.m_type;
            var _local_6:b2ContactRegister = s_registers[_local_4][_local_5];
            var _local_7:Function = _local_6.createFcn;
            if (_local_7 != null)
            {
                if (_local_6.primary)
                {
                    return (_local_7(_arg_1, _arg_2, _arg_3));
                };
                _local_8 = _local_7(_arg_2, _arg_1, _arg_3);
                _local_9 = 0;
                while (_local_9 < _local_8.m_manifoldCount)
                {
                    _local_10 = _local_8.GetManifolds()[_local_9];
                    _local_10.normal = _local_10.normal.Negative();
                    _local_9++;
                };
                return (_local_8);
            };
            return (null);
        }

        public static function Destroy(_arg_1:b2Contact, _arg_2:*):void
        {
            if (_arg_1.m_manifoldCount > 0)
            {
                _arg_1.m_shape1.m_body.WakeUp();
                _arg_1.m_shape2.m_body.WakeUp();
            };
            var _local_3:int = _arg_1.m_shape1.m_type;
            var _local_4:int = _arg_1.m_shape2.m_type;
            var _local_5:b2ContactRegister = s_registers[_local_3][_local_4];
            var _local_6:Function = _local_5.destroyFcn;
            (_local_6(_arg_1, _arg_2));
        }


        public function GetManifolds():Array
        {
            return (null);
        }

        public function GetManifoldCount():int
        {
            return (this.m_manifoldCount);
        }

        public function IsSolid():Boolean
        {
            return ((this.m_flags & e_nonSolidFlag) == 0);
        }

        public function GetNext():b2Contact
        {
            return (this.m_next);
        }

        public function GetShape1():b2Shape
        {
            return (this.m_shape1);
        }

        public function GetShape2():b2Shape
        {
            return (this.m_shape2);
        }

        public function Update(_arg_1:b2ContactListener):void
        {
            var _local_2:int = this.m_manifoldCount;
            this.Evaluate(_arg_1);
            var _local_3:int = this.m_manifoldCount;
            var _local_4:b2Body = this.m_shape1.m_body;
            var _local_5:b2Body = this.m_shape2.m_body;
            if (((_local_3 == 0) && (_local_2 > 0)))
            {
                _local_4.WakeUp();
                _local_5.WakeUp();
            };
            if (((((_local_4.IsStatic()) || (_local_4.IsBullet())) || (_local_5.IsStatic())) || (_local_5.IsBullet())))
            {
                this.m_flags = (this.m_flags & (~(e_slowFlag)));
            }
            else
            {
                this.m_flags = (this.m_flags | e_slowFlag);
            };
        }

        public function Evaluate(_arg_1:b2ContactListener):void
        {
        }


    }
}//package Box2D.Dynamics.Contacts

//------------------------------------------------------------
//Box2D.Dynamics.Contacts.b2ContactConstraint

package Box2D.Dynamics.Contacts
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Collision.b2Manifold;
    import Box2D.Dynamics.b2Body;
    import Box2D.Common.b2Settings;
    import Box2D.Dynamics.*;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Common.*;

    public class b2ContactConstraint 
    {

        public var points:Array;
        public var normal:b2Vec2 = new b2Vec2();
        public var manifold:b2Manifold;
        public var body1:b2Body;
        public var body2:b2Body;
        public var friction:Number;
        public var restitution:Number;
        public var pointCount:int;

        public function b2ContactConstraint()
        {
            this.points = new Array(b2Settings.b2_maxManifoldPoints);
            var _local_1:int;
            while (_local_1 < b2Settings.b2_maxManifoldPoints)
            {
                this.points[_local_1] = new b2ContactConstraintPoint();
                _local_1++;
            };
        }

    }
}//package Box2D.Dynamics.Contacts

//------------------------------------------------------------
//Box2D.Dynamics.Contacts.b2ContactConstraintPoint

package Box2D.Dynamics.Contacts
{
    import Box2D.Common.Math.b2Vec2;

    public class b2ContactConstraintPoint 
    {

        public var localAnchor1:b2Vec2 = new b2Vec2();
        public var localAnchor2:b2Vec2 = new b2Vec2();
        public var r1:b2Vec2 = new b2Vec2();
        public var r2:b2Vec2 = new b2Vec2();
        public var normalImpulse:Number;
        public var tangentImpulse:Number;
        public var positionImpulse:Number;
        public var normalMass:Number;
        public var tangentMass:Number;
        public var equalizedMass:Number;
        public var separation:Number;
        public var velocityBias:Number;


    }
}//package Box2D.Dynamics.Contacts

//------------------------------------------------------------
//Box2D.Dynamics.Contacts.b2ContactEdge

package Box2D.Dynamics.Contacts
{
    import Box2D.Dynamics.b2Body;

    public class b2ContactEdge 
    {

        public var other:b2Body;
        public var contact:b2Contact;
        public var prev:b2ContactEdge;
        public var next:b2ContactEdge;


    }
}//package Box2D.Dynamics.Contacts

//------------------------------------------------------------
//Box2D.Dynamics.Contacts.b2ContactRegister

package Box2D.Dynamics.Contacts
{
    public class b2ContactRegister 
    {

        public var createFcn:Function;
        public var destroyFcn:Function;
        public var primary:Boolean;


    }
}//package Box2D.Dynamics.Contacts

//------------------------------------------------------------
//Box2D.Dynamics.Contacts.b2ContactResult

package Box2D.Dynamics.Contacts
{
    import Box2D.Collision.Shapes.b2Shape;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Collision.b2ContactID;

    public class b2ContactResult 
    {

        public var shape1:b2Shape;
        public var shape2:b2Shape;
        public var position:b2Vec2 = new b2Vec2();
        public var normal:b2Vec2 = new b2Vec2();
        public var normalImpulse:Number;
        public var tangentImpulse:Number;
        public var id:b2ContactID = new b2ContactID();


    }
}//package Box2D.Dynamics.Contacts

//------------------------------------------------------------
//Box2D.Dynamics.Contacts.b2ContactSolver

package Box2D.Dynamics.Contacts
{
    import Box2D.Dynamics.b2TimeStep;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Dynamics.b2Body;
    import Box2D.Collision.b2Manifold;
    import Box2D.Collision.b2ManifoldPoint;
    import Box2D.Common.b2Settings;
    import Box2D.Common.Math.b2Math;
    import Box2D.Dynamics.*;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Common.*;

    public class b2ContactSolver 
    {

        public var m_step:b2TimeStep = new b2TimeStep();
        public var m_allocator:*;
        public var m_constraints:Array = new Array();
        public var m_constraintCount:int;

        public function b2ContactSolver(_arg_1:b2TimeStep, _arg_2:Array, _arg_3:int, _arg_4:*)
        {
            var _local_5:b2Contact;
            var _local_6:int;
            var _local_7:b2Vec2;
            var _local_8:b2Mat22;
            var _local_10:b2Body;
            var _local_11:b2Body;
            var _local_12:int;
            var _local_13:Array;
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:Number;
            var _local_18:Number;
            var _local_19:Number;
            var _local_20:Number;
            var _local_21:Number;
            var _local_22:int;
            var _local_23:b2Manifold;
            var _local_24:Number;
            var _local_25:Number;
            var _local_26:b2ContactConstraint;
            var _local_27:uint;
            var _local_28:b2ManifoldPoint;
            var _local_29:b2ContactConstraintPoint;
            var _local_30:Number;
            var _local_31:Number;
            var _local_32:Number;
            var _local_33:Number;
            var _local_34:Number;
            var _local_35:Number;
            var _local_36:Number;
            var _local_37:Number;
            var _local_38:Number;
            var _local_39:Number;
            var _local_40:Number;
            var _local_41:Number;
            var _local_42:Number;
            var _local_43:Number;
            var _local_44:Number;
            var _local_45:Number;
            var _local_46:Number;
            var _local_47:Number;
            super();
            this.m_step.dt = _arg_1.dt;
            this.m_step.inv_dt = _arg_1.inv_dt;
            this.m_step.maxIterations = _arg_1.maxIterations;
            this.m_allocator = _arg_4;
            this.m_constraintCount = 0;
            _local_6 = 0;
            while (_local_6 < _arg_3)
            {
                _local_5 = _arg_2[_local_6];
                this.m_constraintCount = (this.m_constraintCount + _local_5.m_manifoldCount);
                _local_6++;
            };
            _local_6 = 0;
            while (_local_6 < this.m_constraintCount)
            {
                this.m_constraints[_local_6] = new b2ContactConstraint();
                _local_6++;
            };
            var _local_9:int;
            _local_6 = 0;
            while (_local_6 < _arg_3)
            {
                _local_5 = _arg_2[_local_6];
                _local_10 = _local_5.m_shape1.m_body;
                _local_11 = _local_5.m_shape2.m_body;
                _local_12 = _local_5.m_manifoldCount;
                _local_13 = _local_5.GetManifolds();
                _local_14 = _local_5.m_friction;
                _local_15 = _local_5.m_restitution;
                _local_16 = _local_10.m_linearVelocity.x;
                _local_17 = _local_10.m_linearVelocity.y;
                _local_18 = _local_11.m_linearVelocity.x;
                _local_19 = _local_11.m_linearVelocity.y;
                _local_20 = _local_10.m_angularVelocity;
                _local_21 = _local_11.m_angularVelocity;
                _local_22 = 0;
                while (_local_22 < _local_12)
                {
                    _local_23 = _local_13[_local_22];
                    _local_24 = _local_23.normal.x;
                    _local_25 = _local_23.normal.y;
                    _local_26 = this.m_constraints[_local_9];
                    _local_26.body1 = _local_10;
                    _local_26.body2 = _local_11;
                    _local_26.manifold = _local_23;
                    _local_26.normal.x = _local_24;
                    _local_26.normal.y = _local_25;
                    _local_26.pointCount = _local_23.pointCount;
                    _local_26.friction = _local_14;
                    _local_26.restitution = _local_15;
                    _local_27 = 0;
                    while (_local_27 < _local_26.pointCount)
                    {
                        _local_28 = _local_23.points[_local_27];
                        _local_29 = _local_26.points[_local_27];
                        _local_29.normalImpulse = _local_28.normalImpulse;
                        _local_29.tangentImpulse = _local_28.tangentImpulse;
                        _local_29.separation = _local_28.separation;
                        _local_29.positionImpulse = 0;
                        _local_29.localAnchor1.SetV(_local_28.localPoint1);
                        _local_29.localAnchor2.SetV(_local_28.localPoint2);
                        _local_8 = _local_10.m_xf.R;
                        _local_32 = (_local_28.localPoint1.x - _local_10.m_sweep.localCenter.x);
                        _local_33 = (_local_28.localPoint1.y - _local_10.m_sweep.localCenter.y);
                        _local_30 = ((_local_8.col1.x * _local_32) + (_local_8.col2.x * _local_33));
                        _local_33 = ((_local_8.col1.y * _local_32) + (_local_8.col2.y * _local_33));
                        _local_32 = _local_30;
                        _local_29.r1.Set(_local_32, _local_33);
                        _local_8 = _local_11.m_xf.R;
                        _local_34 = (_local_28.localPoint2.x - _local_11.m_sweep.localCenter.x);
                        _local_35 = (_local_28.localPoint2.y - _local_11.m_sweep.localCenter.y);
                        _local_30 = ((_local_8.col1.x * _local_34) + (_local_8.col2.x * _local_35));
                        _local_35 = ((_local_8.col1.y * _local_34) + (_local_8.col2.y * _local_35));
                        _local_34 = _local_30;
                        _local_29.r2.Set(_local_34, _local_35);
                        _local_36 = ((_local_32 * _local_32) + (_local_33 * _local_33));
                        _local_37 = ((_local_34 * _local_34) + (_local_35 * _local_35));
                        _local_38 = ((_local_32 * _local_24) + (_local_33 * _local_25));
                        _local_39 = ((_local_34 * _local_24) + (_local_35 * _local_25));
                        _local_40 = (_local_10.m_invMass + _local_11.m_invMass);
                        _local_40 = (_local_40 + ((_local_10.m_invI * (_local_36 - (_local_38 * _local_38))) + (_local_11.m_invI * (_local_37 - (_local_39 * _local_39)))));
                        _local_29.normalMass = (1 / _local_40);
                        _local_41 = ((_local_10.m_mass * _local_10.m_invMass) + (_local_11.m_mass * _local_11.m_invMass));
                        _local_41 = (_local_41 + (((_local_10.m_mass * _local_10.m_invI) * (_local_36 - (_local_38 * _local_38))) + ((_local_11.m_mass * _local_11.m_invI) * (_local_37 - (_local_39 * _local_39)))));
                        _local_29.equalizedMass = (1 / _local_41);
                        _local_42 = _local_25;
                        _local_43 = -(_local_24);
                        _local_44 = ((_local_32 * _local_42) + (_local_33 * _local_43));
                        _local_45 = ((_local_34 * _local_42) + (_local_35 * _local_43));
                        _local_46 = (_local_10.m_invMass + _local_11.m_invMass);
                        _local_46 = (_local_46 + ((_local_10.m_invI * (_local_36 - (_local_44 * _local_44))) + (_local_11.m_invI * (_local_37 - (_local_45 * _local_45)))));
                        _local_29.tangentMass = (1 / _local_46);
                        _local_29.velocityBias = 0;
                        if (_local_29.separation > 0)
                        {
                            _local_29.velocityBias = (-60 * _local_29.separation);
                        };
                        _local_30 = (((_local_18 + (-(_local_21) * _local_35)) - _local_16) - (-(_local_20) * _local_33));
                        _local_31 = (((_local_19 + (_local_21 * _local_34)) - _local_17) - (_local_20 * _local_32));
                        _local_47 = ((_local_26.normal.x * _local_30) + (_local_26.normal.y * _local_31));
                        if (_local_47 < -(b2Settings.b2_velocityThreshold))
                        {
                            _local_29.velocityBias = (_local_29.velocityBias + (-(_local_26.restitution) * _local_47));
                        };
                        _local_27++;
                    };
                    _local_9++;
                    _local_22++;
                };
                _local_6++;
            };
        }

        public function InitVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_2:b2Vec2;
            var _local_3:b2Vec2;
            var _local_4:b2Mat22;
            var _local_6:b2ContactConstraint;
            var _local_7:b2Body;
            var _local_8:b2Body;
            var _local_9:Number;
            var _local_10:Number;
            var _local_11:Number;
            var _local_12:Number;
            var _local_13:Number;
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:Number;
            var _local_18:int;
            var _local_19:int;
            var _local_20:b2ContactConstraintPoint;
            var _local_21:Number;
            var _local_22:Number;
            var _local_23:b2ContactConstraintPoint;
            var _local_5:int;
            while (_local_5 < this.m_constraintCount)
            {
                _local_6 = this.m_constraints[_local_5];
                _local_7 = _local_6.body1;
                _local_8 = _local_6.body2;
                _local_9 = _local_7.m_invMass;
                _local_10 = _local_7.m_invI;
                _local_11 = _local_8.m_invMass;
                _local_12 = _local_8.m_invI;
                _local_13 = _local_6.normal.x;
                _local_14 = _local_6.normal.y;
                _local_15 = _local_14;
                _local_16 = -(_local_13);
                if (_arg_1.warmStarting)
                {
                    _local_19 = _local_6.pointCount;
                    _local_18 = 0;
                    while (_local_18 < _local_19)
                    {
                        _local_20 = _local_6.points[_local_18];
                        _local_20.normalImpulse = (_local_20.normalImpulse * _arg_1.dtRatio);
                        _local_20.tangentImpulse = (_local_20.tangentImpulse * _arg_1.dtRatio);
                        _local_21 = ((_local_20.normalImpulse * _local_13) + (_local_20.tangentImpulse * _local_15));
                        _local_22 = ((_local_20.normalImpulse * _local_14) + (_local_20.tangentImpulse * _local_16));
                        _local_7.m_angularVelocity = (_local_7.m_angularVelocity - (_local_10 * ((_local_20.r1.x * _local_22) - (_local_20.r1.y * _local_21))));
                        _local_7.m_linearVelocity.x = (_local_7.m_linearVelocity.x - (_local_9 * _local_21));
                        _local_7.m_linearVelocity.y = (_local_7.m_linearVelocity.y - (_local_9 * _local_22));
                        _local_8.m_angularVelocity = (_local_8.m_angularVelocity + (_local_12 * ((_local_20.r2.x * _local_22) - (_local_20.r2.y * _local_21))));
                        _local_8.m_linearVelocity.x = (_local_8.m_linearVelocity.x + (_local_11 * _local_21));
                        _local_8.m_linearVelocity.y = (_local_8.m_linearVelocity.y + (_local_11 * _local_22));
                        _local_18++;
                    };
                }
                else
                {
                    _local_19 = _local_6.pointCount;
                    _local_18 = 0;
                    while (_local_18 < _local_19)
                    {
                        _local_23 = _local_6.points[_local_18];
                        _local_23.normalImpulse = 0;
                        _local_23.tangentImpulse = 0;
                        _local_18++;
                    };
                };
                _local_5++;
            };
        }

        public function SolveVelocityConstraints():void
        {
            var _local_1:int;
            var _local_2:b2ContactConstraintPoint;
            var _local_3:Number;
            var _local_4:Number;
            var _local_5:Number;
            var _local_6:Number;
            var _local_7:Number;
            var _local_8:Number;
            var _local_9:Number;
            var _local_10:Number;
            var _local_11:Number;
            var _local_12:Number;
            var _local_13:Number;
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:b2Mat22;
            var _local_18:b2Vec2;
            var _local_20:b2ContactConstraint;
            var _local_21:b2Body;
            var _local_22:b2Body;
            var _local_23:Number;
            var _local_24:Number;
            var _local_25:b2Vec2;
            var _local_26:b2Vec2;
            var _local_27:Number;
            var _local_28:Number;
            var _local_29:Number;
            var _local_30:Number;
            var _local_31:Number;
            var _local_32:Number;
            var _local_33:Number;
            var _local_34:Number;
            var _local_35:Number;
            var _local_36:Number;
            var _local_37:int;
            var _local_38:Number;
            var _local_19:int;
            while (_local_19 < this.m_constraintCount)
            {
                _local_20 = this.m_constraints[_local_19];
                _local_21 = _local_20.body1;
                _local_22 = _local_20.body2;
                _local_23 = _local_21.m_angularVelocity;
                _local_24 = _local_22.m_angularVelocity;
                _local_25 = _local_21.m_linearVelocity;
                _local_26 = _local_22.m_linearVelocity;
                _local_27 = _local_21.m_invMass;
                _local_28 = _local_21.m_invI;
                _local_29 = _local_22.m_invMass;
                _local_30 = _local_22.m_invI;
                _local_31 = _local_20.normal.x;
                _local_32 = _local_20.normal.y;
                _local_33 = _local_32;
                _local_34 = -(_local_31);
                _local_35 = _local_20.friction;
                _local_37 = _local_20.pointCount;
                _local_1 = 0;
                while (_local_1 < _local_37)
                {
                    _local_2 = _local_20.points[_local_1];
                    _local_7 = (((_local_26.x + (-(_local_24) * _local_2.r2.y)) - _local_25.x) - (-(_local_23) * _local_2.r1.y));
                    _local_8 = (((_local_26.y + (_local_24 * _local_2.r2.x)) - _local_25.y) - (_local_23 * _local_2.r1.x));
                    _local_9 = ((_local_7 * _local_31) + (_local_8 * _local_32));
                    _local_11 = (-(_local_2.normalMass) * (_local_9 - _local_2.velocityBias));
                    _local_10 = ((_local_7 * _local_33) + (_local_8 * _local_34));
                    _local_12 = (_local_2.tangentMass * -(_local_10));
                    _local_13 = b2Math.b2Max((_local_2.normalImpulse + _local_11), 0);
                    _local_11 = (_local_13 - _local_2.normalImpulse);
                    _local_38 = (_local_35 * _local_2.normalImpulse);
                    _local_14 = b2Math.b2Clamp((_local_2.tangentImpulse + _local_12), -(_local_38), _local_38);
                    _local_12 = (_local_14 - _local_2.tangentImpulse);
                    _local_15 = ((_local_11 * _local_31) + (_local_12 * _local_33));
                    _local_16 = ((_local_11 * _local_32) + (_local_12 * _local_34));
                    _local_25.x = (_local_25.x - (_local_27 * _local_15));
                    _local_25.y = (_local_25.y - (_local_27 * _local_16));
                    _local_23 = (_local_23 - (_local_28 * ((_local_2.r1.x * _local_16) - (_local_2.r1.y * _local_15))));
                    _local_26.x = (_local_26.x + (_local_29 * _local_15));
                    _local_26.y = (_local_26.y + (_local_29 * _local_16));
                    _local_24 = (_local_24 + (_local_30 * ((_local_2.r2.x * _local_16) - (_local_2.r2.y * _local_15))));
                    _local_2.normalImpulse = _local_13;
                    _local_2.tangentImpulse = _local_14;
                    _local_1++;
                };
                _local_21.m_angularVelocity = _local_23;
                _local_22.m_angularVelocity = _local_24;
                _local_19++;
            };
        }

        public function FinalizeVelocityConstraints():void
        {
            var _local_2:b2ContactConstraint;
            var _local_3:b2Manifold;
            var _local_4:int;
            var _local_5:b2ManifoldPoint;
            var _local_6:b2ContactConstraintPoint;
            var _local_1:int;
            while (_local_1 < this.m_constraintCount)
            {
                _local_2 = this.m_constraints[_local_1];
                _local_3 = _local_2.manifold;
                _local_4 = 0;
                while (_local_4 < _local_2.pointCount)
                {
                    _local_5 = _local_3.points[_local_4];
                    _local_6 = _local_2.points[_local_4];
                    _local_5.normalImpulse = _local_6.normalImpulse;
                    _local_5.tangentImpulse = _local_6.tangentImpulse;
                    _local_4++;
                };
                _local_1++;
            };
        }

        public function SolvePositionConstraints(_arg_1:Number):Boolean
        {
            var _local_3:b2Mat22;
            var _local_4:b2Vec2;
            var _local_6:b2ContactConstraint;
            var _local_7:b2Body;
            var _local_8:b2Body;
            var _local_9:b2Vec2;
            var _local_10:Number;
            var _local_11:b2Vec2;
            var _local_12:Number;
            var _local_13:Number;
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:Number;
            var _local_18:Number;
            var _local_19:int;
            var _local_20:int;
            var _local_21:b2ContactConstraintPoint;
            var _local_22:Number;
            var _local_23:Number;
            var _local_24:Number;
            var _local_25:Number;
            var _local_26:Number;
            var _local_27:Number;
            var _local_28:Number;
            var _local_29:Number;
            var _local_30:Number;
            var _local_31:Number;
            var _local_32:Number;
            var _local_33:Number;
            var _local_34:Number;
            var _local_35:Number;
            var _local_36:Number;
            var _local_37:Number;
            var _local_38:Number;
            var _local_2:Number = 0;
            var _local_5:int;
            while (_local_5 < this.m_constraintCount)
            {
                _local_6 = this.m_constraints[_local_5];
                _local_7 = _local_6.body1;
                _local_8 = _local_6.body2;
                _local_9 = _local_7.m_sweep.c;
                _local_10 = _local_7.m_sweep.a;
                _local_11 = _local_8.m_sweep.c;
                _local_12 = _local_8.m_sweep.a;
                _local_13 = (_local_7.m_mass * _local_7.m_invMass);
                _local_14 = (_local_7.m_mass * _local_7.m_invI);
                _local_15 = (_local_8.m_mass * _local_8.m_invMass);
                _local_16 = (_local_8.m_mass * _local_8.m_invI);
                _local_17 = _local_6.normal.x;
                _local_18 = _local_6.normal.y;
                _local_19 = _local_6.pointCount;
                _local_20 = 0;
                while (_local_20 < _local_19)
                {
                    _local_21 = _local_6.points[_local_20];
                    _local_3 = _local_7.m_xf.R;
                    _local_4 = _local_7.m_sweep.localCenter;
                    _local_22 = (_local_21.localAnchor1.x - _local_4.x);
                    _local_23 = (_local_21.localAnchor1.y - _local_4.y);
                    _local_26 = ((_local_3.col1.x * _local_22) + (_local_3.col2.x * _local_23));
                    _local_23 = ((_local_3.col1.y * _local_22) + (_local_3.col2.y * _local_23));
                    _local_22 = _local_26;
                    _local_3 = _local_8.m_xf.R;
                    _local_4 = _local_8.m_sweep.localCenter;
                    _local_24 = (_local_21.localAnchor2.x - _local_4.x);
                    _local_25 = (_local_21.localAnchor2.y - _local_4.y);
                    _local_26 = ((_local_3.col1.x * _local_24) + (_local_3.col2.x * _local_25));
                    _local_25 = ((_local_3.col1.y * _local_24) + (_local_3.col2.y * _local_25));
                    _local_24 = _local_26;
                    _local_27 = (_local_9.x + _local_22);
                    _local_28 = (_local_9.y + _local_23);
                    _local_29 = (_local_11.x + _local_24);
                    _local_30 = (_local_11.y + _local_25);
                    _local_31 = (_local_29 - _local_27);
                    _local_32 = (_local_30 - _local_28);
                    _local_33 = (((_local_31 * _local_17) + (_local_32 * _local_18)) + _local_21.separation);
                    _local_2 = b2Math.b2Min(_local_2, _local_33);
                    _local_34 = (_arg_1 * b2Math.b2Clamp((_local_33 + b2Settings.b2_linearSlop), -(b2Settings.b2_maxLinearCorrection), 0));
                    _local_35 = (-(_local_21.equalizedMass) * _local_34);
                    _local_36 = _local_21.positionImpulse;
                    _local_21.positionImpulse = b2Math.b2Max((_local_36 + _local_35), 0);
                    _local_35 = (_local_21.positionImpulse - _local_36);
                    _local_37 = (_local_35 * _local_17);
                    _local_38 = (_local_35 * _local_18);
                    _local_9.x = (_local_9.x - (_local_13 * _local_37));
                    _local_9.y = (_local_9.y - (_local_13 * _local_38));
                    _local_10 = (_local_10 - (_local_14 * ((_local_22 * _local_38) - (_local_23 * _local_37))));
                    _local_7.m_sweep.a = _local_10;
                    _local_7.SynchronizeTransform();
                    _local_11.x = (_local_11.x + (_local_15 * _local_37));
                    _local_11.y = (_local_11.y + (_local_15 * _local_38));
                    _local_12 = (_local_12 + (_local_16 * ((_local_24 * _local_38) - (_local_25 * _local_37))));
                    _local_8.m_sweep.a = _local_12;
                    _local_8.SynchronizeTransform();
                    _local_20++;
                };
                _local_5++;
            };
            return (_local_2 >= (-1.5 * b2Settings.b2_linearSlop));
        }


    }
}//package Box2D.Dynamics.Contacts

//------------------------------------------------------------
//Box2D.Dynamics.Contacts.b2NullContact

package Box2D.Dynamics.Contacts
{
    import Box2D.Dynamics.b2ContactListener;

    public class b2NullContact extends b2Contact 
    {


        override public function Evaluate(_arg_1:b2ContactListener):void
        {
        }

        override public function GetManifolds():Array
        {
            return (null);
        }


    }
}//package Box2D.Dynamics.Contacts

//------------------------------------------------------------
//Box2D.Dynamics.Contacts.b2PolyAndCircleContact

package Box2D.Dynamics.Contacts
{
    import Box2D.Collision.b2ContactPoint;
    import Box2D.Collision.b2Manifold;
    import Box2D.Common.b2Settings;
    import Box2D.Collision.Shapes.b2Shape;
    import Box2D.Collision.b2ManifoldPoint;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Dynamics.b2Body;
    import Box2D.Collision.b2Collision;
    import Box2D.Collision.Shapes.b2PolygonShape;
    import Box2D.Collision.Shapes.b2CircleShape;
    import Box2D.Dynamics.b2ContactListener;
    import Box2D.Collision.Shapes.*;
    import Box2D.Dynamics.*;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Common.*;

    public class b2PolyAndCircleContact extends b2Contact 
    {

        private static const s_evalCP:b2ContactPoint = new b2ContactPoint();

        private var m_manifolds:Array = [new b2Manifold()];
        public var m_manifold:b2Manifold;
        private var m0:b2Manifold = new b2Manifold();

        public function b2PolyAndCircleContact(_arg_1:b2Shape, _arg_2:b2Shape)
        {
            super(_arg_1, _arg_2);
            this.m_manifold = this.m_manifolds[0];
            b2Settings.b2Assert((m_shape1.m_type == b2Shape.e_polygonShape));
            b2Settings.b2Assert((m_shape2.m_type == b2Shape.e_circleShape));
            this.m_manifold.pointCount = 0;
            var _local_3:b2ManifoldPoint = this.m_manifold.points[0];
            _local_3.normalImpulse = 0;
            _local_3.tangentImpulse = 0;
        }

        public static function Create(_arg_1:b2Shape, _arg_2:b2Shape, _arg_3:*):b2Contact
        {
            return (new b2PolyAndCircleContact(_arg_1, _arg_2));
        }

        public static function Destroy(_arg_1:b2Contact, _arg_2:*):void
        {
        }


        override public function Evaluate(_arg_1:b2ContactListener):void
        {
            var _local_2:int;
            var _local_3:b2Vec2;
            var _local_4:b2Vec2;
            var _local_5:b2ManifoldPoint;
            var _local_10:b2ManifoldPoint;
            var _local_11:Boolean;
            var _local_12:uint;
            var _local_13:int;
            var _local_6:b2Body = m_shape1.m_body;
            var _local_7:b2Body = m_shape2.m_body;
            this.m0.Set(this.m_manifold);
            b2Collision.b2CollidePolygonAndCircle(this.m_manifold, (m_shape1 as b2PolygonShape), _local_6.m_xf, (m_shape2 as b2CircleShape), _local_7.m_xf);
            var _local_8:Array = [false, false];
            var _local_9:b2ContactPoint = s_evalCP;
            _local_9.shape1 = m_shape1;
            _local_9.shape2 = m_shape2;
            _local_9.friction = m_friction;
            _local_9.restitution = m_restitution;
            if (this.m_manifold.pointCount > 0)
            {
                _local_2 = 0;
                while (_local_2 < this.m_manifold.pointCount)
                {
                    _local_10 = this.m_manifold.points[_local_2];
                    _local_10.normalImpulse = 0;
                    _local_10.tangentImpulse = 0;
                    _local_11 = false;
                    _local_12 = _local_10.id._key;
                    _local_13 = 0;
                    while (_local_13 < this.m0.pointCount)
                    {
                        if (_local_8[_local_13] != true)
                        {
                            _local_5 = this.m0.points[_local_13];
                            if (_local_5.id._key == _local_12)
                            {
                                _local_8[_local_13] = true;
                                _local_10.normalImpulse = _local_5.normalImpulse;
                                _local_10.tangentImpulse = _local_5.tangentImpulse;
                                _local_11 = true;
                                if (_arg_1 != null)
                                {
                                    _local_9.position = _local_6.GetWorldPoint(_local_10.localPoint1);
                                    _local_3 = _local_6.GetLinearVelocityFromLocalPoint(_local_10.localPoint1);
                                    _local_4 = _local_7.GetLinearVelocityFromLocalPoint(_local_10.localPoint2);
                                    _local_9.velocity.Set((_local_4.x - _local_3.x), (_local_4.y - _local_3.y));
                                    _local_9.normal.SetV(this.m_manifold.normal);
                                    _local_9.separation = _local_10.separation;
                                    _local_9.id.key = _local_12;
                                    _arg_1.Persist(_local_9);
                                };
                                break;
                            };
                        };
                        _local_13++;
                    };
                    if (((_local_11 == false) && (!(_arg_1 == null))))
                    {
                        _local_9.position = _local_6.GetWorldPoint(_local_10.localPoint1);
                        _local_3 = _local_6.GetLinearVelocityFromLocalPoint(_local_10.localPoint1);
                        _local_4 = _local_7.GetLinearVelocityFromLocalPoint(_local_10.localPoint2);
                        _local_9.velocity.Set((_local_4.x - _local_3.x), (_local_4.y - _local_3.y));
                        _local_9.normal.SetV(this.m_manifold.normal);
                        _local_9.separation = _local_10.separation;
                        _local_9.id.key = _local_12;
                        _arg_1.Add(_local_9);
                    };
                    _local_2++;
                };
                m_manifoldCount = 1;
            }
            else
            {
                m_manifoldCount = 0;
            };
            if (_arg_1 == null)
            {
                return;
            };
            _local_2 = 0;
            while (_local_2 < this.m0.pointCount)
            {
                if (!_local_8[_local_2])
                {
                    _local_5 = this.m0.points[_local_2];
                    _local_9.position = _local_6.GetWorldPoint(_local_5.localPoint1);
                    _local_3 = _local_6.GetLinearVelocityFromLocalPoint(_local_5.localPoint1);
                    _local_4 = _local_7.GetLinearVelocityFromLocalPoint(_local_5.localPoint2);
                    _local_9.velocity.Set((_local_4.x - _local_3.x), (_local_4.y - _local_3.y));
                    _local_9.normal.SetV(this.m0.normal);
                    _local_9.separation = _local_5.separation;
                    _local_9.id.key = _local_5.id._key;
                    _arg_1.Remove(_local_9);
                };
                _local_2++;
            };
        }

        override public function GetManifolds():Array
        {
            return (this.m_manifolds);
        }


    }
}//package Box2D.Dynamics.Contacts

//------------------------------------------------------------
//Box2D.Dynamics.Contacts.b2PolygonContact

package Box2D.Dynamics.Contacts
{
    import Box2D.Collision.b2ContactPoint;
    import Box2D.Collision.b2Manifold;
    import Box2D.Collision.Shapes.b2Shape;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Collision.b2ManifoldPoint;
    import Box2D.Dynamics.b2Body;
    import Box2D.Collision.b2Collision;
    import Box2D.Collision.Shapes.b2PolygonShape;
    import Box2D.Dynamics.b2ContactListener;
    import Box2D.Collision.Shapes.*;
    import Box2D.Dynamics.*;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Common.*;

    public class b2PolygonContact extends b2Contact 
    {

        private static const s_evalCP:b2ContactPoint = new b2ContactPoint();

        private var m0:b2Manifold = new b2Manifold();
        private var m_manifolds:Array = [new b2Manifold()];
        public var m_manifold:b2Manifold;

        public function b2PolygonContact(_arg_1:b2Shape, _arg_2:b2Shape):void
        {
            super(_arg_1, _arg_2);
            this.m_manifold = this.m_manifolds[0];
            this.m_manifold.pointCount = 0;
        }

        public static function Create(_arg_1:b2Shape, _arg_2:b2Shape, _arg_3:*):b2Contact
        {
            return (new b2PolygonContact(_arg_1, _arg_2));
        }

        public static function Destroy(_arg_1:b2Contact, _arg_2:*):void
        {
        }


        override public function Evaluate(_arg_1:b2ContactListener):void
        {
            var _local_2:b2Vec2;
            var _local_3:b2Vec2;
            var _local_4:b2ManifoldPoint;
            var _local_7:b2ContactPoint;
            var _local_8:int;
            var _local_10:b2ManifoldPoint;
            var _local_11:Boolean;
            var _local_12:uint;
            var _local_13:int;
            var _local_5:b2Body = m_shape1.m_body;
            var _local_6:b2Body = m_shape2.m_body;
            this.m0.Set(this.m_manifold);
            b2Collision.b2CollidePolygons(this.m_manifold, (m_shape1 as b2PolygonShape), _local_5.m_xf, (m_shape2 as b2PolygonShape), _local_6.m_xf);
            var _local_9:Array = [false, false];
            _local_7 = s_evalCP;
            _local_7.shape1 = m_shape1;
            _local_7.shape2 = m_shape2;
            _local_7.friction = m_friction;
            _local_7.restitution = m_restitution;
            if (this.m_manifold.pointCount > 0)
            {
                _local_8 = 0;
                while (_local_8 < this.m_manifold.pointCount)
                {
                    _local_10 = this.m_manifold.points[_local_8];
                    _local_10.normalImpulse = 0;
                    _local_10.tangentImpulse = 0;
                    _local_11 = false;
                    _local_12 = _local_10.id._key;
                    _local_13 = 0;
                    while (_local_13 < this.m0.pointCount)
                    {
                        if (_local_9[_local_13] != true)
                        {
                            _local_4 = this.m0.points[_local_13];
                            if (_local_4.id._key == _local_12)
                            {
                                _local_9[_local_13] = true;
                                _local_10.normalImpulse = _local_4.normalImpulse;
                                _local_10.tangentImpulse = _local_4.tangentImpulse;
                                _local_11 = true;
                                if (_arg_1 != null)
                                {
                                    _local_7.position = _local_5.GetWorldPoint(_local_10.localPoint1);
                                    _local_2 = _local_5.GetLinearVelocityFromLocalPoint(_local_10.localPoint1);
                                    _local_3 = _local_6.GetLinearVelocityFromLocalPoint(_local_10.localPoint2);
                                    _local_7.velocity.Set((_local_3.x - _local_2.x), (_local_3.y - _local_2.y));
                                    _local_7.normal.SetV(this.m_manifold.normal);
                                    _local_7.separation = _local_10.separation;
                                    _local_7.id.key = _local_12;
                                    _arg_1.Persist(_local_7);
                                };
                                break;
                            };
                        };
                        _local_13++;
                    };
                    if (((_local_11 == false) && (!(_arg_1 == null))))
                    {
                        _local_7.position = _local_5.GetWorldPoint(_local_10.localPoint1);
                        _local_2 = _local_5.GetLinearVelocityFromLocalPoint(_local_10.localPoint1);
                        _local_3 = _local_6.GetLinearVelocityFromLocalPoint(_local_10.localPoint2);
                        _local_7.velocity.Set((_local_3.x - _local_2.x), (_local_3.y - _local_2.y));
                        _local_7.normal.SetV(this.m_manifold.normal);
                        _local_7.separation = _local_10.separation;
                        _local_7.id.key = _local_12;
                        _arg_1.Add(_local_7);
                    };
                    _local_8++;
                };
                m_manifoldCount = 1;
            }
            else
            {
                m_manifoldCount = 0;
            };
            if (_arg_1 == null)
            {
                return;
            };
            _local_8 = 0;
            while (_local_8 < this.m0.pointCount)
            {
                if (!_local_9[_local_8])
                {
                    _local_4 = this.m0.points[_local_8];
                    _local_7.position = _local_5.GetWorldPoint(_local_4.localPoint1);
                    _local_2 = _local_5.GetLinearVelocityFromLocalPoint(_local_4.localPoint1);
                    _local_3 = _local_6.GetLinearVelocityFromLocalPoint(_local_4.localPoint2);
                    _local_7.velocity.Set((_local_3.x - _local_2.x), (_local_3.y - _local_2.y));
                    _local_7.normal.SetV(this.m0.normal);
                    _local_7.separation = _local_4.separation;
                    _local_7.id.key = _local_4.id._key;
                    _arg_1.Remove(_local_7);
                };
                _local_8++;
            };
        }

        override public function GetManifolds():Array
        {
            return (this.m_manifolds);
        }


    }
}//package Box2D.Dynamics.Contacts

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2DistanceJoint

package Box2D.Dynamics.Joints
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Dynamics.b2Body;
    import Box2D.Common.b2Settings;
    import Box2D.Dynamics.b2TimeStep;
    import Box2D.Common.Math.b2Math;

    public class b2DistanceJoint extends b2Joint 
    {

        public var m_localAnchor1:b2Vec2 = new b2Vec2();
        public var m_localAnchor2:b2Vec2 = new b2Vec2();
        public var m_u:b2Vec2 = new b2Vec2();
        public var m_frequencyHz:Number;
        public var m_dampingRatio:Number;
        public var m_gamma:Number;
        public var m_bias:Number;
        public var m_impulse:Number;
        public var m_mass:Number;
        public var m_length:Number;

        public function b2DistanceJoint(_arg_1:b2DistanceJointDef)
        {
            var _local_2:b2Mat22;
            var _local_3:Number;
            var _local_4:Number;
            super(_arg_1);
            this.m_localAnchor1.SetV(_arg_1.localAnchor1);
            this.m_localAnchor2.SetV(_arg_1.localAnchor2);
            this.m_length = _arg_1.length;
            this.m_frequencyHz = _arg_1.frequencyHz;
            this.m_dampingRatio = _arg_1.dampingRatio;
            this.m_impulse = 0;
            this.m_gamma = 0;
            this.m_bias = 0;
            m_inv_dt = 0;
        }

        override public function InitVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_2:b2Mat22;
            var _local_3:Number;
            var _local_4:b2Body;
            var _local_5:b2Body;
            var _local_6:Number;
            var _local_8:Number;
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:Number;
            var _local_18:Number;
            var _local_19:Number;
            m_inv_dt = _arg_1.inv_dt;
            _local_4 = m_body1;
            _local_5 = m_body2;
            _local_2 = _local_4.m_xf.R;
            _local_6 = (this.m_localAnchor1.x - _local_4.m_sweep.localCenter.x);
            var _local_7:Number = (this.m_localAnchor1.y - _local_4.m_sweep.localCenter.y);
            _local_3 = ((_local_2.col1.x * _local_6) + (_local_2.col2.x * _local_7));
            _local_7 = ((_local_2.col1.y * _local_6) + (_local_2.col2.y * _local_7));
            _local_6 = _local_3;
            _local_2 = _local_5.m_xf.R;
            _local_8 = (this.m_localAnchor2.x - _local_5.m_sweep.localCenter.x);
            var _local_9:Number = (this.m_localAnchor2.y - _local_5.m_sweep.localCenter.y);
            _local_3 = ((_local_2.col1.x * _local_8) + (_local_2.col2.x * _local_9));
            _local_9 = ((_local_2.col1.y * _local_8) + (_local_2.col2.y * _local_9));
            _local_8 = _local_3;
            this.m_u.x = (((_local_5.m_sweep.c.x + _local_8) - _local_4.m_sweep.c.x) - _local_6);
            this.m_u.y = (((_local_5.m_sweep.c.y + _local_9) - _local_4.m_sweep.c.y) - _local_7);
            var _local_10:Number = Math.sqrt(((this.m_u.x * this.m_u.x) + (this.m_u.y * this.m_u.y)));
            if (_local_10 > b2Settings.b2_linearSlop)
            {
                this.m_u.Multiply((1 / _local_10));
            }
            else
            {
                this.m_u.SetZero();
            };
            var _local_11:Number = ((_local_6 * this.m_u.y) - (_local_7 * this.m_u.x));
            var _local_12:Number = ((_local_8 * this.m_u.y) - (_local_9 * this.m_u.x));
            var _local_13:Number = (((_local_4.m_invMass + ((_local_4.m_invI * _local_11) * _local_11)) + _local_5.m_invMass) + ((_local_5.m_invI * _local_12) * _local_12));
            this.m_mass = (1 / _local_13);
            if (this.m_frequencyHz > 0)
            {
                _local_14 = (_local_10 - this.m_length);
                _local_15 = ((2 * Math.PI) * this.m_frequencyHz);
                _local_16 = (((2 * this.m_mass) * this.m_dampingRatio) * _local_15);
                _local_17 = ((this.m_mass * _local_15) * _local_15);
                this.m_gamma = (1 / (_arg_1.dt * (_local_16 + (_arg_1.dt * _local_17))));
                this.m_bias = (((_local_14 * _arg_1.dt) * _local_17) * this.m_gamma);
                this.m_mass = (1 / (_local_13 + this.m_gamma));
            };
            if (_arg_1.warmStarting)
            {
                this.m_impulse = (this.m_impulse * _arg_1.dtRatio);
                _local_18 = (this.m_impulse * this.m_u.x);
                _local_19 = (this.m_impulse * this.m_u.y);
                _local_4.m_linearVelocity.x = (_local_4.m_linearVelocity.x - (_local_4.m_invMass * _local_18));
                _local_4.m_linearVelocity.y = (_local_4.m_linearVelocity.y - (_local_4.m_invMass * _local_19));
                _local_4.m_angularVelocity = (_local_4.m_angularVelocity - (_local_4.m_invI * ((_local_6 * _local_19) - (_local_7 * _local_18))));
                _local_5.m_linearVelocity.x = (_local_5.m_linearVelocity.x + (_local_5.m_invMass * _local_18));
                _local_5.m_linearVelocity.y = (_local_5.m_linearVelocity.y + (_local_5.m_invMass * _local_19));
                _local_5.m_angularVelocity = (_local_5.m_angularVelocity + (_local_5.m_invI * ((_local_8 * _local_19) - (_local_9 * _local_18))));
            }
            else
            {
                this.m_impulse = 0;
            };
        }

        override public function SolveVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_2:b2Mat22;
            var _local_3:b2Body = m_body1;
            var _local_4:b2Body = m_body2;
            _local_2 = _local_3.m_xf.R;
            var _local_5:Number = (this.m_localAnchor1.x - _local_3.m_sweep.localCenter.x);
            var _local_6:Number = (this.m_localAnchor1.y - _local_3.m_sweep.localCenter.y);
            var _local_7:Number = ((_local_2.col1.x * _local_5) + (_local_2.col2.x * _local_6));
            _local_6 = ((_local_2.col1.y * _local_5) + (_local_2.col2.y * _local_6));
            _local_5 = _local_7;
            _local_2 = _local_4.m_xf.R;
            var _local_8:Number = (this.m_localAnchor2.x - _local_4.m_sweep.localCenter.x);
            var _local_9:Number = (this.m_localAnchor2.y - _local_4.m_sweep.localCenter.y);
            _local_7 = ((_local_2.col1.x * _local_8) + (_local_2.col2.x * _local_9));
            _local_9 = ((_local_2.col1.y * _local_8) + (_local_2.col2.y * _local_9));
            _local_8 = _local_7;
            var _local_10:Number = (_local_3.m_linearVelocity.x + (-(_local_3.m_angularVelocity) * _local_6));
            var _local_11:Number = (_local_3.m_linearVelocity.y + (_local_3.m_angularVelocity * _local_5));
            var _local_12:Number = (_local_4.m_linearVelocity.x + (-(_local_4.m_angularVelocity) * _local_9));
            var _local_13:Number = (_local_4.m_linearVelocity.y + (_local_4.m_angularVelocity * _local_8));
            var _local_14:Number = ((this.m_u.x * (_local_12 - _local_10)) + (this.m_u.y * (_local_13 - _local_11)));
            var _local_15:Number = (-(this.m_mass) * ((_local_14 + this.m_bias) + (this.m_gamma * this.m_impulse)));
            this.m_impulse = (this.m_impulse + _local_15);
            var _local_16:Number = (_local_15 * this.m_u.x);
            var _local_17:Number = (_local_15 * this.m_u.y);
            _local_3.m_linearVelocity.x = (_local_3.m_linearVelocity.x - (_local_3.m_invMass * _local_16));
            _local_3.m_linearVelocity.y = (_local_3.m_linearVelocity.y - (_local_3.m_invMass * _local_17));
            _local_3.m_angularVelocity = (_local_3.m_angularVelocity - (_local_3.m_invI * ((_local_5 * _local_17) - (_local_6 * _local_16))));
            _local_4.m_linearVelocity.x = (_local_4.m_linearVelocity.x + (_local_4.m_invMass * _local_16));
            _local_4.m_linearVelocity.y = (_local_4.m_linearVelocity.y + (_local_4.m_invMass * _local_17));
            _local_4.m_angularVelocity = (_local_4.m_angularVelocity + (_local_4.m_invI * ((_local_8 * _local_17) - (_local_9 * _local_16))));
        }

        override public function SolvePositionConstraints():Boolean
        {
            var _local_1:b2Mat22;
            if (this.m_frequencyHz > 0)
            {
                return (true);
            };
            var _local_2:b2Body = m_body1;
            var _local_3:b2Body = m_body2;
            _local_1 = _local_2.m_xf.R;
            var _local_4:Number = (this.m_localAnchor1.x - _local_2.m_sweep.localCenter.x);
            var _local_5:Number = (this.m_localAnchor1.y - _local_2.m_sweep.localCenter.y);
            var _local_6:Number = ((_local_1.col1.x * _local_4) + (_local_1.col2.x * _local_5));
            _local_5 = ((_local_1.col1.y * _local_4) + (_local_1.col2.y * _local_5));
            _local_4 = _local_6;
            _local_1 = _local_3.m_xf.R;
            var _local_7:Number = (this.m_localAnchor2.x - _local_3.m_sweep.localCenter.x);
            var _local_8:Number = (this.m_localAnchor2.y - _local_3.m_sweep.localCenter.y);
            _local_6 = ((_local_1.col1.x * _local_7) + (_local_1.col2.x * _local_8));
            _local_8 = ((_local_1.col1.y * _local_7) + (_local_1.col2.y * _local_8));
            _local_7 = _local_6;
            var _local_9:Number = (((_local_3.m_sweep.c.x + _local_7) - _local_2.m_sweep.c.x) - _local_4);
            var _local_10:Number = (((_local_3.m_sweep.c.y + _local_8) - _local_2.m_sweep.c.y) - _local_5);
            var _local_11:Number = Math.sqrt(((_local_9 * _local_9) + (_local_10 * _local_10)));
            _local_9 = (_local_9 / _local_11);
            _local_10 = (_local_10 / _local_11);
            var _local_12:Number = (_local_11 - this.m_length);
            _local_12 = b2Math.b2Clamp(_local_12, -(b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
            var _local_13:Number = (-(this.m_mass) * _local_12);
            this.m_u.Set(_local_9, _local_10);
            var _local_14:Number = (_local_13 * this.m_u.x);
            var _local_15:Number = (_local_13 * this.m_u.y);
            _local_2.m_sweep.c.x = (_local_2.m_sweep.c.x - (_local_2.m_invMass * _local_14));
            _local_2.m_sweep.c.y = (_local_2.m_sweep.c.y - (_local_2.m_invMass * _local_15));
            _local_2.m_sweep.a = (_local_2.m_sweep.a - (_local_2.m_invI * ((_local_4 * _local_15) - (_local_5 * _local_14))));
            _local_3.m_sweep.c.x = (_local_3.m_sweep.c.x + (_local_3.m_invMass * _local_14));
            _local_3.m_sweep.c.y = (_local_3.m_sweep.c.y + (_local_3.m_invMass * _local_15));
            _local_3.m_sweep.a = (_local_3.m_sweep.a + (_local_3.m_invI * ((_local_7 * _local_15) - (_local_8 * _local_14))));
            _local_2.SynchronizeTransform();
            _local_3.SynchronizeTransform();
            return (b2Math.b2Abs(_local_12) < b2Settings.b2_linearSlop);
        }

        override public function GetAnchor1():b2Vec2
        {
            return (m_body1.GetWorldPoint(this.m_localAnchor1));
        }

        override public function GetAnchor2():b2Vec2
        {
            return (m_body2.GetWorldPoint(this.m_localAnchor2));
        }

        override public function GetReactionForce():b2Vec2
        {
            var _local_1:b2Vec2 = new b2Vec2();
            _local_1.SetV(this.m_u);
            _local_1.Multiply((m_inv_dt * this.m_impulse));
            return (_local_1);
        }

        override public function GetReactionTorque():Number
        {
            return (0);
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2DistanceJointDef

package Box2D.Dynamics.Joints
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Dynamics.b2Body;

    public class b2DistanceJointDef extends b2JointDef 
    {

        public var localAnchor1:b2Vec2 = new b2Vec2();
        public var localAnchor2:b2Vec2 = new b2Vec2();
        public var length:Number;
        public var frequencyHz:Number;
        public var dampingRatio:Number;

        public function b2DistanceJointDef()
        {
            type = b2Joint.e_distanceJoint;
            this.length = 1;
            this.frequencyHz = 0;
            this.dampingRatio = 0;
        }

        public function Initialize(_arg_1:b2Body, _arg_2:b2Body, _arg_3:b2Vec2, _arg_4:b2Vec2):void
        {
            body1 = _arg_1;
            body2 = _arg_2;
            this.localAnchor1.SetV(body1.GetLocalPoint(_arg_3));
            this.localAnchor2.SetV(body2.GetLocalPoint(_arg_4));
            var _local_5:Number = (_arg_4.x - _arg_3.x);
            var _local_6:Number = (_arg_4.y - _arg_3.y);
            this.length = Math.sqrt(((_local_5 * _local_5) + (_local_6 * _local_6)));
            this.frequencyHz = 0;
            this.dampingRatio = 0;
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2GearJoint

package Box2D.Dynamics.Joints
{
    import Box2D.Dynamics.b2Body;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Dynamics.b2TimeStep;
    import Box2D.Common.b2Settings;

    public class b2GearJoint extends b2Joint 
    {

        public var m_ground1:b2Body;
        public var m_ground2:b2Body;
        public var m_revolute1:b2RevoluteJoint;
        public var m_prismatic1:b2PrismaticJoint;
        public var m_revolute2:b2RevoluteJoint;
        public var m_prismatic2:b2PrismaticJoint;
        public var m_groundAnchor1:b2Vec2 = new b2Vec2();
        public var m_groundAnchor2:b2Vec2 = new b2Vec2();
        public var m_localAnchor1:b2Vec2 = new b2Vec2();
        public var m_localAnchor2:b2Vec2 = new b2Vec2();
        public var m_J:b2Jacobian = new b2Jacobian();
        public var m_constant:Number;
        public var m_ratio:Number;
        public var m_mass:Number;
        public var m_force:Number;

        public function b2GearJoint(_arg_1:b2GearJointDef)
        {
            var _local_4:Number;
            var _local_5:Number;
            super(_arg_1);
            var _local_2:int = _arg_1.joint1.m_type;
            var _local_3:int = _arg_1.joint2.m_type;
            this.m_revolute1 = null;
            this.m_prismatic1 = null;
            this.m_revolute2 = null;
            this.m_prismatic2 = null;
            this.m_ground1 = _arg_1.joint1.m_body1;
            m_body1 = _arg_1.joint1.m_body2;
            if (_local_2 == b2Joint.e_revoluteJoint)
            {
                this.m_revolute1 = (_arg_1.joint1 as b2RevoluteJoint);
                this.m_groundAnchor1.SetV(this.m_revolute1.m_localAnchor1);
                this.m_localAnchor1.SetV(this.m_revolute1.m_localAnchor2);
                _local_4 = this.m_revolute1.GetJointAngle();
            }
            else
            {
                this.m_prismatic1 = (_arg_1.joint1 as b2PrismaticJoint);
                this.m_groundAnchor1.SetV(this.m_prismatic1.m_localAnchor1);
                this.m_localAnchor1.SetV(this.m_prismatic1.m_localAnchor2);
                _local_4 = this.m_prismatic1.GetJointTranslation();
            };
            this.m_ground2 = _arg_1.joint2.m_body1;
            m_body2 = _arg_1.joint2.m_body2;
            if (_local_3 == b2Joint.e_revoluteJoint)
            {
                this.m_revolute2 = (_arg_1.joint2 as b2RevoluteJoint);
                this.m_groundAnchor2.SetV(this.m_revolute2.m_localAnchor1);
                this.m_localAnchor2.SetV(this.m_revolute2.m_localAnchor2);
                _local_5 = this.m_revolute2.GetJointAngle();
            }
            else
            {
                this.m_prismatic2 = (_arg_1.joint2 as b2PrismaticJoint);
                this.m_groundAnchor2.SetV(this.m_prismatic2.m_localAnchor1);
                this.m_localAnchor2.SetV(this.m_prismatic2.m_localAnchor2);
                _local_5 = this.m_prismatic2.GetJointTranslation();
            };
            this.m_ratio = _arg_1.ratio;
            this.m_constant = (_local_4 + (this.m_ratio * _local_5));
            this.m_force = 0;
        }

        override public function GetAnchor1():b2Vec2
        {
            return (m_body1.GetWorldPoint(this.m_localAnchor1));
        }

        override public function GetAnchor2():b2Vec2
        {
            return (m_body2.GetWorldPoint(this.m_localAnchor2));
        }

        override public function GetReactionForce():b2Vec2
        {
            return (new b2Vec2((this.m_force * this.m_J.linear2.x), (this.m_force * this.m_J.linear2.y)));
        }

        override public function GetReactionTorque():Number
        {
            var _local_1:b2Mat22 = m_body2.m_xf.R;
            var _local_2:Number = (this.m_localAnchor1.x - m_body2.m_sweep.localCenter.x);
            var _local_3:Number = (this.m_localAnchor1.y - m_body2.m_sweep.localCenter.y);
            var _local_4:Number = ((_local_1.col1.x * _local_2) + (_local_1.col2.x * _local_3));
            _local_3 = ((_local_1.col1.y * _local_2) + (_local_1.col2.y * _local_3));
            _local_2 = _local_4;
            _local_4 = ((this.m_force * this.m_J.angular2) - ((_local_2 * (this.m_force * this.m_J.linear2.y)) - (_local_3 * (this.m_force * this.m_J.linear2.x))));
            return (_local_4);
        }

        public function GetRatio():Number
        {
            return (this.m_ratio);
        }

        override public function InitVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_6:Number;
            var _local_7:Number;
            var _local_8:Number;
            var _local_9:Number;
            var _local_10:b2Mat22;
            var _local_11:b2Vec2;
            var _local_12:Number;
            var _local_13:Number;
            var _local_15:Number;
            var _local_2:b2Body = this.m_ground1;
            var _local_3:b2Body = this.m_ground2;
            var _local_4:b2Body = m_body1;
            var _local_5:b2Body = m_body2;
            var _local_14:Number = 0;
            this.m_J.SetZero();
            if (this.m_revolute1)
            {
                this.m_J.angular1 = -1;
                _local_14 = (_local_14 + _local_4.m_invI);
            }
            else
            {
                _local_10 = _local_2.m_xf.R;
                _local_11 = this.m_prismatic1.m_localXAxis1;
                _local_6 = ((_local_10.col1.x * _local_11.x) + (_local_10.col2.x * _local_11.y));
                _local_7 = ((_local_10.col1.y * _local_11.x) + (_local_10.col2.y * _local_11.y));
                _local_10 = _local_4.m_xf.R;
                _local_8 = (this.m_localAnchor1.x - _local_4.m_sweep.localCenter.x);
                _local_9 = (this.m_localAnchor1.y - _local_4.m_sweep.localCenter.y);
                _local_13 = ((_local_10.col1.x * _local_8) + (_local_10.col2.x * _local_9));
                _local_9 = ((_local_10.col1.y * _local_8) + (_local_10.col2.y * _local_9));
                _local_8 = _local_13;
                _local_12 = ((_local_8 * _local_7) - (_local_9 * _local_6));
                this.m_J.linear1.Set(-(_local_6), -(_local_7));
                this.m_J.angular1 = -(_local_12);
                _local_14 = (_local_14 + (_local_4.m_invMass + ((_local_4.m_invI * _local_12) * _local_12)));
            };
            if (this.m_revolute2)
            {
                this.m_J.angular2 = -(this.m_ratio);
                _local_14 = (_local_14 + ((this.m_ratio * this.m_ratio) * _local_5.m_invI));
            }
            else
            {
                _local_10 = _local_3.m_xf.R;
                _local_11 = this.m_prismatic2.m_localXAxis1;
                _local_6 = ((_local_10.col1.x * _local_11.x) + (_local_10.col2.x * _local_11.y));
                _local_7 = ((_local_10.col1.y * _local_11.x) + (_local_10.col2.y * _local_11.y));
                _local_10 = _local_5.m_xf.R;
                _local_8 = (this.m_localAnchor2.x - _local_5.m_sweep.localCenter.x);
                _local_9 = (this.m_localAnchor2.y - _local_5.m_sweep.localCenter.y);
                _local_13 = ((_local_10.col1.x * _local_8) + (_local_10.col2.x * _local_9));
                _local_9 = ((_local_10.col1.y * _local_8) + (_local_10.col2.y * _local_9));
                _local_8 = _local_13;
                _local_12 = ((_local_8 * _local_7) - (_local_9 * _local_6));
                this.m_J.linear2.Set((-(this.m_ratio) * _local_6), (-(this.m_ratio) * _local_7));
                this.m_J.angular2 = (-(this.m_ratio) * _local_12);
                _local_14 = (_local_14 + ((this.m_ratio * this.m_ratio) * (_local_5.m_invMass + ((_local_5.m_invI * _local_12) * _local_12))));
            };
            this.m_mass = (1 / _local_14);
            if (_arg_1.warmStarting)
            {
                _local_15 = (_arg_1.dt * this.m_force);
                _local_4.m_linearVelocity.x = (_local_4.m_linearVelocity.x + ((_local_4.m_invMass * _local_15) * this.m_J.linear1.x));
                _local_4.m_linearVelocity.y = (_local_4.m_linearVelocity.y + ((_local_4.m_invMass * _local_15) * this.m_J.linear1.y));
                _local_4.m_angularVelocity = (_local_4.m_angularVelocity + ((_local_4.m_invI * _local_15) * this.m_J.angular1));
                _local_5.m_linearVelocity.x = (_local_5.m_linearVelocity.x + ((_local_5.m_invMass * _local_15) * this.m_J.linear2.x));
                _local_5.m_linearVelocity.y = (_local_5.m_linearVelocity.y + ((_local_5.m_invMass * _local_15) * this.m_J.linear2.y));
                _local_5.m_angularVelocity = (_local_5.m_angularVelocity + ((_local_5.m_invI * _local_15) * this.m_J.angular2));
            }
            else
            {
                this.m_force = 0;
            };
        }

        override public function SolveVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_2:b2Body = m_body1;
            var _local_3:b2Body = m_body2;
            var _local_4:Number = this.m_J.Compute(_local_2.m_linearVelocity, _local_2.m_angularVelocity, _local_3.m_linearVelocity, _local_3.m_angularVelocity);
            var _local_5:Number = ((-(_arg_1.inv_dt) * this.m_mass) * _local_4);
            this.m_force = (this.m_force + _local_5);
            var _local_6:Number = (_arg_1.dt * _local_5);
            _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x + ((_local_2.m_invMass * _local_6) * this.m_J.linear1.x));
            _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y + ((_local_2.m_invMass * _local_6) * this.m_J.linear1.y));
            _local_2.m_angularVelocity = (_local_2.m_angularVelocity + ((_local_2.m_invI * _local_6) * this.m_J.angular1));
            _local_3.m_linearVelocity.x = (_local_3.m_linearVelocity.x + ((_local_3.m_invMass * _local_6) * this.m_J.linear2.x));
            _local_3.m_linearVelocity.y = (_local_3.m_linearVelocity.y + ((_local_3.m_invMass * _local_6) * this.m_J.linear2.y));
            _local_3.m_angularVelocity = (_local_3.m_angularVelocity + ((_local_3.m_invI * _local_6) * this.m_J.angular2));
        }

        override public function SolvePositionConstraints():Boolean
        {
            var _local_4:Number;
            var _local_5:Number;
            var _local_1:Number = 0;
            var _local_2:b2Body = m_body1;
            var _local_3:b2Body = m_body2;
            if (this.m_revolute1)
            {
                _local_4 = this.m_revolute1.GetJointAngle();
            }
            else
            {
                _local_4 = this.m_prismatic1.GetJointTranslation();
            };
            if (this.m_revolute2)
            {
                _local_5 = this.m_revolute2.GetJointAngle();
            }
            else
            {
                _local_5 = this.m_prismatic2.GetJointTranslation();
            };
            var _local_6:Number = (this.m_constant - (_local_4 + (this.m_ratio * _local_5)));
            var _local_7:Number = (-(this.m_mass) * _local_6);
            _local_2.m_sweep.c.x = (_local_2.m_sweep.c.x + ((_local_2.m_invMass * _local_7) * this.m_J.linear1.x));
            _local_2.m_sweep.c.y = (_local_2.m_sweep.c.y + ((_local_2.m_invMass * _local_7) * this.m_J.linear1.y));
            _local_2.m_sweep.a = (_local_2.m_sweep.a + ((_local_2.m_invI * _local_7) * this.m_J.angular1));
            _local_3.m_sweep.c.x = (_local_3.m_sweep.c.x + ((_local_3.m_invMass * _local_7) * this.m_J.linear2.x));
            _local_3.m_sweep.c.y = (_local_3.m_sweep.c.y + ((_local_3.m_invMass * _local_7) * this.m_J.linear2.y));
            _local_3.m_sweep.a = (_local_3.m_sweep.a + ((_local_3.m_invI * _local_7) * this.m_J.angular2));
            _local_2.SynchronizeTransform();
            _local_3.SynchronizeTransform();
            return (_local_1 < b2Settings.b2_linearSlop);
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2GearJointDef

package Box2D.Dynamics.Joints
{
    public class b2GearJointDef extends b2JointDef 
    {

        public var joint1:b2Joint;
        public var joint2:b2Joint;
        public var ratio:Number;

        public function b2GearJointDef()
        {
            type = b2Joint.e_gearJoint;
            this.joint1 = null;
            this.joint2 = null;
            this.ratio = 1;
        }

    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2Jacobian

package Box2D.Dynamics.Joints
{
    import Box2D.Common.Math.b2Vec2;

    public class b2Jacobian 
    {

        public var linear1:b2Vec2 = new b2Vec2();
        public var angular1:Number;
        public var linear2:b2Vec2 = new b2Vec2();
        public var angular2:Number;


        public function SetZero():void
        {
            this.linear1.SetZero();
            this.angular1 = 0;
            this.linear2.SetZero();
            this.angular2 = 0;
        }

        public function Set(_arg_1:b2Vec2, _arg_2:Number, _arg_3:b2Vec2, _arg_4:Number):void
        {
            this.linear1.SetV(_arg_1);
            this.angular1 = _arg_2;
            this.linear2.SetV(_arg_3);
            this.angular2 = _arg_4;
        }

        public function Compute(_arg_1:b2Vec2, _arg_2:Number, _arg_3:b2Vec2, _arg_4:Number):Number
        {
            return (((((this.linear1.x * _arg_1.x) + (this.linear1.y * _arg_1.y)) + (this.angular1 * _arg_2)) + ((this.linear2.x * _arg_3.x) + (this.linear2.y * _arg_3.y))) + (this.angular2 * _arg_4));
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2Joint

package Box2D.Dynamics.Joints
{
    import Box2D.Dynamics.b2Body;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Dynamics.b2TimeStep;

    public class b2Joint 
    {

        public static const e_unknownJoint:int = 0;
        public static const e_revoluteJoint:int = 1;
        public static const e_prismaticJoint:int = 2;
        public static const e_distanceJoint:int = 3;
        public static const e_pulleyJoint:int = 4;
        public static const e_mouseJoint:int = 5;
        public static const e_gearJoint:int = 6;
        public static const e_inactiveLimit:int = 0;
        public static const e_atLowerLimit:int = 1;
        public static const e_atUpperLimit:int = 2;
        public static const e_equalLimits:int = 3;

        public var m_type:int;
        public var m_prev:b2Joint;
        public var m_next:b2Joint;
        public var m_node1:b2JointEdge = new b2JointEdge();
        public var m_node2:b2JointEdge = new b2JointEdge();
        public var m_body1:b2Body;
        public var m_body2:b2Body;
        public var m_inv_dt:Number;
        public var m_islandFlag:Boolean;
        public var m_collideConnected:Boolean;
        public var m_userData:*;

        public function b2Joint(_arg_1:b2JointDef)
        {
            this.m_type = _arg_1.type;
            this.m_prev = null;
            this.m_next = null;
            this.m_body1 = _arg_1.body1;
            this.m_body2 = _arg_1.body2;
            this.m_collideConnected = _arg_1.collideConnected;
            this.m_islandFlag = false;
            this.m_userData = _arg_1.userData;
        }

        public static function Create(_arg_1:b2JointDef, _arg_2:*):b2Joint
        {
            var _local_3:b2Joint;
            switch (_arg_1.type)
            {
                case e_distanceJoint:
                    _local_3 = new b2DistanceJoint((_arg_1 as b2DistanceJointDef));
                    break;
                case e_mouseJoint:
                    _local_3 = new b2MouseJoint((_arg_1 as b2MouseJointDef));
                    break;
                case e_prismaticJoint:
                    _local_3 = new b2PrismaticJoint((_arg_1 as b2PrismaticJointDef));
                    break;
                case e_revoluteJoint:
                    _local_3 = new b2RevoluteJoint((_arg_1 as b2RevoluteJointDef));
                    break;
                case e_pulleyJoint:
                    _local_3 = new b2PulleyJoint((_arg_1 as b2PulleyJointDef));
                    break;
                case e_gearJoint:
                    _local_3 = new b2GearJoint((_arg_1 as b2GearJointDef));
                    break;
            };
            return (_local_3);
        }

        public static function Destroy(_arg_1:b2Joint, _arg_2:*):void
        {
        }


        public function GetType():int
        {
            return (this.m_type);
        }

        public function GetAnchor1():b2Vec2
        {
            return (null);
        }

        public function GetAnchor2():b2Vec2
        {
            return (null);
        }

        public function GetReactionForce():b2Vec2
        {
            return (null);
        }

        public function GetReactionTorque():Number
        {
            return (0);
        }

        public function GetBody1():b2Body
        {
            return (this.m_body1);
        }

        public function GetBody2():b2Body
        {
            return (this.m_body2);
        }

        public function GetNext():b2Joint
        {
            return (this.m_next);
        }

        public function GetUserData():*
        {
            return (this.m_userData);
        }

        public function SetUserData(_arg_1:*):void
        {
            this.m_userData = _arg_1;
        }

        public function InitVelocityConstraints(_arg_1:b2TimeStep):void
        {
        }

        public function SolveVelocityConstraints(_arg_1:b2TimeStep):void
        {
        }

        public function InitPositionConstraints():void
        {
        }

        public function SolvePositionConstraints():Boolean
        {
            return (false);
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2JointDef

package Box2D.Dynamics.Joints
{
    import Box2D.Dynamics.b2Body;

    public class b2JointDef 
    {

        public var type:int;
        public var userData:*;
        public var body1:b2Body;
        public var body2:b2Body;
        public var collideConnected:Boolean;

        public function b2JointDef()
        {
            this.type = b2Joint.e_unknownJoint;
            this.userData = null;
            this.body1 = null;
            this.body2 = null;
            this.collideConnected = false;
        }

    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2JointEdge

package Box2D.Dynamics.Joints
{
    import Box2D.Dynamics.b2Body;

    public class b2JointEdge 
    {

        public var other:b2Body;
        public var joint:b2Joint;
        public var prev:b2JointEdge;
        public var next:b2JointEdge;


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2MouseJoint

package Box2D.Dynamics.Joints
{
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.b2Settings;
    import Box2D.Dynamics.b2Body;
    import Box2D.Dynamics.b2TimeStep;

    public class b2MouseJoint extends b2Joint 
    {

        private var K:b2Mat22 = new b2Mat22();
        private var K1:b2Mat22 = new b2Mat22();
        private var K2:b2Mat22 = new b2Mat22();
        public var m_localAnchor:b2Vec2 = new b2Vec2();
        public var m_target:b2Vec2 = new b2Vec2();
        public var m_impulse:b2Vec2 = new b2Vec2();
        public var m_mass:b2Mat22 = new b2Mat22();
        public var m_C:b2Vec2 = new b2Vec2();
        public var m_maxForce:Number;
        public var m_beta:Number;
        public var m_gamma:Number;

        public function b2MouseJoint(_arg_1:b2MouseJointDef)
        {
            var _local_3:Number;
            super(_arg_1);
            this.m_target.SetV(_arg_1.target);
            var _local_2:Number = (this.m_target.x - m_body2.m_xf.position.x);
            _local_3 = (this.m_target.y - m_body2.m_xf.position.y);
            var _local_4:b2Mat22 = m_body2.m_xf.R;
            this.m_localAnchor.x = ((_local_2 * _local_4.col1.x) + (_local_3 * _local_4.col1.y));
            this.m_localAnchor.y = ((_local_2 * _local_4.col2.x) + (_local_3 * _local_4.col2.y));
            this.m_maxForce = _arg_1.maxForce;
            this.m_impulse.SetZero();
            var _local_5:Number = m_body2.m_mass;
            var _local_6:Number = ((2 * b2Settings.b2_pi) * _arg_1.frequencyHz);
            var _local_7:Number = (((2 * _local_5) * _arg_1.dampingRatio) * _local_6);
            var _local_8:Number = ((_arg_1.timeStep * _local_5) * (_local_6 * _local_6));
            this.m_gamma = (1 / (_local_7 + _local_8));
            this.m_beta = (_local_8 / (_local_7 + _local_8));
        }

        override public function GetAnchor1():b2Vec2
        {
            return (this.m_target);
        }

        override public function GetAnchor2():b2Vec2
        {
            return (m_body2.GetWorldPoint(this.m_localAnchor));
        }

        override public function GetReactionForce():b2Vec2
        {
            return (this.m_impulse);
        }

        override public function GetReactionTorque():Number
        {
            return (0);
        }

        public function SetTarget(_arg_1:b2Vec2):void
        {
            if (m_body2.IsSleeping())
            {
                m_body2.WakeUp();
            };
            this.m_target = _arg_1;
        }

        override public function InitVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_2:b2Body;
            var _local_3:b2Mat22;
            var _local_4:Number;
            var _local_5:Number;
            var _local_7:Number;
            var _local_8:Number;
            _local_2 = m_body2;
            _local_3 = _local_2.m_xf.R;
            _local_4 = (this.m_localAnchor.x - _local_2.m_sweep.localCenter.x);
            _local_5 = (this.m_localAnchor.y - _local_2.m_sweep.localCenter.y);
            var _local_6:Number = ((_local_3.col1.x * _local_4) + (_local_3.col2.x * _local_5));
            _local_5 = ((_local_3.col1.y * _local_4) + (_local_3.col2.y * _local_5));
            _local_4 = _local_6;
            _local_7 = _local_2.m_invMass;
            _local_8 = _local_2.m_invI;
            this.K1.col1.x = _local_7;
            this.K1.col2.x = 0;
            this.K1.col1.y = 0;
            this.K1.col2.y = _local_7;
            this.K2.col1.x = ((_local_8 * _local_5) * _local_5);
            this.K2.col2.x = ((-(_local_8) * _local_4) * _local_5);
            this.K2.col1.y = ((-(_local_8) * _local_4) * _local_5);
            this.K2.col2.y = ((_local_8 * _local_4) * _local_4);
            this.K.SetM(this.K1);
            this.K.AddM(this.K2);
            this.K.col1.x = (this.K.col1.x + this.m_gamma);
            this.K.col2.y = (this.K.col2.y + this.m_gamma);
            this.K.Invert(this.m_mass);
            this.m_C.x = ((_local_2.m_sweep.c.x + _local_4) - this.m_target.x);
            this.m_C.y = ((_local_2.m_sweep.c.y + _local_5) - this.m_target.y);
            _local_2.m_angularVelocity = (_local_2.m_angularVelocity * 0.98);
            var _local_9:Number = (_arg_1.dt * this.m_impulse.x);
            var _local_10:Number = (_arg_1.dt * this.m_impulse.y);
            _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x + (_local_7 * _local_9));
            _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y + (_local_7 * _local_10));
            _local_2.m_angularVelocity = (_local_2.m_angularVelocity + (_local_8 * ((_local_4 * _local_10) - (_local_5 * _local_9))));
        }

        override public function SolveVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_3:b2Mat22;
            var _local_4:Number;
            var _local_5:Number;
            var _local_2:b2Body = m_body2;
            _local_3 = _local_2.m_xf.R;
            var _local_6:Number = (this.m_localAnchor.x - _local_2.m_sweep.localCenter.x);
            var _local_7:Number = (this.m_localAnchor.y - _local_2.m_sweep.localCenter.y);
            _local_4 = ((_local_3.col1.x * _local_6) + (_local_3.col2.x * _local_7));
            _local_7 = ((_local_3.col1.y * _local_6) + (_local_3.col2.y * _local_7));
            _local_6 = _local_4;
            var _local_8:Number = (_local_2.m_linearVelocity.x + (-(_local_2.m_angularVelocity) * _local_7));
            var _local_9:Number = (_local_2.m_linearVelocity.y + (_local_2.m_angularVelocity * _local_6));
            _local_3 = this.m_mass;
            _local_4 = ((_local_8 + ((this.m_beta * _arg_1.inv_dt) * this.m_C.x)) + ((this.m_gamma * _arg_1.dt) * this.m_impulse.x));
            _local_5 = ((_local_9 + ((this.m_beta * _arg_1.inv_dt) * this.m_C.y)) + ((this.m_gamma * _arg_1.dt) * this.m_impulse.y));
            var _local_10:Number = (-(_arg_1.inv_dt) * ((_local_3.col1.x * _local_4) + (_local_3.col2.x * _local_5)));
            var _local_11:Number = (-(_arg_1.inv_dt) * ((_local_3.col1.y * _local_4) + (_local_3.col2.y * _local_5)));
            var _local_12:Number = this.m_impulse.x;
            var _local_13:Number = this.m_impulse.y;
            this.m_impulse.x = (this.m_impulse.x + _local_10);
            this.m_impulse.y = (this.m_impulse.y + _local_11);
            var _local_14:Number = this.m_impulse.Length();
            if (_local_14 > this.m_maxForce)
            {
                this.m_impulse.Multiply((this.m_maxForce / _local_14));
            };
            _local_10 = (this.m_impulse.x - _local_12);
            _local_11 = (this.m_impulse.y - _local_13);
            var _local_15:Number = (_arg_1.dt * _local_10);
            var _local_16:Number = (_arg_1.dt * _local_11);
            _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x + (_local_2.m_invMass * _local_15));
            _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y + (_local_2.m_invMass * _local_16));
            _local_2.m_angularVelocity = (_local_2.m_angularVelocity + (_local_2.m_invI * ((_local_6 * _local_16) - (_local_7 * _local_15))));
        }

        override public function SolvePositionConstraints():Boolean
        {
            return (true);
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2MouseJointDef

package Box2D.Dynamics.Joints
{
    import Box2D.Common.Math.b2Vec2;

    public class b2MouseJointDef extends b2JointDef 
    {

        public var target:b2Vec2 = new b2Vec2();
        public var maxForce:Number;
        public var frequencyHz:Number;
        public var dampingRatio:Number;
        public var timeStep:Number;

        public function b2MouseJointDef()
        {
            type = b2Joint.e_mouseJoint;
            this.maxForce = 0;
            this.frequencyHz = 5;
            this.dampingRatio = 0.7;
            this.timeStep = (1 / 60);
        }

    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2PrismaticJoint

package Box2D.Dynamics.Joints
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Dynamics.b2Body;
    import Box2D.Common.Math.b2Math;
    import Box2D.Common.b2Settings;
    import Box2D.Dynamics.b2TimeStep;

    public class b2PrismaticJoint extends b2Joint 
    {

        public var m_localAnchor1:b2Vec2 = new b2Vec2();
        public var m_localAnchor2:b2Vec2 = new b2Vec2();
        public var m_localXAxis1:b2Vec2 = new b2Vec2();
        public var m_localYAxis1:b2Vec2 = new b2Vec2();
        public var m_refAngle:Number;
        public var m_linearJacobian:b2Jacobian = new b2Jacobian();
        public var m_linearMass:Number;
        public var m_force:Number;
        public var m_angularMass:Number;
        public var m_torque:Number;
        public var m_motorJacobian:b2Jacobian = new b2Jacobian();
        public var m_motorMass:Number;
        public var m_motorForce:Number;
        public var m_limitForce:Number;
        public var m_limitPositionImpulse:Number;
        public var m_lowerTranslation:Number;
        public var m_upperTranslation:Number;
        public var m_maxMotorForce:Number;
        public var m_motorSpeed:Number;
        public var m_enableLimit:Boolean;
        public var m_enableMotor:Boolean;
        public var m_limitState:int;

        public function b2PrismaticJoint(_arg_1:b2PrismaticJointDef)
        {
            var _local_2:b2Mat22;
            var _local_3:Number;
            var _local_4:Number;
            super(_arg_1);
            this.m_localAnchor1.SetV(_arg_1.localAnchor1);
            this.m_localAnchor2.SetV(_arg_1.localAnchor2);
            this.m_localXAxis1.SetV(_arg_1.localAxis1);
            this.m_localYAxis1.x = -(this.m_localXAxis1.y);
            this.m_localYAxis1.y = this.m_localXAxis1.x;
            this.m_refAngle = _arg_1.referenceAngle;
            this.m_linearJacobian.SetZero();
            this.m_linearMass = 0;
            this.m_force = 0;
            this.m_angularMass = 0;
            this.m_torque = 0;
            this.m_motorJacobian.SetZero();
            this.m_motorMass = 0;
            this.m_motorForce = 0;
            this.m_limitForce = 0;
            this.m_limitPositionImpulse = 0;
            this.m_lowerTranslation = _arg_1.lowerTranslation;
            this.m_upperTranslation = _arg_1.upperTranslation;
            this.m_maxMotorForce = _arg_1.maxMotorForce;
            this.m_motorSpeed = _arg_1.motorSpeed;
            this.m_enableLimit = _arg_1.enableLimit;
            this.m_enableMotor = _arg_1.enableMotor;
        }

        override public function GetAnchor1():b2Vec2
        {
            return (m_body1.GetWorldPoint(this.m_localAnchor1));
        }

        override public function GetAnchor2():b2Vec2
        {
            return (m_body2.GetWorldPoint(this.m_localAnchor2));
        }

        override public function GetReactionForce():b2Vec2
        {
            var _local_1:b2Mat22 = m_body1.m_xf.R;
            var _local_2:Number = (this.m_limitForce * ((_local_1.col1.x * this.m_localXAxis1.x) + (_local_1.col2.x * this.m_localXAxis1.y)));
            var _local_3:Number = (this.m_limitForce * ((_local_1.col1.y * this.m_localXAxis1.x) + (_local_1.col2.y * this.m_localXAxis1.y)));
            var _local_4:Number = (this.m_force * ((_local_1.col1.x * this.m_localYAxis1.x) + (_local_1.col2.x * this.m_localYAxis1.y)));
            var _local_5:Number = (this.m_force * ((_local_1.col1.y * this.m_localYAxis1.x) + (_local_1.col2.y * this.m_localYAxis1.y)));
            return (new b2Vec2(((this.m_limitForce * _local_2) + (this.m_force * _local_4)), ((this.m_limitForce * _local_3) + (this.m_force * _local_5))));
        }

        override public function GetReactionTorque():Number
        {
            return (this.m_torque);
        }

        public function GetJointTranslation():Number
        {
            var _local_3:b2Mat22;
            var _local_1:b2Body = m_body1;
            var _local_2:b2Body = m_body2;
            var _local_4:b2Vec2 = _local_1.GetWorldPoint(this.m_localAnchor1);
            var _local_5:b2Vec2 = _local_2.GetWorldPoint(this.m_localAnchor2);
            var _local_6:Number = (_local_5.x - _local_4.x);
            var _local_7:Number = (_local_5.y - _local_4.y);
            var _local_8:b2Vec2 = _local_1.GetWorldVector(this.m_localXAxis1);
            var _local_9:Number = ((_local_8.x * _local_6) + (_local_8.y * _local_7));
            return (_local_9);
        }

        public function GetJointSpeed():Number
        {
            var _local_3:b2Mat22;
            var _local_1:b2Body = m_body1;
            var _local_2:b2Body = m_body2;
            _local_3 = _local_1.m_xf.R;
            var _local_4:Number = (this.m_localAnchor1.x - _local_1.m_sweep.localCenter.x);
            var _local_5:Number = (this.m_localAnchor1.y - _local_1.m_sweep.localCenter.y);
            var _local_6:Number = ((_local_3.col1.x * _local_4) + (_local_3.col2.x * _local_5));
            _local_5 = ((_local_3.col1.y * _local_4) + (_local_3.col2.y * _local_5));
            _local_4 = _local_6;
            _local_3 = _local_2.m_xf.R;
            var _local_7:Number = (this.m_localAnchor2.x - _local_2.m_sweep.localCenter.x);
            var _local_8:Number = (this.m_localAnchor2.y - _local_2.m_sweep.localCenter.y);
            _local_6 = ((_local_3.col1.x * _local_7) + (_local_3.col2.x * _local_8));
            _local_8 = ((_local_3.col1.y * _local_7) + (_local_3.col2.y * _local_8));
            _local_7 = _local_6;
            var _local_9:Number = (_local_1.m_sweep.c.x + _local_4);
            var _local_10:Number = (_local_1.m_sweep.c.y + _local_5);
            var _local_11:Number = (_local_2.m_sweep.c.x + _local_7);
            var _local_12:Number = (_local_2.m_sweep.c.y + _local_8);
            var _local_13:Number = (_local_11 - _local_9);
            var _local_14:Number = (_local_12 - _local_10);
            var _local_15:b2Vec2 = _local_1.GetWorldVector(this.m_localXAxis1);
            var _local_16:b2Vec2 = _local_1.m_linearVelocity;
            var _local_17:b2Vec2 = _local_2.m_linearVelocity;
            var _local_18:Number = _local_1.m_angularVelocity;
            var _local_19:Number = _local_2.m_angularVelocity;
            var _local_20:Number = (((_local_13 * (-(_local_18) * _local_15.y)) + (_local_14 * (_local_18 * _local_15.x))) + ((_local_15.x * (((_local_17.x + (-(_local_19) * _local_8)) - _local_16.x) - (-(_local_18) * _local_5))) + (_local_15.y * (((_local_17.y + (_local_19 * _local_7)) - _local_16.y) - (_local_18 * _local_4)))));
            return (_local_20);
        }

        public function IsLimitEnabled():Boolean
        {
            return (this.m_enableLimit);
        }

        public function EnableLimit(_arg_1:Boolean):void
        {
            this.m_enableLimit = _arg_1;
        }

        public function GetLowerLimit():Number
        {
            return (this.m_lowerTranslation);
        }

        public function GetUpperLimit():Number
        {
            return (this.m_upperTranslation);
        }

        public function SetLimits(_arg_1:Number, _arg_2:Number):void
        {
            this.m_lowerTranslation = _arg_1;
            this.m_upperTranslation = _arg_2;
        }

        public function IsMotorEnabled():Boolean
        {
            return (this.m_enableMotor);
        }

        public function EnableMotor(_arg_1:Boolean):void
        {
            this.m_enableMotor = _arg_1;
        }

        public function SetMotorSpeed(_arg_1:Number):void
        {
            this.m_motorSpeed = _arg_1;
        }

        public function GetMotorSpeed():Number
        {
            return (this.m_motorSpeed);
        }

        public function SetMaxMotorForce(_arg_1:Number):void
        {
            this.m_maxMotorForce = _arg_1;
        }

        public function GetMotorForce():Number
        {
            return (this.m_motorForce);
        }

        override public function InitVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_4:b2Mat22;
            var _local_5:Number;
            var _local_18:Number;
            var _local_19:Number;
            var _local_20:Number;
            var _local_21:Number;
            var _local_22:Number;
            var _local_23:Number;
            var _local_24:Number;
            var _local_25:Number;
            var _local_26:Number;
            var _local_27:Number;
            var _local_28:Number;
            var _local_2:b2Body = m_body1;
            var _local_3:b2Body = m_body2;
            _local_4 = _local_2.m_xf.R;
            var _local_6:Number = (this.m_localAnchor1.x - _local_2.m_sweep.localCenter.x);
            var _local_7:Number = (this.m_localAnchor1.y - _local_2.m_sweep.localCenter.y);
            _local_5 = ((_local_4.col1.x * _local_6) + (_local_4.col2.x * _local_7));
            _local_7 = ((_local_4.col1.y * _local_6) + (_local_4.col2.y * _local_7));
            _local_6 = _local_5;
            _local_4 = _local_3.m_xf.R;
            var _local_8:Number = (this.m_localAnchor2.x - _local_3.m_sweep.localCenter.x);
            var _local_9:Number = (this.m_localAnchor2.y - _local_3.m_sweep.localCenter.y);
            _local_5 = ((_local_4.col1.x * _local_8) + (_local_4.col2.x * _local_9));
            _local_9 = ((_local_4.col1.y * _local_8) + (_local_4.col2.y * _local_9));
            _local_8 = _local_5;
            var _local_10:Number = _local_2.m_invMass;
            var _local_11:Number = _local_3.m_invMass;
            var _local_12:Number = _local_2.m_invI;
            var _local_13:Number = _local_3.m_invI;
            _local_4 = _local_2.m_xf.R;
            var _local_14:Number = ((_local_4.col1.x * this.m_localYAxis1.x) + (_local_4.col2.x * this.m_localYAxis1.y));
            var _local_15:Number = ((_local_4.col1.y * this.m_localYAxis1.x) + (_local_4.col2.y * this.m_localYAxis1.y));
            var _local_16:Number = ((_local_3.m_sweep.c.x + _local_8) - _local_2.m_sweep.c.x);
            var _local_17:Number = ((_local_3.m_sweep.c.y + _local_9) - _local_2.m_sweep.c.y);
            this.m_linearJacobian.linear1.x = -(_local_14);
            this.m_linearJacobian.linear1.y = -(_local_15);
            this.m_linearJacobian.linear2.x = _local_14;
            this.m_linearJacobian.linear2.y = _local_15;
            this.m_linearJacobian.angular1 = -((_local_16 * _local_15) - (_local_17 * _local_14));
            this.m_linearJacobian.angular2 = ((_local_8 * _local_15) - (_local_9 * _local_14));
            this.m_linearMass = (((_local_10 + ((_local_12 * this.m_linearJacobian.angular1) * this.m_linearJacobian.angular1)) + _local_11) + ((_local_13 * this.m_linearJacobian.angular2) * this.m_linearJacobian.angular2));
            this.m_linearMass = (1 / this.m_linearMass);
            this.m_angularMass = (_local_12 + _local_13);
            if (this.m_angularMass > Number.MIN_VALUE)
            {
                this.m_angularMass = (1 / this.m_angularMass);
            };
            if (((this.m_enableLimit) || (this.m_enableMotor)))
            {
                _local_4 = _local_2.m_xf.R;
                _local_18 = ((_local_4.col1.x * this.m_localXAxis1.x) + (_local_4.col2.x * this.m_localXAxis1.y));
                _local_19 = ((_local_4.col1.y * this.m_localXAxis1.x) + (_local_4.col2.y * this.m_localXAxis1.y));
                this.m_motorJacobian.linear1.x = -(_local_18);
                this.m_motorJacobian.linear1.y = -(_local_19);
                this.m_motorJacobian.linear2.x = _local_18;
                this.m_motorJacobian.linear2.y = _local_19;
                this.m_motorJacobian.angular1 = -((_local_16 * _local_19) - (_local_17 * _local_18));
                this.m_motorJacobian.angular2 = ((_local_8 * _local_19) - (_local_9 * _local_18));
                this.m_motorMass = (((_local_10 + ((_local_12 * this.m_motorJacobian.angular1) * this.m_motorJacobian.angular1)) + _local_11) + ((_local_13 * this.m_motorJacobian.angular2) * this.m_motorJacobian.angular2));
                this.m_motorMass = (1 / this.m_motorMass);
                if (this.m_enableLimit)
                {
                    _local_20 = (_local_16 - _local_6);
                    _local_21 = (_local_17 - _local_7);
                    _local_22 = ((_local_18 * _local_20) + (_local_19 * _local_21));
                    if (b2Math.b2Abs((this.m_upperTranslation - this.m_lowerTranslation)) < (2 * b2Settings.b2_linearSlop))
                    {
                        this.m_limitState = e_equalLimits;
                    }
                    else
                    {
                        if (_local_22 <= this.m_lowerTranslation)
                        {
                            if (this.m_limitState != e_atLowerLimit)
                            {
                                this.m_limitForce = 0;
                            };
                            this.m_limitState = e_atLowerLimit;
                        }
                        else
                        {
                            if (_local_22 >= this.m_upperTranslation)
                            {
                                if (this.m_limitState != e_atUpperLimit)
                                {
                                    this.m_limitForce = 0;
                                };
                                this.m_limitState = e_atUpperLimit;
                            }
                            else
                            {
                                this.m_limitState = e_inactiveLimit;
                                this.m_limitForce = 0;
                            };
                        };
                    };
                };
            };
            if (this.m_enableMotor == false)
            {
                this.m_motorForce = 0;
            };
            if (this.m_enableLimit == false)
            {
                this.m_limitForce = 0;
            };
            if (_arg_1.warmStarting)
            {
                _local_23 = (_arg_1.dt * ((this.m_force * this.m_linearJacobian.linear1.x) + ((this.m_motorForce + this.m_limitForce) * this.m_motorJacobian.linear1.x)));
                _local_24 = (_arg_1.dt * ((this.m_force * this.m_linearJacobian.linear1.y) + ((this.m_motorForce + this.m_limitForce) * this.m_motorJacobian.linear1.y)));
                _local_25 = (_arg_1.dt * ((this.m_force * this.m_linearJacobian.linear2.x) + ((this.m_motorForce + this.m_limitForce) * this.m_motorJacobian.linear2.x)));
                _local_26 = (_arg_1.dt * ((this.m_force * this.m_linearJacobian.linear2.y) + ((this.m_motorForce + this.m_limitForce) * this.m_motorJacobian.linear2.y)));
                _local_27 = (_arg_1.dt * (((this.m_force * this.m_linearJacobian.angular1) - this.m_torque) + ((this.m_motorForce + this.m_limitForce) * this.m_motorJacobian.angular1)));
                _local_28 = (_arg_1.dt * (((this.m_force * this.m_linearJacobian.angular2) + this.m_torque) + ((this.m_motorForce + this.m_limitForce) * this.m_motorJacobian.angular2)));
                _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x + (_local_10 * _local_23));
                _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y + (_local_10 * _local_24));
                _local_2.m_angularVelocity = (_local_2.m_angularVelocity + (_local_12 * _local_27));
                _local_3.m_linearVelocity.x = (_local_3.m_linearVelocity.x + (_local_11 * _local_25));
                _local_3.m_linearVelocity.y = (_local_3.m_linearVelocity.y + (_local_11 * _local_26));
                _local_3.m_angularVelocity = (_local_3.m_angularVelocity + (_local_13 * _local_28));
            }
            else
            {
                this.m_force = 0;
                this.m_torque = 0;
                this.m_limitForce = 0;
                this.m_motorForce = 0;
            };
            this.m_limitPositionImpulse = 0;
        }

        override public function SolveVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_8:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:Number;
            var _local_18:Number;
            var _local_19:Number;
            var _local_2:b2Body = m_body1;
            var _local_3:b2Body = m_body2;
            var _local_4:Number = _local_2.m_invMass;
            var _local_5:Number = _local_3.m_invMass;
            var _local_6:Number = _local_2.m_invI;
            var _local_7:Number = _local_3.m_invI;
            var _local_9:Number = this.m_linearJacobian.Compute(_local_2.m_linearVelocity, _local_2.m_angularVelocity, _local_3.m_linearVelocity, _local_3.m_angularVelocity);
            var _local_10:Number = ((-(_arg_1.inv_dt) * this.m_linearMass) * _local_9);
            this.m_force = (this.m_force + _local_10);
            var _local_11:Number = (_arg_1.dt * _local_10);
            _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x + ((_local_4 * _local_11) * this.m_linearJacobian.linear1.x));
            _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y + ((_local_4 * _local_11) * this.m_linearJacobian.linear1.y));
            _local_2.m_angularVelocity = (_local_2.m_angularVelocity + ((_local_6 * _local_11) * this.m_linearJacobian.angular1));
            _local_3.m_linearVelocity.x = (_local_3.m_linearVelocity.x + ((_local_5 * _local_11) * this.m_linearJacobian.linear2.x));
            _local_3.m_linearVelocity.y = (_local_3.m_linearVelocity.y + ((_local_5 * _local_11) * this.m_linearJacobian.linear2.y));
            _local_3.m_angularVelocity = (_local_3.m_angularVelocity + ((_local_7 * _local_11) * this.m_linearJacobian.angular2));
            var _local_12:Number = (_local_3.m_angularVelocity - _local_2.m_angularVelocity);
            var _local_13:Number = ((-(_arg_1.inv_dt) * this.m_angularMass) * _local_12);
            this.m_torque = (this.m_torque + _local_13);
            var _local_14:Number = (_arg_1.dt * _local_13);
            _local_2.m_angularVelocity = (_local_2.m_angularVelocity - (_local_6 * _local_14));
            _local_3.m_angularVelocity = (_local_3.m_angularVelocity + (_local_7 * _local_14));
            if (((this.m_enableMotor) && (!(this.m_limitState == e_equalLimits))))
            {
                _local_15 = (this.m_motorJacobian.Compute(_local_2.m_linearVelocity, _local_2.m_angularVelocity, _local_3.m_linearVelocity, _local_3.m_angularVelocity) - this.m_motorSpeed);
                _local_16 = ((-(_arg_1.inv_dt) * this.m_motorMass) * _local_15);
                _local_17 = this.m_motorForce;
                this.m_motorForce = b2Math.b2Clamp((this.m_motorForce + _local_16), -(this.m_maxMotorForce), this.m_maxMotorForce);
                _local_16 = (this.m_motorForce - _local_17);
                _local_11 = (_arg_1.dt * _local_16);
                _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x + ((_local_4 * _local_11) * this.m_motorJacobian.linear1.x));
                _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y + ((_local_4 * _local_11) * this.m_motorJacobian.linear1.y));
                _local_2.m_angularVelocity = (_local_2.m_angularVelocity + ((_local_6 * _local_11) * this.m_motorJacobian.angular1));
                _local_3.m_linearVelocity.x = (_local_3.m_linearVelocity.x + ((_local_5 * _local_11) * this.m_motorJacobian.linear2.x));
                _local_3.m_linearVelocity.y = (_local_3.m_linearVelocity.y + ((_local_5 * _local_11) * this.m_motorJacobian.linear2.y));
                _local_3.m_angularVelocity = (_local_3.m_angularVelocity + ((_local_7 * _local_11) * this.m_motorJacobian.angular2));
            };
            if (((this.m_enableLimit) && (!(this.m_limitState == e_inactiveLimit))))
            {
                _local_18 = this.m_motorJacobian.Compute(_local_2.m_linearVelocity, _local_2.m_angularVelocity, _local_3.m_linearVelocity, _local_3.m_angularVelocity);
                _local_19 = ((-(_arg_1.inv_dt) * this.m_motorMass) * _local_18);
                if (this.m_limitState == e_equalLimits)
                {
                    this.m_limitForce = (this.m_limitForce + _local_19);
                }
                else
                {
                    if (this.m_limitState == e_atLowerLimit)
                    {
                        _local_8 = this.m_limitForce;
                        this.m_limitForce = b2Math.b2Max((this.m_limitForce + _local_19), 0);
                        _local_19 = (this.m_limitForce - _local_8);
                    }
                    else
                    {
                        if (this.m_limitState == e_atUpperLimit)
                        {
                            _local_8 = this.m_limitForce;
                            this.m_limitForce = b2Math.b2Min((this.m_limitForce + _local_19), 0);
                            _local_19 = (this.m_limitForce - _local_8);
                        };
                    };
                };
                _local_11 = (_arg_1.dt * _local_19);
                _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x + ((_local_4 * _local_11) * this.m_motorJacobian.linear1.x));
                _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y + ((_local_4 * _local_11) * this.m_motorJacobian.linear1.y));
                _local_2.m_angularVelocity = (_local_2.m_angularVelocity + ((_local_6 * _local_11) * this.m_motorJacobian.angular1));
                _local_3.m_linearVelocity.x = (_local_3.m_linearVelocity.x + ((_local_5 * _local_11) * this.m_motorJacobian.linear2.x));
                _local_3.m_linearVelocity.y = (_local_3.m_linearVelocity.y + ((_local_5 * _local_11) * this.m_motorJacobian.linear2.y));
                _local_3.m_angularVelocity = (_local_3.m_angularVelocity + ((_local_7 * _local_11) * this.m_motorJacobian.angular2));
            };
        }

        override public function SolvePositionConstraints():Boolean
        {
            var _local_1:Number;
            var _local_2:Number;
            var _local_9:b2Mat22;
            var _local_10:Number;
            var _local_29:Number;
            var _local_30:Number;
            var _local_31:Number;
            var _local_32:Number;
            var _local_3:b2Body = m_body1;
            var _local_4:b2Body = m_body2;
            var _local_5:Number = _local_3.m_invMass;
            var _local_6:Number = _local_4.m_invMass;
            var _local_7:Number = _local_3.m_invI;
            var _local_8:Number = _local_4.m_invI;
            _local_9 = _local_3.m_xf.R;
            var _local_11:Number = (this.m_localAnchor1.x - _local_3.m_sweep.localCenter.x);
            var _local_12:Number = (this.m_localAnchor1.y - _local_3.m_sweep.localCenter.y);
            _local_10 = ((_local_9.col1.x * _local_11) + (_local_9.col2.x * _local_12));
            _local_12 = ((_local_9.col1.y * _local_11) + (_local_9.col2.y * _local_12));
            _local_11 = _local_10;
            _local_9 = _local_4.m_xf.R;
            var _local_13:Number = (this.m_localAnchor2.x - _local_4.m_sweep.localCenter.x);
            var _local_14:Number = (this.m_localAnchor2.y - _local_4.m_sweep.localCenter.y);
            _local_10 = ((_local_9.col1.x * _local_13) + (_local_9.col2.x * _local_14));
            _local_14 = ((_local_9.col1.y * _local_13) + (_local_9.col2.y * _local_14));
            _local_13 = _local_10;
            var _local_15:Number = (_local_3.m_sweep.c.x + _local_11);
            var _local_16:Number = (_local_3.m_sweep.c.y + _local_12);
            var _local_17:Number = (_local_4.m_sweep.c.x + _local_13);
            var _local_18:Number = (_local_4.m_sweep.c.y + _local_14);
            var _local_19:Number = (_local_17 - _local_15);
            var _local_20:Number = (_local_18 - _local_16);
            _local_9 = _local_3.m_xf.R;
            var _local_21:Number = ((_local_9.col1.x * this.m_localYAxis1.x) + (_local_9.col2.x * this.m_localYAxis1.y));
            var _local_22:Number = ((_local_9.col1.y * this.m_localYAxis1.x) + (_local_9.col2.y * this.m_localYAxis1.y));
            var _local_23:Number = ((_local_21 * _local_19) + (_local_22 * _local_20));
            _local_23 = b2Math.b2Clamp(_local_23, -(b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
            var _local_24:Number = (-(this.m_linearMass) * _local_23);
            _local_3.m_sweep.c.x = (_local_3.m_sweep.c.x + ((_local_5 * _local_24) * this.m_linearJacobian.linear1.x));
            _local_3.m_sweep.c.y = (_local_3.m_sweep.c.y + ((_local_5 * _local_24) * this.m_linearJacobian.linear1.y));
            _local_3.m_sweep.a = (_local_3.m_sweep.a + ((_local_7 * _local_24) * this.m_linearJacobian.angular1));
            _local_4.m_sweep.c.x = (_local_4.m_sweep.c.x + ((_local_6 * _local_24) * this.m_linearJacobian.linear2.x));
            _local_4.m_sweep.c.y = (_local_4.m_sweep.c.y + ((_local_6 * _local_24) * this.m_linearJacobian.linear2.y));
            _local_4.m_sweep.a = (_local_4.m_sweep.a + ((_local_8 * _local_24) * this.m_linearJacobian.angular2));
            var _local_25:Number = b2Math.b2Abs(_local_23);
            var _local_26:Number = ((_local_4.m_sweep.a - _local_3.m_sweep.a) - this.m_refAngle);
            _local_26 = b2Math.b2Clamp(_local_26, -(b2Settings.b2_maxAngularCorrection), b2Settings.b2_maxAngularCorrection);
            var _local_27:Number = (-(this.m_angularMass) * _local_26);
            _local_3.m_sweep.a = (_local_3.m_sweep.a - (_local_3.m_invI * _local_27));
            _local_4.m_sweep.a = (_local_4.m_sweep.a + (_local_4.m_invI * _local_27));
            _local_3.SynchronizeTransform();
            _local_4.SynchronizeTransform();
            var _local_28:Number = b2Math.b2Abs(_local_26);
            if (((this.m_enableLimit) && (!(this.m_limitState == e_inactiveLimit))))
            {
                _local_9 = _local_3.m_xf.R;
                _local_11 = (this.m_localAnchor1.x - _local_3.m_sweep.localCenter.x);
                _local_12 = (this.m_localAnchor1.y - _local_3.m_sweep.localCenter.y);
                _local_10 = ((_local_9.col1.x * _local_11) + (_local_9.col2.x * _local_12));
                _local_12 = ((_local_9.col1.y * _local_11) + (_local_9.col2.y * _local_12));
                _local_11 = _local_10;
                _local_9 = _local_4.m_xf.R;
                _local_13 = (this.m_localAnchor2.x - _local_4.m_sweep.localCenter.x);
                _local_14 = (this.m_localAnchor2.y - _local_4.m_sweep.localCenter.y);
                _local_10 = ((_local_9.col1.x * _local_13) + (_local_9.col2.x * _local_14));
                _local_14 = ((_local_9.col1.y * _local_13) + (_local_9.col2.y * _local_14));
                _local_13 = _local_10;
                _local_15 = (_local_3.m_sweep.c.x + _local_11);
                _local_16 = (_local_3.m_sweep.c.y + _local_12);
                _local_17 = (_local_4.m_sweep.c.x + _local_13);
                _local_18 = (_local_4.m_sweep.c.y + _local_14);
                _local_19 = (_local_17 - _local_15);
                _local_20 = (_local_18 - _local_16);
                _local_9 = _local_3.m_xf.R;
                _local_29 = ((_local_9.col1.x * this.m_localXAxis1.x) + (_local_9.col2.x * this.m_localXAxis1.y));
                _local_30 = ((_local_9.col1.y * this.m_localXAxis1.x) + (_local_9.col2.y * this.m_localXAxis1.y));
                _local_31 = ((_local_29 * _local_19) + (_local_30 * _local_20));
                _local_32 = 0;
                if (this.m_limitState == e_equalLimits)
                {
                    _local_1 = b2Math.b2Clamp(_local_31, -(b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
                    _local_32 = (-(this.m_motorMass) * _local_1);
                    _local_25 = b2Math.b2Max(_local_25, b2Math.b2Abs(_local_26));
                }
                else
                {
                    if (this.m_limitState == e_atLowerLimit)
                    {
                        _local_1 = (_local_31 - this.m_lowerTranslation);
                        _local_25 = b2Math.b2Max(_local_25, -(_local_1));
                        _local_1 = b2Math.b2Clamp((_local_1 + b2Settings.b2_linearSlop), -(b2Settings.b2_maxLinearCorrection), 0);
                        _local_32 = (-(this.m_motorMass) * _local_1);
                        _local_2 = this.m_limitPositionImpulse;
                        this.m_limitPositionImpulse = b2Math.b2Max((this.m_limitPositionImpulse + _local_32), 0);
                        _local_32 = (this.m_limitPositionImpulse - _local_2);
                    }
                    else
                    {
                        if (this.m_limitState == e_atUpperLimit)
                        {
                            _local_1 = (_local_31 - this.m_upperTranslation);
                            _local_25 = b2Math.b2Max(_local_25, _local_1);
                            _local_1 = b2Math.b2Clamp((_local_1 - b2Settings.b2_linearSlop), 0, b2Settings.b2_maxLinearCorrection);
                            _local_32 = (-(this.m_motorMass) * _local_1);
                            _local_2 = this.m_limitPositionImpulse;
                            this.m_limitPositionImpulse = b2Math.b2Min((this.m_limitPositionImpulse + _local_32), 0);
                            _local_32 = (this.m_limitPositionImpulse - _local_2);
                        };
                    };
                };
                _local_3.m_sweep.c.x = (_local_3.m_sweep.c.x + ((_local_5 * _local_32) * this.m_motorJacobian.linear1.x));
                _local_3.m_sweep.c.y = (_local_3.m_sweep.c.y + ((_local_5 * _local_32) * this.m_motorJacobian.linear1.y));
                _local_3.m_sweep.a = (_local_3.m_sweep.a + ((_local_7 * _local_32) * this.m_motorJacobian.angular1));
                _local_4.m_sweep.c.x = (_local_4.m_sweep.c.x + ((_local_6 * _local_32) * this.m_motorJacobian.linear2.x));
                _local_4.m_sweep.c.y = (_local_4.m_sweep.c.y + ((_local_6 * _local_32) * this.m_motorJacobian.linear2.y));
                _local_4.m_sweep.a = (_local_4.m_sweep.a + ((_local_8 * _local_32) * this.m_motorJacobian.angular2));
                _local_3.SynchronizeTransform();
                _local_4.SynchronizeTransform();
            };
            return ((_local_25 <= b2Settings.b2_linearSlop) && (_local_28 <= b2Settings.b2_angularSlop));
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2PrismaticJointDef

package Box2D.Dynamics.Joints
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Dynamics.b2Body;

    public class b2PrismaticJointDef extends b2JointDef 
    {

        public var localAnchor1:b2Vec2 = new b2Vec2();
        public var localAnchor2:b2Vec2 = new b2Vec2();
        public var localAxis1:b2Vec2 = new b2Vec2();
        public var referenceAngle:Number;
        public var enableLimit:Boolean;
        public var lowerTranslation:Number;
        public var upperTranslation:Number;
        public var enableMotor:Boolean;
        public var maxMotorForce:Number;
        public var motorSpeed:Number;

        public function b2PrismaticJointDef()
        {
            type = b2Joint.e_prismaticJoint;
            this.localAxis1.Set(1, 0);
            this.referenceAngle = 0;
            this.enableLimit = false;
            this.lowerTranslation = 0;
            this.upperTranslation = 0;
            this.enableMotor = false;
            this.maxMotorForce = 0;
            this.motorSpeed = 0;
        }

        public function Initialize(_arg_1:b2Body, _arg_2:b2Body, _arg_3:b2Vec2, _arg_4:b2Vec2):void
        {
            body1 = _arg_1;
            body2 = _arg_2;
            this.localAnchor1 = body1.GetLocalPoint(_arg_3);
            this.localAnchor2 = body2.GetLocalPoint(_arg_3);
            this.localAxis1 = body1.GetLocalVector(_arg_4);
            this.referenceAngle = (body2.GetAngle() - body1.GetAngle());
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2PulleyJoint

package Box2D.Dynamics.Joints
{
    import Box2D.Dynamics.b2Body;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Common.Math.b2Math;
    import Box2D.Common.b2Settings;
    import Box2D.Dynamics.b2TimeStep;

    public class b2PulleyJoint extends b2Joint 
    {

        public static const b2_minPulleyLength:Number = 2;

        public var m_ground:b2Body;
        public var m_groundAnchor1:b2Vec2 = new b2Vec2();
        public var m_groundAnchor2:b2Vec2 = new b2Vec2();
        public var m_localAnchor1:b2Vec2 = new b2Vec2();
        public var m_localAnchor2:b2Vec2 = new b2Vec2();
        public var m_u1:b2Vec2 = new b2Vec2();
        public var m_u2:b2Vec2 = new b2Vec2();
        public var m_constant:Number;
        public var m_ratio:Number;
        public var m_maxLength1:Number;
        public var m_maxLength2:Number;
        public var m_pulleyMass:Number;
        public var m_limitMass1:Number;
        public var m_limitMass2:Number;
        public var m_force:Number;
        public var m_limitForce1:Number;
        public var m_limitForce2:Number;
        public var m_positionImpulse:Number;
        public var m_limitPositionImpulse1:Number;
        public var m_limitPositionImpulse2:Number;
        public var m_state:int;
        public var m_limitState1:int;
        public var m_limitState2:int;

        public function b2PulleyJoint(_arg_1:b2PulleyJointDef)
        {
            var _local_2:b2Mat22;
            var _local_3:Number;
            var _local_4:Number;
            super(_arg_1);
            this.m_ground = m_body1.m_world.m_groundBody;
            this.m_groundAnchor1.x = (_arg_1.groundAnchor1.x - this.m_ground.m_xf.position.x);
            this.m_groundAnchor1.y = (_arg_1.groundAnchor1.y - this.m_ground.m_xf.position.y);
            this.m_groundAnchor2.x = (_arg_1.groundAnchor2.x - this.m_ground.m_xf.position.x);
            this.m_groundAnchor2.y = (_arg_1.groundAnchor2.y - this.m_ground.m_xf.position.y);
            this.m_localAnchor1.SetV(_arg_1.localAnchor1);
            this.m_localAnchor2.SetV(_arg_1.localAnchor2);
            this.m_ratio = _arg_1.ratio;
            this.m_constant = (_arg_1.length1 + (this.m_ratio * _arg_1.length2));
            this.m_maxLength1 = b2Math.b2Min(_arg_1.maxLength1, (this.m_constant - (this.m_ratio * b2_minPulleyLength)));
            this.m_maxLength2 = b2Math.b2Min(_arg_1.maxLength2, ((this.m_constant - b2_minPulleyLength) / this.m_ratio));
            this.m_force = 0;
            this.m_limitForce1 = 0;
            this.m_limitForce2 = 0;
        }

        override public function GetAnchor1():b2Vec2
        {
            return (m_body1.GetWorldPoint(this.m_localAnchor1));
        }

        override public function GetAnchor2():b2Vec2
        {
            return (m_body2.GetWorldPoint(this.m_localAnchor2));
        }

        override public function GetReactionForce():b2Vec2
        {
            var _local_1:b2Vec2 = this.m_u2.Copy();
            _local_1.Multiply(this.m_force);
            return (_local_1);
        }

        override public function GetReactionTorque():Number
        {
            return (0);
        }

        public function GetGroundAnchor1():b2Vec2
        {
            var _local_1:b2Vec2 = this.m_ground.m_xf.position.Copy();
            _local_1.Add(this.m_groundAnchor1);
            return (_local_1);
        }

        public function GetGroundAnchor2():b2Vec2
        {
            var _local_1:b2Vec2 = this.m_ground.m_xf.position.Copy();
            _local_1.Add(this.m_groundAnchor2);
            return (_local_1);
        }

        public function GetLength1():Number
        {
            var _local_1:b2Vec2 = m_body1.GetWorldPoint(this.m_localAnchor1);
            var _local_2:Number = (this.m_ground.m_xf.position.x + this.m_groundAnchor1.x);
            var _local_3:Number = (this.m_ground.m_xf.position.y + this.m_groundAnchor1.y);
            var _local_4:Number = (_local_1.x - _local_2);
            var _local_5:Number = (_local_1.y - _local_3);
            return (Math.sqrt(((_local_4 * _local_4) + (_local_5 * _local_5))));
        }

        public function GetLength2():Number
        {
            var _local_1:b2Vec2 = m_body2.GetWorldPoint(this.m_localAnchor2);
            var _local_2:Number = (this.m_ground.m_xf.position.x + this.m_groundAnchor2.x);
            var _local_3:Number = (this.m_ground.m_xf.position.y + this.m_groundAnchor2.y);
            var _local_4:Number = (_local_1.x - _local_2);
            var _local_5:Number = (_local_1.y - _local_3);
            return (Math.sqrt(((_local_4 * _local_4) + (_local_5 * _local_5))));
        }

        public function GetRatio():Number
        {
            return (this.m_ratio);
        }

        override public function InitVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_4:b2Mat22;
            var _local_23:Number;
            var _local_24:Number;
            var _local_25:Number;
            var _local_26:Number;
            var _local_2:b2Body = m_body1;
            var _local_3:b2Body = m_body2;
            _local_4 = _local_2.m_xf.R;
            var _local_5:Number = (this.m_localAnchor1.x - _local_2.m_sweep.localCenter.x);
            var _local_6:Number = (this.m_localAnchor1.y - _local_2.m_sweep.localCenter.y);
            var _local_7:Number = ((_local_4.col1.x * _local_5) + (_local_4.col2.x * _local_6));
            _local_6 = ((_local_4.col1.y * _local_5) + (_local_4.col2.y * _local_6));
            _local_5 = _local_7;
            _local_4 = _local_3.m_xf.R;
            var _local_8:Number = (this.m_localAnchor2.x - _local_3.m_sweep.localCenter.x);
            var _local_9:Number = (this.m_localAnchor2.y - _local_3.m_sweep.localCenter.y);
            _local_7 = ((_local_4.col1.x * _local_8) + (_local_4.col2.x * _local_9));
            _local_9 = ((_local_4.col1.y * _local_8) + (_local_4.col2.y * _local_9));
            _local_8 = _local_7;
            var _local_10:Number = (_local_2.m_sweep.c.x + _local_5);
            var _local_11:Number = (_local_2.m_sweep.c.y + _local_6);
            var _local_12:Number = (_local_3.m_sweep.c.x + _local_8);
            var _local_13:Number = (_local_3.m_sweep.c.y + _local_9);
            var _local_14:Number = (this.m_ground.m_xf.position.x + this.m_groundAnchor1.x);
            var _local_15:Number = (this.m_ground.m_xf.position.y + this.m_groundAnchor1.y);
            var _local_16:Number = (this.m_ground.m_xf.position.x + this.m_groundAnchor2.x);
            var _local_17:Number = (this.m_ground.m_xf.position.y + this.m_groundAnchor2.y);
            this.m_u1.Set((_local_10 - _local_14), (_local_11 - _local_15));
            this.m_u2.Set((_local_12 - _local_16), (_local_13 - _local_17));
            var _local_18:Number = this.m_u1.Length();
            var _local_19:Number = this.m_u2.Length();
            if (_local_18 > b2Settings.b2_linearSlop)
            {
                this.m_u1.Multiply((1 / _local_18));
            }
            else
            {
                this.m_u1.SetZero();
            };
            if (_local_19 > b2Settings.b2_linearSlop)
            {
                this.m_u2.Multiply((1 / _local_19));
            }
            else
            {
                this.m_u2.SetZero();
            };
            var _local_20:Number = ((this.m_constant - _local_18) - (this.m_ratio * _local_19));
            if (_local_20 > 0)
            {
                this.m_state = e_inactiveLimit;
                this.m_force = 0;
            }
            else
            {
                this.m_state = e_atUpperLimit;
                this.m_positionImpulse = 0;
            };
            if (_local_18 < this.m_maxLength1)
            {
                this.m_limitState1 = e_inactiveLimit;
                this.m_limitForce1 = 0;
            }
            else
            {
                this.m_limitState1 = e_atUpperLimit;
                this.m_limitPositionImpulse1 = 0;
            };
            if (_local_19 < this.m_maxLength2)
            {
                this.m_limitState2 = e_inactiveLimit;
                this.m_limitForce2 = 0;
            }
            else
            {
                this.m_limitState2 = e_atUpperLimit;
                this.m_limitPositionImpulse2 = 0;
            };
            var _local_21:Number = ((_local_5 * this.m_u1.y) - (_local_6 * this.m_u1.x));
            var _local_22:Number = ((_local_8 * this.m_u2.y) - (_local_9 * this.m_u2.x));
            this.m_limitMass1 = (_local_2.m_invMass + ((_local_2.m_invI * _local_21) * _local_21));
            this.m_limitMass2 = (_local_3.m_invMass + ((_local_3.m_invI * _local_22) * _local_22));
            this.m_pulleyMass = (this.m_limitMass1 + ((this.m_ratio * this.m_ratio) * this.m_limitMass2));
            this.m_limitMass1 = (1 / this.m_limitMass1);
            this.m_limitMass2 = (1 / this.m_limitMass2);
            this.m_pulleyMass = (1 / this.m_pulleyMass);
            if (_arg_1.warmStarting)
            {
                _local_23 = ((_arg_1.dt * (-(this.m_force) - this.m_limitForce1)) * this.m_u1.x);
                _local_24 = ((_arg_1.dt * (-(this.m_force) - this.m_limitForce1)) * this.m_u1.y);
                _local_25 = ((_arg_1.dt * ((-(this.m_ratio) * this.m_force) - this.m_limitForce2)) * this.m_u2.x);
                _local_26 = ((_arg_1.dt * ((-(this.m_ratio) * this.m_force) - this.m_limitForce2)) * this.m_u2.y);
                _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x + (_local_2.m_invMass * _local_23));
                _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y + (_local_2.m_invMass * _local_24));
                _local_2.m_angularVelocity = (_local_2.m_angularVelocity + (_local_2.m_invI * ((_local_5 * _local_24) - (_local_6 * _local_23))));
                _local_3.m_linearVelocity.x = (_local_3.m_linearVelocity.x + (_local_3.m_invMass * _local_25));
                _local_3.m_linearVelocity.y = (_local_3.m_linearVelocity.y + (_local_3.m_invMass * _local_26));
                _local_3.m_angularVelocity = (_local_3.m_angularVelocity + (_local_3.m_invI * ((_local_8 * _local_26) - (_local_9 * _local_25))));
            }
            else
            {
                this.m_force = 0;
                this.m_limitForce1 = 0;
                this.m_limitForce2 = 0;
            };
        }

        override public function SolveVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_4:b2Mat22;
            var _local_10:Number;
            var _local_11:Number;
            var _local_12:Number;
            var _local_13:Number;
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:Number;
            var _local_18:Number;
            var _local_19:Number;
            var _local_20:Number;
            var _local_2:b2Body = m_body1;
            var _local_3:b2Body = m_body2;
            _local_4 = _local_2.m_xf.R;
            var _local_5:Number = (this.m_localAnchor1.x - _local_2.m_sweep.localCenter.x);
            var _local_6:Number = (this.m_localAnchor1.y - _local_2.m_sweep.localCenter.y);
            var _local_7:Number = ((_local_4.col1.x * _local_5) + (_local_4.col2.x * _local_6));
            _local_6 = ((_local_4.col1.y * _local_5) + (_local_4.col2.y * _local_6));
            _local_5 = _local_7;
            _local_4 = _local_3.m_xf.R;
            var _local_8:Number = (this.m_localAnchor2.x - _local_3.m_sweep.localCenter.x);
            var _local_9:Number = (this.m_localAnchor2.y - _local_3.m_sweep.localCenter.y);
            _local_7 = ((_local_4.col1.x * _local_8) + (_local_4.col2.x * _local_9));
            _local_9 = ((_local_4.col1.y * _local_8) + (_local_4.col2.y * _local_9));
            _local_8 = _local_7;
            if (this.m_state == e_atUpperLimit)
            {
                _local_10 = (_local_2.m_linearVelocity.x + (-(_local_2.m_angularVelocity) * _local_6));
                _local_11 = (_local_2.m_linearVelocity.y + (_local_2.m_angularVelocity * _local_5));
                _local_12 = (_local_3.m_linearVelocity.x + (-(_local_3.m_angularVelocity) * _local_9));
                _local_13 = (_local_3.m_linearVelocity.y + (_local_3.m_angularVelocity * _local_8));
                _local_18 = (-((this.m_u1.x * _local_10) + (this.m_u1.y * _local_11)) - (this.m_ratio * ((this.m_u2.x * _local_12) + (this.m_u2.y * _local_13))));
                _local_19 = ((-(_arg_1.inv_dt) * this.m_pulleyMass) * _local_18);
                _local_20 = this.m_force;
                this.m_force = b2Math.b2Max(0, (this.m_force + _local_19));
                _local_19 = (this.m_force - _local_20);
                _local_14 = ((-(_arg_1.dt) * _local_19) * this.m_u1.x);
                _local_15 = ((-(_arg_1.dt) * _local_19) * this.m_u1.y);
                _local_16 = (((-(_arg_1.dt) * this.m_ratio) * _local_19) * this.m_u2.x);
                _local_17 = (((-(_arg_1.dt) * this.m_ratio) * _local_19) * this.m_u2.y);
                _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x + (_local_2.m_invMass * _local_14));
                _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y + (_local_2.m_invMass * _local_15));
                _local_2.m_angularVelocity = (_local_2.m_angularVelocity + (_local_2.m_invI * ((_local_5 * _local_15) - (_local_6 * _local_14))));
                _local_3.m_linearVelocity.x = (_local_3.m_linearVelocity.x + (_local_3.m_invMass * _local_16));
                _local_3.m_linearVelocity.y = (_local_3.m_linearVelocity.y + (_local_3.m_invMass * _local_17));
                _local_3.m_angularVelocity = (_local_3.m_angularVelocity + (_local_3.m_invI * ((_local_8 * _local_17) - (_local_9 * _local_16))));
            };
            if (this.m_limitState1 == e_atUpperLimit)
            {
                _local_10 = (_local_2.m_linearVelocity.x + (-(_local_2.m_angularVelocity) * _local_6));
                _local_11 = (_local_2.m_linearVelocity.y + (_local_2.m_angularVelocity * _local_5));
                _local_18 = -((this.m_u1.x * _local_10) + (this.m_u1.y * _local_11));
                _local_19 = ((-(_arg_1.inv_dt) * this.m_limitMass1) * _local_18);
                _local_20 = this.m_limitForce1;
                this.m_limitForce1 = b2Math.b2Max(0, (this.m_limitForce1 + _local_19));
                _local_19 = (this.m_limitForce1 - _local_20);
                _local_14 = ((-(_arg_1.dt) * _local_19) * this.m_u1.x);
                _local_15 = ((-(_arg_1.dt) * _local_19) * this.m_u1.y);
                _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x + (_local_2.m_invMass * _local_14));
                _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y + (_local_2.m_invMass * _local_15));
                _local_2.m_angularVelocity = (_local_2.m_angularVelocity + (_local_2.m_invI * ((_local_5 * _local_15) - (_local_6 * _local_14))));
            };
            if (this.m_limitState2 == e_atUpperLimit)
            {
                _local_12 = (_local_3.m_linearVelocity.x + (-(_local_3.m_angularVelocity) * _local_9));
                _local_13 = (_local_3.m_linearVelocity.y + (_local_3.m_angularVelocity * _local_8));
                _local_18 = -((this.m_u2.x * _local_12) + (this.m_u2.y * _local_13));
                _local_19 = ((-(_arg_1.inv_dt) * this.m_limitMass2) * _local_18);
                _local_20 = this.m_limitForce2;
                this.m_limitForce2 = b2Math.b2Max(0, (this.m_limitForce2 + _local_19));
                _local_19 = (this.m_limitForce2 - _local_20);
                _local_16 = ((-(_arg_1.dt) * _local_19) * this.m_u2.x);
                _local_17 = ((-(_arg_1.dt) * _local_19) * this.m_u2.y);
                _local_3.m_linearVelocity.x = (_local_3.m_linearVelocity.x + (_local_3.m_invMass * _local_16));
                _local_3.m_linearVelocity.y = (_local_3.m_linearVelocity.y + (_local_3.m_invMass * _local_17));
                _local_3.m_angularVelocity = (_local_3.m_angularVelocity + (_local_3.m_invI * ((_local_8 * _local_17) - (_local_9 * _local_16))));
            };
        }

        override public function SolvePositionConstraints():Boolean
        {
            var _local_3:b2Mat22;
            var _local_8:Number;
            var _local_9:Number;
            var _local_10:Number;
            var _local_11:Number;
            var _local_12:Number;
            var _local_13:Number;
            var _local_14:Number;
            var _local_15:Number;
            var _local_16:Number;
            var _local_17:Number;
            var _local_18:Number;
            var _local_19:Number;
            var _local_20:Number;
            var _local_21:Number;
            var _local_22:Number;
            var _local_1:b2Body = m_body1;
            var _local_2:b2Body = m_body2;
            var _local_4:Number = (this.m_ground.m_xf.position.x + this.m_groundAnchor1.x);
            var _local_5:Number = (this.m_ground.m_xf.position.y + this.m_groundAnchor1.y);
            var _local_6:Number = (this.m_ground.m_xf.position.x + this.m_groundAnchor2.x);
            var _local_7:Number = (this.m_ground.m_xf.position.y + this.m_groundAnchor2.y);
            var _local_23:Number = 0;
            if (this.m_state == e_atUpperLimit)
            {
                _local_3 = _local_1.m_xf.R;
                _local_8 = (this.m_localAnchor1.x - _local_1.m_sweep.localCenter.x);
                _local_9 = (this.m_localAnchor1.y - _local_1.m_sweep.localCenter.y);
                _local_22 = ((_local_3.col1.x * _local_8) + (_local_3.col2.x * _local_9));
                _local_9 = ((_local_3.col1.y * _local_8) + (_local_3.col2.y * _local_9));
                _local_8 = _local_22;
                _local_3 = _local_2.m_xf.R;
                _local_10 = (this.m_localAnchor2.x - _local_2.m_sweep.localCenter.x);
                _local_11 = (this.m_localAnchor2.y - _local_2.m_sweep.localCenter.y);
                _local_22 = ((_local_3.col1.x * _local_10) + (_local_3.col2.x * _local_11));
                _local_11 = ((_local_3.col1.y * _local_10) + (_local_3.col2.y * _local_11));
                _local_10 = _local_22;
                _local_12 = (_local_1.m_sweep.c.x + _local_8);
                _local_13 = (_local_1.m_sweep.c.y + _local_9);
                _local_14 = (_local_2.m_sweep.c.x + _local_10);
                _local_15 = (_local_2.m_sweep.c.y + _local_11);
                this.m_u1.Set((_local_12 - _local_4), (_local_13 - _local_5));
                this.m_u2.Set((_local_14 - _local_6), (_local_15 - _local_7));
                _local_16 = this.m_u1.Length();
                _local_17 = this.m_u2.Length();
                if (_local_16 > b2Settings.b2_linearSlop)
                {
                    this.m_u1.Multiply((1 / _local_16));
                }
                else
                {
                    this.m_u1.SetZero();
                };
                if (_local_17 > b2Settings.b2_linearSlop)
                {
                    this.m_u2.Multiply((1 / _local_17));
                }
                else
                {
                    this.m_u2.SetZero();
                };
                _local_18 = ((this.m_constant - _local_16) - (this.m_ratio * _local_17));
                _local_23 = b2Math.b2Max(_local_23, -(_local_18));
                _local_18 = b2Math.b2Clamp((_local_18 + b2Settings.b2_linearSlop), -(b2Settings.b2_maxLinearCorrection), 0);
                _local_19 = (-(this.m_pulleyMass) * _local_18);
                _local_20 = this.m_positionImpulse;
                this.m_positionImpulse = b2Math.b2Max(0, (this.m_positionImpulse + _local_19));
                _local_19 = (this.m_positionImpulse - _local_20);
                _local_12 = (-(_local_19) * this.m_u1.x);
                _local_13 = (-(_local_19) * this.m_u1.y);
                _local_14 = ((-(this.m_ratio) * _local_19) * this.m_u2.x);
                _local_15 = ((-(this.m_ratio) * _local_19) * this.m_u2.y);
                _local_1.m_sweep.c.x = (_local_1.m_sweep.c.x + (_local_1.m_invMass * _local_12));
                _local_1.m_sweep.c.y = (_local_1.m_sweep.c.y + (_local_1.m_invMass * _local_13));
                _local_1.m_sweep.a = (_local_1.m_sweep.a + (_local_1.m_invI * ((_local_8 * _local_13) - (_local_9 * _local_12))));
                _local_2.m_sweep.c.x = (_local_2.m_sweep.c.x + (_local_2.m_invMass * _local_14));
                _local_2.m_sweep.c.y = (_local_2.m_sweep.c.y + (_local_2.m_invMass * _local_15));
                _local_2.m_sweep.a = (_local_2.m_sweep.a + (_local_2.m_invI * ((_local_10 * _local_15) - (_local_11 * _local_14))));
                _local_1.SynchronizeTransform();
                _local_2.SynchronizeTransform();
            };
            if (this.m_limitState1 == e_atUpperLimit)
            {
                _local_3 = _local_1.m_xf.R;
                _local_8 = (this.m_localAnchor1.x - _local_1.m_sweep.localCenter.x);
                _local_9 = (this.m_localAnchor1.y - _local_1.m_sweep.localCenter.y);
                _local_22 = ((_local_3.col1.x * _local_8) + (_local_3.col2.x * _local_9));
                _local_9 = ((_local_3.col1.y * _local_8) + (_local_3.col2.y * _local_9));
                _local_8 = _local_22;
                _local_12 = (_local_1.m_sweep.c.x + _local_8);
                _local_13 = (_local_1.m_sweep.c.y + _local_9);
                this.m_u1.Set((_local_12 - _local_4), (_local_13 - _local_5));
                _local_16 = this.m_u1.Length();
                if (_local_16 > b2Settings.b2_linearSlop)
                {
                    this.m_u1.x = (this.m_u1.x * (1 / _local_16));
                    this.m_u1.y = (this.m_u1.y * (1 / _local_16));
                }
                else
                {
                    this.m_u1.SetZero();
                };
                _local_18 = (this.m_maxLength1 - _local_16);
                _local_23 = b2Math.b2Max(_local_23, -(_local_18));
                _local_18 = b2Math.b2Clamp((_local_18 + b2Settings.b2_linearSlop), -(b2Settings.b2_maxLinearCorrection), 0);
                _local_19 = (-(this.m_limitMass1) * _local_18);
                _local_21 = this.m_limitPositionImpulse1;
                this.m_limitPositionImpulse1 = b2Math.b2Max(0, (this.m_limitPositionImpulse1 + _local_19));
                _local_19 = (this.m_limitPositionImpulse1 - _local_21);
                _local_12 = (-(_local_19) * this.m_u1.x);
                _local_13 = (-(_local_19) * this.m_u1.y);
                _local_1.m_sweep.c.x = (_local_1.m_sweep.c.x + (_local_1.m_invMass * _local_12));
                _local_1.m_sweep.c.y = (_local_1.m_sweep.c.y + (_local_1.m_invMass * _local_13));
                _local_1.m_sweep.a = (_local_1.m_sweep.a + (_local_1.m_invI * ((_local_8 * _local_13) - (_local_9 * _local_12))));
                _local_1.SynchronizeTransform();
            };
            if (this.m_limitState2 == e_atUpperLimit)
            {
                _local_3 = _local_2.m_xf.R;
                _local_10 = (this.m_localAnchor2.x - _local_2.m_sweep.localCenter.x);
                _local_11 = (this.m_localAnchor2.y - _local_2.m_sweep.localCenter.y);
                _local_22 = ((_local_3.col1.x * _local_10) + (_local_3.col2.x * _local_11));
                _local_11 = ((_local_3.col1.y * _local_10) + (_local_3.col2.y * _local_11));
                _local_10 = _local_22;
                _local_14 = (_local_2.m_sweep.c.x + _local_10);
                _local_15 = (_local_2.m_sweep.c.y + _local_11);
                this.m_u2.Set((_local_14 - _local_6), (_local_15 - _local_7));
                _local_17 = this.m_u2.Length();
                if (_local_17 > b2Settings.b2_linearSlop)
                {
                    this.m_u2.x = (this.m_u2.x * (1 / _local_17));
                    this.m_u2.y = (this.m_u2.y * (1 / _local_17));
                }
                else
                {
                    this.m_u2.SetZero();
                };
                _local_18 = (this.m_maxLength2 - _local_17);
                _local_23 = b2Math.b2Max(_local_23, -(_local_18));
                _local_18 = b2Math.b2Clamp((_local_18 + b2Settings.b2_linearSlop), -(b2Settings.b2_maxLinearCorrection), 0);
                _local_19 = (-(this.m_limitMass2) * _local_18);
                _local_21 = this.m_limitPositionImpulse2;
                this.m_limitPositionImpulse2 = b2Math.b2Max(0, (this.m_limitPositionImpulse2 + _local_19));
                _local_19 = (this.m_limitPositionImpulse2 - _local_21);
                _local_14 = (-(_local_19) * this.m_u2.x);
                _local_15 = (-(_local_19) * this.m_u2.y);
                _local_2.m_sweep.c.x = (_local_2.m_sweep.c.x + (_local_2.m_invMass * _local_14));
                _local_2.m_sweep.c.y = (_local_2.m_sweep.c.y + (_local_2.m_invMass * _local_15));
                _local_2.m_sweep.a = (_local_2.m_sweep.a + (_local_2.m_invI * ((_local_10 * _local_15) - (_local_11 * _local_14))));
                _local_2.SynchronizeTransform();
            };
            return (_local_23 < b2Settings.b2_linearSlop);
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2PulleyJointDef

package Box2D.Dynamics.Joints
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Dynamics.b2Body;

    public class b2PulleyJointDef extends b2JointDef 
    {

        public var groundAnchor1:b2Vec2 = new b2Vec2();
        public var groundAnchor2:b2Vec2 = new b2Vec2();
        public var localAnchor1:b2Vec2 = new b2Vec2();
        public var localAnchor2:b2Vec2 = new b2Vec2();
        public var length1:Number;
        public var maxLength1:Number;
        public var length2:Number;
        public var maxLength2:Number;
        public var ratio:Number;

        public function b2PulleyJointDef()
        {
            type = b2Joint.e_pulleyJoint;
            this.groundAnchor1.Set(-1, 1);
            this.groundAnchor2.Set(1, 1);
            this.localAnchor1.Set(-1, 0);
            this.localAnchor2.Set(1, 0);
            this.length1 = 0;
            this.maxLength1 = 0;
            this.length2 = 0;
            this.maxLength2 = 0;
            this.ratio = 1;
            collideConnected = true;
        }

        public function Initialize(_arg_1:b2Body, _arg_2:b2Body, _arg_3:b2Vec2, _arg_4:b2Vec2, _arg_5:b2Vec2, _arg_6:b2Vec2, _arg_7:Number):void
        {
            body1 = _arg_1;
            body2 = _arg_2;
            this.groundAnchor1.SetV(_arg_3);
            this.groundAnchor2.SetV(_arg_4);
            this.localAnchor1 = body1.GetLocalPoint(_arg_5);
            this.localAnchor2 = body2.GetLocalPoint(_arg_6);
            var _local_8:Number = (_arg_5.x - _arg_3.x);
            var _local_9:Number = (_arg_5.y - _arg_3.y);
            this.length1 = Math.sqrt(((_local_8 * _local_8) + (_local_9 * _local_9)));
            var _local_10:Number = (_arg_6.x - _arg_4.x);
            var _local_11:Number = (_arg_6.y - _arg_4.y);
            this.length2 = Math.sqrt(((_local_10 * _local_10) + (_local_11 * _local_11)));
            this.ratio = _arg_7;
            var _local_12:Number = (this.length1 + (this.ratio * this.length2));
            this.maxLength1 = (_local_12 - (this.ratio * b2PulleyJoint.b2_minPulleyLength));
            this.maxLength2 = ((_local_12 - b2PulleyJoint.b2_minPulleyLength) / this.ratio);
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2RevoluteJoint

package Box2D.Dynamics.Joints
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Dynamics.b2Body;
    import Box2D.Common.Math.b2Math;
    import Box2D.Common.b2Settings;
    import Box2D.Dynamics.b2TimeStep;

    public class b2RevoluteJoint extends b2Joint 
    {

        public static var tImpulse:b2Vec2 = new b2Vec2();

        private var K:b2Mat22 = new b2Mat22();
        private var K1:b2Mat22 = new b2Mat22();
        private var K2:b2Mat22 = new b2Mat22();
        private var K3:b2Mat22 = new b2Mat22();
        public var m_localAnchor1:b2Vec2 = new b2Vec2();
        public var m_localAnchor2:b2Vec2 = new b2Vec2();
        public var m_pivotForce:b2Vec2 = new b2Vec2();
        public var m_motorForce:Number;
        public var m_limitForce:Number;
        public var m_limitPositionImpulse:Number;
        public var m_pivotMass:b2Mat22 = new b2Mat22();
        public var m_motorMass:Number;
        public var m_enableMotor:Boolean;
        public var m_maxMotorTorque:Number;
        public var m_motorSpeed:Number;
        public var m_enableLimit:Boolean;
        public var m_referenceAngle:Number;
        public var m_lowerAngle:Number;
        public var m_upperAngle:Number;
        public var m_limitState:int;

        public function b2RevoluteJoint(_arg_1:b2RevoluteJointDef)
        {
            super(_arg_1);
            this.m_localAnchor1.SetV(_arg_1.localAnchor1);
            this.m_localAnchor2.SetV(_arg_1.localAnchor2);
            this.m_referenceAngle = _arg_1.referenceAngle;
            this.m_pivotForce.Set(0, 0);
            this.m_motorForce = 0;
            this.m_limitForce = 0;
            this.m_limitPositionImpulse = 0;
            this.m_lowerAngle = _arg_1.lowerAngle;
            this.m_upperAngle = _arg_1.upperAngle;
            this.m_maxMotorTorque = _arg_1.maxMotorTorque;
            this.m_motorSpeed = _arg_1.motorSpeed;
            this.m_enableLimit = _arg_1.enableLimit;
            this.m_enableMotor = _arg_1.enableMotor;
        }

        override public function GetAnchor1():b2Vec2
        {
            return (m_body1.GetWorldPoint(this.m_localAnchor1));
        }

        override public function GetAnchor2():b2Vec2
        {
            return (m_body2.GetWorldPoint(this.m_localAnchor2));
        }

        override public function GetReactionForce():b2Vec2
        {
            return (this.m_pivotForce);
        }

        override public function GetReactionTorque():Number
        {
            return (this.m_limitForce);
        }

        public function GetJointAngle():Number
        {
            return ((m_body2.m_sweep.a - m_body1.m_sweep.a) - this.m_referenceAngle);
        }

        public function GetJointSpeed():Number
        {
            return (m_body2.m_angularVelocity - m_body1.m_angularVelocity);
        }

        public function IsLimitEnabled():Boolean
        {
            return (this.m_enableLimit);
        }

        public function EnableLimit(_arg_1:Boolean):void
        {
            this.m_enableLimit = _arg_1;
        }

        public function GetLowerLimit():Number
        {
            return (this.m_lowerAngle);
        }

        public function GetUpperLimit():Number
        {
            return (this.m_upperAngle);
        }

        public function SetLimits(_arg_1:Number, _arg_2:Number):void
        {
            this.m_lowerAngle = _arg_1;
            this.m_upperAngle = _arg_2;
        }

        public function IsMotorEnabled():Boolean
        {
            return (this.m_enableMotor);
        }

        public function EnableMotor(_arg_1:Boolean):void
        {
            this.m_enableMotor = _arg_1;
        }

        public function SetMotorSpeed(_arg_1:Number):void
        {
            this.m_motorSpeed = _arg_1;
        }

        public function GetMotorSpeed():Number
        {
            return (this.m_motorSpeed);
        }

        public function SetMaxMotorTorque(_arg_1:Number):void
        {
            this.m_maxMotorTorque = _arg_1;
        }

        public function GetMotorTorque():Number
        {
            return (this.m_motorForce);
        }

        override public function InitVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_2:b2Body;
            var _local_3:b2Body;
            var _local_4:b2Mat22;
            var _local_5:Number;
            var _local_7:Number;
            var _local_14:Number;
            _local_2 = m_body1;
            _local_3 = m_body2;
            _local_4 = _local_2.m_xf.R;
            var _local_6:Number = (this.m_localAnchor1.x - _local_2.m_sweep.localCenter.x);
            _local_7 = (this.m_localAnchor1.y - _local_2.m_sweep.localCenter.y);
            _local_5 = ((_local_4.col1.x * _local_6) + (_local_4.col2.x * _local_7));
            _local_7 = ((_local_4.col1.y * _local_6) + (_local_4.col2.y * _local_7));
            _local_6 = _local_5;
            _local_4 = _local_3.m_xf.R;
            var _local_8:Number = (this.m_localAnchor2.x - _local_3.m_sweep.localCenter.x);
            var _local_9:Number = (this.m_localAnchor2.y - _local_3.m_sweep.localCenter.y);
            _local_5 = ((_local_4.col1.x * _local_8) + (_local_4.col2.x * _local_9));
            _local_9 = ((_local_4.col1.y * _local_8) + (_local_4.col2.y * _local_9));
            _local_8 = _local_5;
            var _local_10:Number = _local_2.m_invMass;
            var _local_11:Number = _local_3.m_invMass;
            var _local_12:Number = _local_2.m_invI;
            var _local_13:Number = _local_3.m_invI;
            this.K1.col1.x = (_local_10 + _local_11);
            this.K1.col2.x = 0;
            this.K1.col1.y = 0;
            this.K1.col2.y = (_local_10 + _local_11);
            this.K2.col1.x = ((_local_12 * _local_7) * _local_7);
            this.K2.col2.x = ((-(_local_12) * _local_6) * _local_7);
            this.K2.col1.y = ((-(_local_12) * _local_6) * _local_7);
            this.K2.col2.y = ((_local_12 * _local_6) * _local_6);
            this.K3.col1.x = ((_local_13 * _local_9) * _local_9);
            this.K3.col2.x = ((-(_local_13) * _local_8) * _local_9);
            this.K3.col1.y = ((-(_local_13) * _local_8) * _local_9);
            this.K3.col2.y = ((_local_13 * _local_8) * _local_8);
            this.K.SetM(this.K1);
            this.K.AddM(this.K2);
            this.K.AddM(this.K3);
            this.K.Invert(this.m_pivotMass);
            this.m_motorMass = (1 / (_local_12 + _local_13));
            if (this.m_enableMotor == false)
            {
                this.m_motorForce = 0;
            };
            if (this.m_enableLimit)
            {
                _local_14 = ((_local_3.m_sweep.a - _local_2.m_sweep.a) - this.m_referenceAngle);
                if (b2Math.b2Abs((this.m_upperAngle - this.m_lowerAngle)) < (2 * b2Settings.b2_angularSlop))
                {
                    this.m_limitState = e_equalLimits;
                }
                else
                {
                    if (_local_14 <= this.m_lowerAngle)
                    {
                        if (this.m_limitState != e_atLowerLimit)
                        {
                            this.m_limitForce = 0;
                        };
                        this.m_limitState = e_atLowerLimit;
                    }
                    else
                    {
                        if (_local_14 >= this.m_upperAngle)
                        {
                            if (this.m_limitState != e_atUpperLimit)
                            {
                                this.m_limitForce = 0;
                            };
                            this.m_limitState = e_atUpperLimit;
                        }
                        else
                        {
                            this.m_limitState = e_inactiveLimit;
                            this.m_limitForce = 0;
                        };
                    };
                };
            }
            else
            {
                this.m_limitForce = 0;
            };
            if (_arg_1.warmStarting)
            {
                _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x - ((_arg_1.dt * _local_10) * this.m_pivotForce.x));
                _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y - ((_arg_1.dt * _local_10) * this.m_pivotForce.y));
                _local_2.m_angularVelocity = (_local_2.m_angularVelocity - ((_arg_1.dt * _local_12) * ((((_local_6 * this.m_pivotForce.y) - (_local_7 * this.m_pivotForce.x)) + this.m_motorForce) + this.m_limitForce)));
                _local_3.m_linearVelocity.x = (_local_3.m_linearVelocity.x + ((_arg_1.dt * _local_11) * this.m_pivotForce.x));
                _local_3.m_linearVelocity.y = (_local_3.m_linearVelocity.y + ((_arg_1.dt * _local_11) * this.m_pivotForce.y));
                _local_3.m_angularVelocity = (_local_3.m_angularVelocity + ((_arg_1.dt * _local_13) * ((((_local_8 * this.m_pivotForce.y) - (_local_9 * this.m_pivotForce.x)) + this.m_motorForce) + this.m_limitForce)));
            }
            else
            {
                this.m_pivotForce.SetZero();
                this.m_motorForce = 0;
                this.m_limitForce = 0;
            };
            this.m_limitPositionImpulse = 0;
        }

        override public function SolveVelocityConstraints(_arg_1:b2TimeStep):void
        {
            var _local_4:b2Mat22;
            var _local_5:Number;
            var _local_10:Number;
            var _local_16:Number;
            var _local_17:Number;
            var _local_18:Number;
            var _local_19:Number;
            var _local_20:Number;
            var _local_21:Number;
            var _local_2:b2Body = m_body1;
            var _local_3:b2Body = m_body2;
            _local_4 = _local_2.m_xf.R;
            var _local_6:Number = (this.m_localAnchor1.x - _local_2.m_sweep.localCenter.x);
            var _local_7:Number = (this.m_localAnchor1.y - _local_2.m_sweep.localCenter.y);
            _local_5 = ((_local_4.col1.x * _local_6) + (_local_4.col2.x * _local_7));
            _local_7 = ((_local_4.col1.y * _local_6) + (_local_4.col2.y * _local_7));
            _local_6 = _local_5;
            _local_4 = _local_3.m_xf.R;
            var _local_8:Number = (this.m_localAnchor2.x - _local_3.m_sweep.localCenter.x);
            var _local_9:Number = (this.m_localAnchor2.y - _local_3.m_sweep.localCenter.y);
            _local_5 = ((_local_4.col1.x * _local_8) + (_local_4.col2.x * _local_9));
            _local_9 = ((_local_4.col1.y * _local_8) + (_local_4.col2.y * _local_9));
            _local_8 = _local_5;
            var _local_11:Number = (((_local_3.m_linearVelocity.x + (-(_local_3.m_angularVelocity) * _local_9)) - _local_2.m_linearVelocity.x) - (-(_local_2.m_angularVelocity) * _local_7));
            var _local_12:Number = (((_local_3.m_linearVelocity.y + (_local_3.m_angularVelocity * _local_8)) - _local_2.m_linearVelocity.y) - (_local_2.m_angularVelocity * _local_6));
            var _local_13:Number = (-(_arg_1.inv_dt) * ((this.m_pivotMass.col1.x * _local_11) + (this.m_pivotMass.col2.x * _local_12)));
            var _local_14:Number = (-(_arg_1.inv_dt) * ((this.m_pivotMass.col1.y * _local_11) + (this.m_pivotMass.col2.y * _local_12)));
            this.m_pivotForce.x = (this.m_pivotForce.x + _local_13);
            this.m_pivotForce.y = (this.m_pivotForce.y + _local_14);
            var _local_15:Number = (_arg_1.dt * _local_13);
            _local_16 = (_arg_1.dt * _local_14);
            _local_2.m_linearVelocity.x = (_local_2.m_linearVelocity.x - (_local_2.m_invMass * _local_15));
            _local_2.m_linearVelocity.y = (_local_2.m_linearVelocity.y - (_local_2.m_invMass * _local_16));
            _local_2.m_angularVelocity = (_local_2.m_angularVelocity - (_local_2.m_invI * ((_local_6 * _local_16) - (_local_7 * _local_15))));
            _local_3.m_linearVelocity.x = (_local_3.m_linearVelocity.x + (_local_3.m_invMass * _local_15));
            _local_3.m_linearVelocity.y = (_local_3.m_linearVelocity.y + (_local_3.m_invMass * _local_16));
            _local_3.m_angularVelocity = (_local_3.m_angularVelocity + (_local_3.m_invI * ((_local_8 * _local_16) - (_local_9 * _local_15))));
            if (((this.m_enableMotor) && (!(this.m_limitState == e_equalLimits))))
            {
                _local_17 = ((_local_3.m_angularVelocity - _local_2.m_angularVelocity) - this.m_motorSpeed);
                _local_18 = ((-(_arg_1.inv_dt) * this.m_motorMass) * _local_17);
                _local_19 = this.m_motorForce;
                this.m_motorForce = b2Math.b2Clamp((this.m_motorForce + _local_18), -(this.m_maxMotorTorque), this.m_maxMotorTorque);
                _local_18 = (this.m_motorForce - _local_19);
                _local_2.m_angularVelocity = (_local_2.m_angularVelocity - ((_local_2.m_invI * _arg_1.dt) * _local_18));
                _local_3.m_angularVelocity = (_local_3.m_angularVelocity + ((_local_3.m_invI * _arg_1.dt) * _local_18));
            };
            if (((this.m_enableLimit) && (!(this.m_limitState == e_inactiveLimit))))
            {
                _local_20 = (_local_3.m_angularVelocity - _local_2.m_angularVelocity);
                _local_21 = ((-(_arg_1.inv_dt) * this.m_motorMass) * _local_20);
                if (this.m_limitState == e_equalLimits)
                {
                    this.m_limitForce = (this.m_limitForce + _local_21);
                }
                else
                {
                    if (this.m_limitState == e_atLowerLimit)
                    {
                        _local_10 = this.m_limitForce;
                        this.m_limitForce = b2Math.b2Max((this.m_limitForce + _local_21), 0);
                        _local_21 = (this.m_limitForce - _local_10);
                    }
                    else
                    {
                        if (this.m_limitState == e_atUpperLimit)
                        {
                            _local_10 = this.m_limitForce;
                            this.m_limitForce = b2Math.b2Min((this.m_limitForce + _local_21), 0);
                            _local_21 = (this.m_limitForce - _local_10);
                        };
                    };
                };
                _local_2.m_angularVelocity = (_local_2.m_angularVelocity - ((_local_2.m_invI * _arg_1.dt) * _local_21));
                _local_3.m_angularVelocity = (_local_3.m_angularVelocity + ((_local_3.m_invI * _arg_1.dt) * _local_21));
            };
        }

        override public function SolvePositionConstraints():Boolean
        {
            var _local_1:Number;
            var _local_2:Number;
            var _local_6:b2Mat22;
            var _local_25:Number;
            var _local_26:Number;
            var _local_3:b2Body = m_body1;
            var _local_4:b2Body = m_body2;
            var _local_5:Number = 0;
            _local_6 = _local_3.m_xf.R;
            var _local_7:Number = (this.m_localAnchor1.x - _local_3.m_sweep.localCenter.x);
            var _local_8:Number = (this.m_localAnchor1.y - _local_3.m_sweep.localCenter.y);
            var _local_9:Number = ((_local_6.col1.x * _local_7) + (_local_6.col2.x * _local_8));
            _local_8 = ((_local_6.col1.y * _local_7) + (_local_6.col2.y * _local_8));
            _local_7 = _local_9;
            _local_6 = _local_4.m_xf.R;
            var _local_10:Number = (this.m_localAnchor2.x - _local_4.m_sweep.localCenter.x);
            var _local_11:Number = (this.m_localAnchor2.y - _local_4.m_sweep.localCenter.y);
            _local_9 = ((_local_6.col1.x * _local_10) + (_local_6.col2.x * _local_11));
            _local_11 = ((_local_6.col1.y * _local_10) + (_local_6.col2.y * _local_11));
            _local_10 = _local_9;
            var _local_12:Number = (_local_3.m_sweep.c.x + _local_7);
            var _local_13:Number = (_local_3.m_sweep.c.y + _local_8);
            var _local_14:Number = (_local_4.m_sweep.c.x + _local_10);
            var _local_15:Number = (_local_4.m_sweep.c.y + _local_11);
            var _local_16:Number = (_local_14 - _local_12);
            var _local_17:Number = (_local_15 - _local_13);
            _local_5 = Math.sqrt(((_local_16 * _local_16) + (_local_17 * _local_17)));
            var _local_18:Number = _local_3.m_invMass;
            var _local_19:Number = _local_4.m_invMass;
            var _local_20:Number = _local_3.m_invI;
            var _local_21:Number = _local_4.m_invI;
            this.K1.col1.x = (_local_18 + _local_19);
            this.K1.col2.x = 0;
            this.K1.col1.y = 0;
            this.K1.col2.y = (_local_18 + _local_19);
            this.K2.col1.x = ((_local_20 * _local_8) * _local_8);
            this.K2.col2.x = ((-(_local_20) * _local_7) * _local_8);
            this.K2.col1.y = ((-(_local_20) * _local_7) * _local_8);
            this.K2.col2.y = ((_local_20 * _local_7) * _local_7);
            this.K3.col1.x = ((_local_21 * _local_11) * _local_11);
            this.K3.col2.x = ((-(_local_21) * _local_10) * _local_11);
            this.K3.col1.y = ((-(_local_21) * _local_10) * _local_11);
            this.K3.col2.y = ((_local_21 * _local_10) * _local_10);
            this.K.SetM(this.K1);
            this.K.AddM(this.K2);
            this.K.AddM(this.K3);
            this.K.Solve(tImpulse, -(_local_16), -(_local_17));
            var _local_22:Number = tImpulse.x;
            var _local_23:Number = tImpulse.y;
            _local_3.m_sweep.c.x = (_local_3.m_sweep.c.x - (_local_3.m_invMass * _local_22));
            _local_3.m_sweep.c.y = (_local_3.m_sweep.c.y - (_local_3.m_invMass * _local_23));
            _local_3.m_sweep.a = (_local_3.m_sweep.a - (_local_3.m_invI * ((_local_7 * _local_23) - (_local_8 * _local_22))));
            _local_4.m_sweep.c.x = (_local_4.m_sweep.c.x + (_local_4.m_invMass * _local_22));
            _local_4.m_sweep.c.y = (_local_4.m_sweep.c.y + (_local_4.m_invMass * _local_23));
            _local_4.m_sweep.a = (_local_4.m_sweep.a + (_local_4.m_invI * ((_local_10 * _local_23) - (_local_11 * _local_22))));
            _local_3.SynchronizeTransform();
            _local_4.SynchronizeTransform();
            var _local_24:Number = 0;
            if (((this.m_enableLimit) && (!(this.m_limitState == e_inactiveLimit))))
            {
                _local_25 = ((_local_4.m_sweep.a - _local_3.m_sweep.a) - this.m_referenceAngle);
                _local_26 = 0;
                if (this.m_limitState == e_equalLimits)
                {
                    _local_2 = b2Math.b2Clamp(_local_25, -(b2Settings.b2_maxAngularCorrection), b2Settings.b2_maxAngularCorrection);
                    _local_26 = (-(this.m_motorMass) * _local_2);
                    _local_24 = b2Math.b2Abs(_local_2);
                }
                else
                {
                    if (this.m_limitState == e_atLowerLimit)
                    {
                        _local_2 = (_local_25 - this.m_lowerAngle);
                        _local_24 = b2Math.b2Max(0, -(_local_2));
                        _local_2 = b2Math.b2Clamp((_local_2 + b2Settings.b2_angularSlop), -(b2Settings.b2_maxAngularCorrection), 0);
                        _local_26 = (-(this.m_motorMass) * _local_2);
                        _local_1 = this.m_limitPositionImpulse;
                        this.m_limitPositionImpulse = b2Math.b2Max((this.m_limitPositionImpulse + _local_26), 0);
                        _local_26 = (this.m_limitPositionImpulse - _local_1);
                    }
                    else
                    {
                        if (this.m_limitState == e_atUpperLimit)
                        {
                            _local_2 = (_local_25 - this.m_upperAngle);
                            _local_24 = b2Math.b2Max(0, _local_2);
                            _local_2 = b2Math.b2Clamp((_local_2 - b2Settings.b2_angularSlop), 0, b2Settings.b2_maxAngularCorrection);
                            _local_26 = (-(this.m_motorMass) * _local_2);
                            _local_1 = this.m_limitPositionImpulse;
                            this.m_limitPositionImpulse = b2Math.b2Min((this.m_limitPositionImpulse + _local_26), 0);
                            _local_26 = (this.m_limitPositionImpulse - _local_1);
                        };
                    };
                };
                _local_3.m_sweep.a = (_local_3.m_sweep.a - (_local_3.m_invI * _local_26));
                _local_4.m_sweep.a = (_local_4.m_sweep.a + (_local_4.m_invI * _local_26));
                _local_3.SynchronizeTransform();
                _local_4.SynchronizeTransform();
            };
            return ((_local_5 <= b2Settings.b2_linearSlop) && (_local_24 <= b2Settings.b2_angularSlop));
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.Joints.b2RevoluteJointDef

package Box2D.Dynamics.Joints
{
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Dynamics.b2Body;

    public class b2RevoluteJointDef extends b2JointDef 
    {

        public var localAnchor1:b2Vec2 = new b2Vec2();
        public var localAnchor2:b2Vec2 = new b2Vec2();
        public var referenceAngle:Number;
        public var enableLimit:Boolean;
        public var lowerAngle:Number;
        public var upperAngle:Number;
        public var enableMotor:Boolean;
        public var motorSpeed:Number;
        public var maxMotorTorque:Number;

        public function b2RevoluteJointDef()
        {
            type = b2Joint.e_revoluteJoint;
            this.localAnchor1.Set(0, 0);
            this.localAnchor2.Set(0, 0);
            this.referenceAngle = 0;
            this.lowerAngle = 0;
            this.upperAngle = 0;
            this.maxMotorTorque = 0;
            this.motorSpeed = 0;
            this.enableLimit = false;
            this.enableMotor = false;
        }

        public function Initialize(_arg_1:b2Body, _arg_2:b2Body, _arg_3:b2Vec2):void
        {
            body1 = _arg_1;
            body2 = _arg_2;
            this.localAnchor1 = body1.GetLocalPoint(_arg_3);
            this.localAnchor2 = body2.GetLocalPoint(_arg_3);
            this.referenceAngle = (body2.GetAngle() - body1.GetAngle());
        }


    }
}//package Box2D.Dynamics.Joints

//------------------------------------------------------------
//Box2D.Dynamics.b2Body

package Box2D.Dynamics
{
    import Box2D.Collision.Shapes.b2MassData;
    import Box2D.Common.Math.b2XForm;
    import Box2D.Common.Math.b2Sweep;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Collision.Shapes.b2Shape;
    import Box2D.Dynamics.Joints.b2JointEdge;
    import Box2D.Dynamics.Contacts.b2ContactEdge;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Collision.Shapes.b2ShapeDef;
    import Box2D.Common.Math.b2Math;

    public class b2Body 
    {

        private static var s_massData:b2MassData = new b2MassData();
        private static var s_xf1:b2XForm = new b2XForm();
        public static var e_frozenFlag:uint = 2;
        public static var e_islandFlag:uint = 4;
        public static var e_sleepFlag:uint = 8;
        public static var e_allowSleepFlag:uint = 16;
        public static var e_bulletFlag:uint = 32;
        public static var e_fixedRotationFlag:uint = 64;
        public static var e_staticType:uint = 1;
        public static var e_dynamicType:uint = 2;
        public static var e_maxTypes:uint = 3;

        public var m_flags:uint;
        public var m_type:int;
        public var m_xf:b2XForm = new b2XForm();
        public var m_sweep:b2Sweep = new b2Sweep();
        public var m_linearVelocity:b2Vec2 = new b2Vec2();
        public var m_angularVelocity:Number;
        public var m_force:b2Vec2 = new b2Vec2();
        public var m_torque:Number;
        public var m_world:b2World;
        public var m_prev:b2Body;
        public var m_next:b2Body;
        public var m_shapeList:b2Shape;
        public var m_shapeCount:int;
        public var m_jointList:b2JointEdge;
        public var m_contactList:b2ContactEdge;
        public var m_mass:Number;
        public var m_invMass:Number;
        public var m_I:Number;
        public var m_invI:Number;
        public var m_linearDamping:Number;
        public var m_angularDamping:Number;
        public var m_sleepTime:Number;
        public var m_userData:*;

        public function b2Body(_arg_1:b2BodyDef, _arg_2:b2World)
        {
            this.m_flags = 0;
            if (_arg_1.isBullet)
            {
                this.m_flags = (this.m_flags | e_bulletFlag);
            };
            if (_arg_1.fixedRotation)
            {
                this.m_flags = (this.m_flags | e_fixedRotationFlag);
            };
            if (_arg_1.allowSleep)
            {
                this.m_flags = (this.m_flags | e_allowSleepFlag);
            };
            if (_arg_1.isSleeping)
            {
                this.m_flags = (this.m_flags | e_sleepFlag);
            };
            this.m_world = _arg_2;
            this.m_xf.position.SetV(_arg_1.position);
            this.m_xf.R.Set(_arg_1.angle);
            this.m_sweep.localCenter.SetV(_arg_1.massData.center);
            this.m_sweep.t0 = 1;
            this.m_sweep.a0 = (this.m_sweep.a = _arg_1.angle);
            var _local_3:b2Mat22 = this.m_xf.R;
            var _local_4:b2Vec2 = this.m_sweep.localCenter;
            this.m_sweep.c.x = ((_local_3.col1.x * _local_4.x) + (_local_3.col2.x * _local_4.y));
            this.m_sweep.c.y = ((_local_3.col1.y * _local_4.x) + (_local_3.col2.y * _local_4.y));
            this.m_sweep.c.x = (this.m_sweep.c.x + this.m_xf.position.x);
            this.m_sweep.c.y = (this.m_sweep.c.y + this.m_xf.position.y);
            this.m_sweep.c0.SetV(this.m_sweep.c);
            this.m_jointList = null;
            this.m_contactList = null;
            this.m_prev = null;
            this.m_next = null;
            this.m_linearDamping = _arg_1.linearDamping;
            this.m_angularDamping = _arg_1.angularDamping;
            this.m_force.Set(0, 0);
            this.m_torque = 0;
            this.m_linearVelocity.SetZero();
            this.m_angularVelocity = 0;
            this.m_sleepTime = 0;
            this.m_invMass = 0;
            this.m_I = 0;
            this.m_invI = 0;
            this.m_mass = _arg_1.massData.mass;
            if (this.m_mass > 0)
            {
                this.m_invMass = (1 / this.m_mass);
            };
            if ((this.m_flags & b2Body.e_fixedRotationFlag) == 0)
            {
                this.m_I = _arg_1.massData.I;
            };
            if (this.m_I > 0)
            {
                this.m_invI = (1 / this.m_I);
            };
            if (((this.m_invMass == 0) && (this.m_invI == 0)))
            {
                this.m_type = e_staticType;
            }
            else
            {
                this.m_type = e_dynamicType;
            };
            this.m_userData = _arg_1.userData;
            this.m_shapeList = null;
            this.m_shapeCount = 0;
        }

        public function CreateShape(_arg_1:b2ShapeDef):b2Shape
        {
            var _local_2:b2Shape;
            if (this.m_world.m_lock == true)
            {
                return (null);
            };
            _local_2 = b2Shape.Create(_arg_1, this.m_world.m_blockAllocator);
            _local_2.m_next = this.m_shapeList;
            this.m_shapeList = _local_2;
            this.m_shapeCount++;
            _local_2.m_body = this;
            _local_2.CreateProxy(this.m_world.m_broadPhase, this.m_xf);
            _local_2.UpdateSweepRadius(this.m_sweep.localCenter);
            return (_local_2);
        }

        public function DestroyShape(_arg_1:b2Shape):void
        {
            if (this.m_world.m_lock == true)
            {
                return;
            };
            _arg_1.DestroyProxy(this.m_world.m_broadPhase);
            var _local_2:b2Shape = this.m_shapeList;
            var _local_3:b2Shape;
            var _local_4:Boolean;
            while (_local_2 != null)
            {
                if (_local_2 == _arg_1)
                {
                    if (_local_3)
                    {
                        _local_3.m_next = _arg_1.m_next;
                    }
                    else
                    {
                        this.m_shapeList = _arg_1.m_next;
                    };
                    _local_4 = true;
                    break;
                };
                _local_3 = _local_2;
                _local_2 = _local_2.m_next;
            };
            _arg_1.m_body = null;
            _arg_1.m_next = null;
            this.m_shapeCount--;
            b2Shape.Destroy(_arg_1, this.m_world.m_blockAllocator);
        }

        public function SetMass(_arg_1:b2MassData):void
        {
            var _local_2:b2Shape;
            if (this.m_world.m_lock == true)
            {
                return;
            };
            this.m_invMass = 0;
            this.m_I = 0;
            this.m_invI = 0;
            this.m_mass = _arg_1.mass;
            if (this.m_mass > 0)
            {
                this.m_invMass = (1 / this.m_mass);
            };
            if ((this.m_flags & b2Body.e_fixedRotationFlag) == 0)
            {
                this.m_I = _arg_1.I;
            };
            if (this.m_I > 0)
            {
                this.m_invI = (1 / this.m_I);
            };
            this.m_sweep.localCenter.SetV(_arg_1.center);
            var _local_3:b2Mat22 = this.m_xf.R;
            var _local_4:b2Vec2 = this.m_sweep.localCenter;
            this.m_sweep.c.x = ((_local_3.col1.x * _local_4.x) + (_local_3.col2.x * _local_4.y));
            this.m_sweep.c.y = ((_local_3.col1.y * _local_4.x) + (_local_3.col2.y * _local_4.y));
            this.m_sweep.c.x = (this.m_sweep.c.x + this.m_xf.position.x);
            this.m_sweep.c.y = (this.m_sweep.c.y + this.m_xf.position.y);
            this.m_sweep.c0.SetV(this.m_sweep.c);
            _local_2 = this.m_shapeList;
            while (_local_2)
            {
                _local_2.UpdateSweepRadius(this.m_sweep.localCenter);
                _local_2 = _local_2.m_next;
            };
            var _local_5:int = this.m_type;
            if (((this.m_invMass == 0) && (this.m_invI == 0)))
            {
                this.m_type = e_staticType;
            }
            else
            {
                this.m_type = e_dynamicType;
            };
            if (_local_5 != this.m_type)
            {
                _local_2 = this.m_shapeList;
                while (_local_2)
                {
                    _local_2.RefilterProxy(this.m_world.m_broadPhase, this.m_xf);
                    _local_2 = _local_2.m_next;
                };
            };
        }

        public function SetMassFromShapes():void
        {
            var _local_1:b2Shape;
            if (this.m_world.m_lock == true)
            {
                return;
            };
            this.m_mass = 0;
            this.m_invMass = 0;
            this.m_I = 0;
            this.m_invI = 0;
            var _local_2:Number = 0;
            var _local_3:Number = 0;
            var _local_4:b2MassData = s_massData;
            _local_1 = this.m_shapeList;
            while (_local_1)
            {
                _local_1.ComputeMass(_local_4);
                this.m_mass = (this.m_mass + _local_4.mass);
                _local_2 = (_local_2 + (_local_4.mass * _local_4.center.x));
                _local_3 = (_local_3 + (_local_4.mass * _local_4.center.y));
                this.m_I = (this.m_I + _local_4.I);
                _local_1 = _local_1.m_next;
            };
            if (this.m_mass > 0)
            {
                this.m_invMass = (1 / this.m_mass);
                _local_2 = (_local_2 * this.m_invMass);
                _local_3 = (_local_3 * this.m_invMass);
            };
            if (((this.m_I > 0) && ((this.m_flags & e_fixedRotationFlag) == 0)))
            {
                this.m_I = (this.m_I - (this.m_mass * ((_local_2 * _local_2) + (_local_3 * _local_3))));
                this.m_invI = (1 / this.m_I);
            }
            else
            {
                this.m_I = 0;
                this.m_invI = 0;
            };
            this.m_sweep.localCenter.Set(_local_2, _local_3);
            var _local_5:b2Mat22 = this.m_xf.R;
            var _local_6:b2Vec2 = this.m_sweep.localCenter;
            this.m_sweep.c.x = ((_local_5.col1.x * _local_6.x) + (_local_5.col2.x * _local_6.y));
            this.m_sweep.c.y = ((_local_5.col1.y * _local_6.x) + (_local_5.col2.y * _local_6.y));
            this.m_sweep.c.x = (this.m_sweep.c.x + this.m_xf.position.x);
            this.m_sweep.c.y = (this.m_sweep.c.y + this.m_xf.position.y);
            this.m_sweep.c0.SetV(this.m_sweep.c);
            _local_1 = this.m_shapeList;
            while (_local_1)
            {
                _local_1.UpdateSweepRadius(this.m_sweep.localCenter);
                _local_1 = _local_1.m_next;
            };
            var _local_7:int = this.m_type;
            if (((this.m_invMass == 0) && (this.m_invI == 0)))
            {
                this.m_type = e_staticType;
            }
            else
            {
                this.m_type = e_dynamicType;
            };
            if (_local_7 != this.m_type)
            {
                _local_1 = this.m_shapeList;
                while (_local_1)
                {
                    _local_1.RefilterProxy(this.m_world.m_broadPhase, this.m_xf);
                    _local_1 = _local_1.m_next;
                };
            };
        }

        public function SetXForm(_arg_1:b2Vec2, _arg_2:Number):Boolean
        {
            var _local_3:b2Shape;
            var _local_7:Boolean;
            if (this.m_world.m_lock == true)
            {
                return (true);
            };
            if (this.IsFrozen())
            {
                return (false);
            };
            this.m_xf.R.Set(_arg_2);
            this.m_xf.position.SetV(_arg_1);
            var _local_4:b2Mat22 = this.m_xf.R;
            var _local_5:b2Vec2 = this.m_sweep.localCenter;
            this.m_sweep.c.x = ((_local_4.col1.x * _local_5.x) + (_local_4.col2.x * _local_5.y));
            this.m_sweep.c.y = ((_local_4.col1.y * _local_5.x) + (_local_4.col2.y * _local_5.y));
            this.m_sweep.c.x = (this.m_sweep.c.x + this.m_xf.position.x);
            this.m_sweep.c.y = (this.m_sweep.c.y + this.m_xf.position.y);
            this.m_sweep.c0.SetV(this.m_sweep.c);
            this.m_sweep.a0 = (this.m_sweep.a = _arg_2);
            var _local_6:Boolean;
            _local_3 = this.m_shapeList;
            while (_local_3)
            {
                _local_7 = _local_3.Synchronize(this.m_world.m_broadPhase, this.m_xf, this.m_xf);
                if (_local_7 == false)
                {
                    _local_6 = true;
                    break;
                };
                _local_3 = _local_3.m_next;
            };
            if (_local_6 == true)
            {
                this.m_flags = (this.m_flags | e_frozenFlag);
                this.m_linearVelocity.SetZero();
                this.m_angularVelocity = 0;
                _local_3 = this.m_shapeList;
                while (_local_3)
                {
                    _local_3.DestroyProxy(this.m_world.m_broadPhase);
                    _local_3 = _local_3.m_next;
                };
                return (false);
            };
            this.m_world.m_broadPhase.Commit();
            return (true);
        }

        public function GetXForm():b2XForm
        {
            return (this.m_xf);
        }

        public function GetPosition():b2Vec2
        {
            return (this.m_xf.position);
        }

        public function GetAngle():Number
        {
            return (this.m_sweep.a);
        }

        public function GetWorldCenter():b2Vec2
        {
            return (this.m_sweep.c);
        }

        public function GetLocalCenter():b2Vec2
        {
            return (this.m_sweep.localCenter);
        }

        public function SetLinearVelocity(_arg_1:b2Vec2):void
        {
            this.m_linearVelocity.SetV(_arg_1);
        }

        public function GetLinearVelocity():b2Vec2
        {
            return (this.m_linearVelocity);
        }

        public function SetAngularVelocity(_arg_1:Number):void
        {
            this.m_angularVelocity = _arg_1;
        }

        public function GetAngularVelocity():Number
        {
            return (this.m_angularVelocity);
        }

        public function ApplyForce(_arg_1:b2Vec2, _arg_2:b2Vec2):void
        {
            if (this.IsSleeping())
            {
                this.WakeUp();
            };
            this.m_force.x = (this.m_force.x + _arg_1.x);
            this.m_force.y = (this.m_force.y + _arg_1.y);
            this.m_torque = (this.m_torque + (((_arg_2.x - this.m_sweep.c.x) * _arg_1.y) - ((_arg_2.y - this.m_sweep.c.y) * _arg_1.x)));
        }

        public function ApplyTorque(_arg_1:Number):void
        {
            if (this.IsSleeping())
            {
                this.WakeUp();
            };
            this.m_torque = (this.m_torque + _arg_1);
        }

        public function ApplyImpulse(_arg_1:b2Vec2, _arg_2:b2Vec2):void
        {
            if (this.IsSleeping())
            {
                this.WakeUp();
            };
            this.m_linearVelocity.x = (this.m_linearVelocity.x + (this.m_invMass * _arg_1.x));
            this.m_linearVelocity.y = (this.m_linearVelocity.y + (this.m_invMass * _arg_1.y));
            this.m_angularVelocity = (this.m_angularVelocity + (this.m_invI * (((_arg_2.x - this.m_sweep.c.x) * _arg_1.y) - ((_arg_2.y - this.m_sweep.c.y) * _arg_1.x))));
        }

        public function GetMass():Number
        {
            return (this.m_mass);
        }

        public function GetInertia():Number
        {
            return (this.m_I);
        }

        public function GetWorldPoint(_arg_1:b2Vec2):b2Vec2
        {
            var _local_2:b2Mat22 = this.m_xf.R;
            var _local_3:b2Vec2 = new b2Vec2(((_local_2.col1.x * _arg_1.x) + (_local_2.col2.x * _arg_1.y)), ((_local_2.col1.y * _arg_1.x) + (_local_2.col2.y * _arg_1.y)));
            _local_3.x = (_local_3.x + this.m_xf.position.x);
            _local_3.y = (_local_3.y + this.m_xf.position.y);
            return (_local_3);
        }

        public function GetWorldVector(_arg_1:b2Vec2):b2Vec2
        {
            return (b2Math.b2MulMV(this.m_xf.R, _arg_1));
        }

        public function GetLocalPoint(_arg_1:b2Vec2):b2Vec2
        {
            return (b2Math.b2MulXT(this.m_xf, _arg_1));
        }

        public function GetLocalVector(_arg_1:b2Vec2):b2Vec2
        {
            return (b2Math.b2MulTMV(this.m_xf.R, _arg_1));
        }

        public function GetLinearVelocityFromWorldPoint(_arg_1:b2Vec2):b2Vec2
        {
            return (new b2Vec2((this.m_linearVelocity.x - (this.m_angularVelocity * (_arg_1.y - this.m_sweep.c.y))), (this.m_linearVelocity.y + (this.m_angularVelocity * (_arg_1.x - this.m_sweep.c.x)))));
        }

        public function GetLinearVelocityFromLocalPoint(_arg_1:b2Vec2):b2Vec2
        {
            var _local_2:b2Mat22 = this.m_xf.R;
            var _local_3:b2Vec2 = new b2Vec2(((_local_2.col1.x * _arg_1.x) + (_local_2.col2.x * _arg_1.y)), ((_local_2.col1.y * _arg_1.x) + (_local_2.col2.y * _arg_1.y)));
            _local_3.x = (_local_3.x + this.m_xf.position.x);
            _local_3.y = (_local_3.y + this.m_xf.position.y);
            return (new b2Vec2((this.m_linearVelocity.x + (this.m_angularVelocity * (_local_3.y - this.m_sweep.c.y))), (this.m_linearVelocity.x - (this.m_angularVelocity * (_local_3.x - this.m_sweep.c.x)))));
        }

        public function IsBullet():Boolean
        {
            return ((this.m_flags & e_bulletFlag) == e_bulletFlag);
        }

        public function SetBullet(_arg_1:Boolean):void
        {
            if (_arg_1)
            {
                this.m_flags = (this.m_flags | e_bulletFlag);
            }
            else
            {
                this.m_flags = (this.m_flags & (~(e_bulletFlag)));
            };
        }

        public function IsStatic():Boolean
        {
            return (this.m_type == e_staticType);
        }

        public function IsDynamic():Boolean
        {
            return (this.m_type == e_dynamicType);
        }

        public function IsFrozen():Boolean
        {
            return ((this.m_flags & e_frozenFlag) == e_frozenFlag);
        }

        public function IsSleeping():Boolean
        {
            return ((this.m_flags & e_sleepFlag) == e_sleepFlag);
        }

        public function AllowSleeping(_arg_1:Boolean):void
        {
            if (_arg_1)
            {
                this.m_flags = (this.m_flags | e_allowSleepFlag);
            }
            else
            {
                this.m_flags = (this.m_flags & (~(e_allowSleepFlag)));
                this.WakeUp();
            };
        }

        public function WakeUp():void
        {
            this.m_flags = (this.m_flags & (~(e_sleepFlag)));
            this.m_sleepTime = 0;
        }

        public function PutToSleep():void
        {
            this.m_flags = (this.m_flags | e_sleepFlag);
            this.m_sleepTime = 0;
            this.m_linearVelocity.SetZero();
            this.m_angularVelocity = 0;
            this.m_force.SetZero();
            this.m_torque = 0;
        }

        public function GetShapeList():b2Shape
        {
            return (this.m_shapeList);
        }

        public function GetJointList():b2JointEdge
        {
            return (this.m_jointList);
        }

        public function GetNext():b2Body
        {
            return (this.m_next);
        }

        public function GetUserData():*
        {
            return (this.m_userData);
        }

        public function SetUserData(_arg_1:*):void
        {
            this.m_userData = _arg_1;
        }

        public function GetWorld():b2World
        {
            return (this.m_world);
        }

        public function SynchronizeShapes():Boolean
        {
            var _local_4:b2Shape;
            var _local_1:b2XForm = s_xf1;
            _local_1.R.Set(this.m_sweep.a0);
            var _local_2:b2Mat22 = _local_1.R;
            var _local_3:b2Vec2 = this.m_sweep.localCenter;
            _local_1.position.x = (this.m_sweep.c0.x - ((_local_2.col1.x * _local_3.x) + (_local_2.col2.x * _local_3.y)));
            _local_1.position.y = (this.m_sweep.c0.y - ((_local_2.col1.y * _local_3.x) + (_local_2.col2.y * _local_3.y)));
            var _local_5:Boolean = true;
            _local_4 = this.m_shapeList;
            while (_local_4)
            {
                _local_5 = _local_4.Synchronize(this.m_world.m_broadPhase, _local_1, this.m_xf);
                if (_local_5 == false) break;
                _local_4 = _local_4.m_next;
            };
            if (_local_5 == false)
            {
                this.m_flags = (this.m_flags | e_frozenFlag);
                this.m_linearVelocity.SetZero();
                this.m_angularVelocity = 0;
                _local_4 = this.m_shapeList;
                while (_local_4)
                {
                    _local_4.DestroyProxy(this.m_world.m_broadPhase);
                    _local_4 = _local_4.m_next;
                };
                return (false);
            };
            return (true);
        }

        public function SynchronizeTransform():void
        {
            this.m_xf.R.Set(this.m_sweep.a);
            var _local_1:b2Mat22 = this.m_xf.R;
            var _local_2:b2Vec2 = this.m_sweep.localCenter;
            this.m_xf.position.x = (this.m_sweep.c.x - ((_local_1.col1.x * _local_2.x) + (_local_1.col2.x * _local_2.y)));
            this.m_xf.position.y = (this.m_sweep.c.y - ((_local_1.col1.y * _local_2.x) + (_local_1.col2.y * _local_2.y)));
        }

        public function IsConnected(_arg_1:b2Body):Boolean
        {
            var _local_2:b2JointEdge = this.m_jointList;
            while (_local_2)
            {
                if (_local_2.other == _arg_1)
                {
                    return (_local_2.joint.m_collideConnected == false);
                };
                _local_2 = _local_2.next;
            };
            return (false);
        }

        public function Advance(_arg_1:Number):void
        {
            this.m_sweep.Advance(_arg_1);
            this.m_sweep.c.SetV(this.m_sweep.c0);
            this.m_sweep.a = this.m_sweep.a0;
            this.SynchronizeTransform();
        }


    }
}//package Box2D.Dynamics

//------------------------------------------------------------
//Box2D.Dynamics.b2BodyDef

package Box2D.Dynamics
{
    import Box2D.Collision.Shapes.b2MassData;
    import Box2D.Common.Math.b2Vec2;

    public class b2BodyDef 
    {

        public var massData:b2MassData = new b2MassData();
        public var userData:*;
        public var position:b2Vec2 = new b2Vec2();
        public var angle:Number;
        public var linearDamping:Number;
        public var angularDamping:Number;
        public var allowSleep:Boolean;
        public var isSleeping:Boolean;
        public var fixedRotation:Boolean;
        public var isBullet:Boolean;

        public function b2BodyDef()
        {
            this.massData.center.SetZero();
            this.massData.mass = 0;
            this.massData.I = 0;
            this.userData = null;
            this.position.Set(0, 0);
            this.angle = 0;
            this.linearDamping = 0;
            this.angularDamping = 0;
            this.allowSleep = true;
            this.isSleeping = false;
            this.fixedRotation = false;
            this.isBullet = false;
        }

    }
}//package Box2D.Dynamics

//------------------------------------------------------------
//Box2D.Dynamics.b2BoundaryListener

package Box2D.Dynamics
{
    public class b2BoundaryListener 
    {


        public function Violation(_arg_1:b2Body):void
        {
        }


    }
}//package Box2D.Dynamics

//------------------------------------------------------------
//Box2D.Dynamics.b2ContactFilter

package Box2D.Dynamics
{
    import Box2D.Collision.Shapes.b2FilterData;
    import Box2D.Collision.Shapes.b2Shape;

    public class b2ContactFilter 
    {

        public static var b2_defaultFilter:b2ContactFilter = new (b2ContactFilter)();


        public function ShouldCollide(_arg_1:b2Shape, _arg_2:b2Shape):Boolean
        {
            var _local_3:b2FilterData = _arg_1.GetFilterData();
            var _local_4:b2FilterData = _arg_2.GetFilterData();
            if (((_local_3.groupIndex == _local_4.groupIndex) && (!(_local_3.groupIndex == 0))))
            {
                return (_local_3.groupIndex > 0);
            };
            var _local_5:Boolean = ((!((_local_3.maskBits & _local_4.categoryBits) == 0)) && (!((_local_3.categoryBits & _local_4.maskBits) == 0)));
            return (_local_5);
        }


    }
}//package Box2D.Dynamics

//------------------------------------------------------------
//Box2D.Dynamics.b2ContactListener

package Box2D.Dynamics
{
    import Box2D.Collision.b2ContactPoint;
    import Box2D.Dynamics.Contacts.b2ContactResult;

    public class b2ContactListener 
    {


        public function Add(_arg_1:b2ContactPoint):void
        {
        }

        public function Persist(_arg_1:b2ContactPoint):void
        {
        }

        public function Remove(_arg_1:b2ContactPoint):void
        {
        }

        public function Result(_arg_1:b2ContactResult):void
        {
            trace(1);
        }


    }
}//package Box2D.Dynamics

//------------------------------------------------------------
//Box2D.Dynamics.b2ContactManager

package Box2D.Dynamics
{
    import Box2D.Collision.b2PairCallback;
    import Box2D.Collision.b2ContactPoint;
    import Box2D.Dynamics.Contacts.b2NullContact;
    import Box2D.Collision.Shapes.b2Shape;
    import Box2D.Dynamics.Contacts.b2Contact;
    import Box2D.Collision.b2Manifold;
    import Box2D.Collision.b2ManifoldPoint;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Collision.Shapes.*;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Common.*;
    import Box2D.Dynamics.Contacts.*;

    public class b2ContactManager extends b2PairCallback 
    {

        private static const s_evalCP:b2ContactPoint = new b2ContactPoint();

        public var m_world:b2World;
        public var m_nullContact:b2NullContact = new b2NullContact();
        public var m_destroyImmediate:Boolean;

        public function b2ContactManager()
        {
            this.m_world = null;
            this.m_destroyImmediate = false;
        }

        override public function PairAdded(_arg_1:*, _arg_2:*):*
        {
            var _local_3:b2Shape = (_arg_1 as b2Shape);
            var _local_4:b2Shape = (_arg_2 as b2Shape);
            var _local_5:b2Body = _local_3.m_body;
            var _local_6:b2Body = _local_4.m_body;
            if (((_local_5.IsStatic()) && (_local_6.IsStatic())))
            {
                return (this.m_nullContact);
            };
            if (_local_3.m_body == _local_4.m_body)
            {
                return (this.m_nullContact);
            };
            if (_local_6.IsConnected(_local_5))
            {
                return (this.m_nullContact);
            };
            if (((!(this.m_world.m_contactFilter == null)) && (this.m_world.m_contactFilter.ShouldCollide(_local_3, _local_4) == false)))
            {
                return (this.m_nullContact);
            };
            var _local_7:b2Contact = b2Contact.Create(_local_3, _local_4, this.m_world.m_blockAllocator);
            if (_local_7 == null)
            {
                return (this.m_nullContact);
            };
            _local_3 = _local_7.m_shape1;
            _local_4 = _local_7.m_shape2;
            _local_5 = _local_3.m_body;
            _local_6 = _local_4.m_body;
            _local_7.m_prev = null;
            _local_7.m_next = this.m_world.m_contactList;
            if (this.m_world.m_contactList != null)
            {
                this.m_world.m_contactList.m_prev = _local_7;
            };
            this.m_world.m_contactList = _local_7;
            _local_7.m_node1.contact = _local_7;
            _local_7.m_node1.other = _local_6;
            _local_7.m_node1.prev = null;
            _local_7.m_node1.next = _local_5.m_contactList;
            if (_local_5.m_contactList != null)
            {
                _local_5.m_contactList.prev = _local_7.m_node1;
            };
            _local_5.m_contactList = _local_7.m_node1;
            _local_7.m_node2.contact = _local_7;
            _local_7.m_node2.other = _local_5;
            _local_7.m_node2.prev = null;
            _local_7.m_node2.next = _local_6.m_contactList;
            if (_local_6.m_contactList != null)
            {
                _local_6.m_contactList.prev = _local_7.m_node2;
            };
            _local_6.m_contactList = _local_7.m_node2;
            this.m_world.m_contactCount++;
            return (_local_7);
        }

        override public function PairRemoved(_arg_1:*, _arg_2:*, _arg_3:*):void
        {
            if (_arg_3 == null)
            {
                return;
            };
            var _local_4:b2Contact = (_arg_3 as b2Contact);
            if (_local_4 == this.m_nullContact)
            {
                return;
            };
            this.Destroy(_local_4);
        }

        public function Destroy(_arg_1:b2Contact):void
        {
            var _local_7:b2Body;
            var _local_8:b2Body;
            var _local_9:Array;
            var _local_10:b2ContactPoint;
            var _local_11:int;
            var _local_12:b2Manifold;
            var _local_13:int;
            var _local_14:b2ManifoldPoint;
            var _local_15:b2Vec2;
            var _local_16:b2Vec2;
            var _local_2:b2Shape = _arg_1.m_shape1;
            var _local_3:b2Shape = _arg_1.m_shape2;
            var _local_4:int = _arg_1.m_manifoldCount;
            if (((_local_4 > 0) && (this.m_world.m_contactListener)))
            {
                _local_7 = _local_2.m_body;
                _local_8 = _local_3.m_body;
                _local_9 = _arg_1.GetManifolds();
                _local_10 = s_evalCP;
                _local_10.shape1 = _arg_1.m_shape1;
                _local_10.shape2 = _arg_1.m_shape2;
                _local_10.friction = _arg_1.m_friction;
                _local_10.restitution = _arg_1.m_restitution;
                _local_11 = 0;
                while (_local_11 < _local_4)
                {
                    _local_12 = _local_9[_local_11];
                    _local_10.normal.SetV(_local_12.normal);
                    _local_13 = 0;
                    while (_local_13 < _local_12.pointCount)
                    {
                        _local_14 = _local_12.points[_local_13];
                        _local_10.position = _local_7.GetWorldPoint(_local_14.localPoint1);
                        _local_15 = _local_7.GetLinearVelocityFromLocalPoint(_local_14.localPoint1);
                        _local_16 = _local_8.GetLinearVelocityFromLocalPoint(_local_14.localPoint2);
                        _local_10.velocity.Set((_local_16.x - _local_15.x), (_local_16.y - _local_15.y));
                        _local_10.separation = _local_14.separation;
                        _local_10.id.key = _local_14.id._key;
                        this.m_world.m_contactListener.Remove(_local_10);
                        _local_13++;
                    };
                    _local_11++;
                };
            };
            if (_arg_1.m_prev)
            {
                _arg_1.m_prev.m_next = _arg_1.m_next;
            };
            if (_arg_1.m_next)
            {
                _arg_1.m_next.m_prev = _arg_1.m_prev;
            };
            if (_arg_1 == this.m_world.m_contactList)
            {
                this.m_world.m_contactList = _arg_1.m_next;
            };
            var _local_5:b2Body = _local_2.m_body;
            var _local_6:b2Body = _local_3.m_body;
            if (_arg_1.m_node1.prev)
            {
                _arg_1.m_node1.prev.next = _arg_1.m_node1.next;
            };
            if (_arg_1.m_node1.next)
            {
                _arg_1.m_node1.next.prev = _arg_1.m_node1.prev;
            };
            if (_arg_1.m_node1 == _local_5.m_contactList)
            {
                _local_5.m_contactList = _arg_1.m_node1.next;
            };
            if (_arg_1.m_node2.prev)
            {
                _arg_1.m_node2.prev.next = _arg_1.m_node2.next;
            };
            if (_arg_1.m_node2.next)
            {
                _arg_1.m_node2.next.prev = _arg_1.m_node2.prev;
            };
            if (_arg_1.m_node2 == _local_6.m_contactList)
            {
                _local_6.m_contactList = _arg_1.m_node2.next;
            };
            b2Contact.Destroy(_arg_1, this.m_world.m_blockAllocator);
            this.m_world.m_contactCount--;
        }

        public function Collide():void
        {
            var _local_2:b2Body;
            var _local_3:b2Body;
            var _local_1:b2Contact = this.m_world.m_contactList;
            while (_local_1)
            {
                _local_2 = _local_1.m_shape1.m_body;
                _local_3 = _local_1.m_shape2.m_body;
                if (!((_local_2.IsSleeping()) && (_local_3.IsSleeping())))
                {
                    _local_1.Update(this.m_world.m_contactListener);
                };
                _local_1 = _local_1.m_next;
            };
        }


    }
}//package Box2D.Dynamics

//------------------------------------------------------------
//Box2D.Dynamics.b2DebugDraw

package Box2D.Dynamics
{
    import flash.display.Sprite;
    import Box2D.Common.b2Color;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2XForm;
    import Box2D.Collision.Shapes.*;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Common.*;
    import Box2D.Dynamics.Contacts.*;

    public class b2DebugDraw 
    {

        public static var e_shapeBit:uint = 1;
        public static var e_jointBit:uint = 2;
        public static var e_coreShapeBit:uint = 4;
        public static var e_aabbBit:uint = 8;
        public static var e_obbBit:uint = 16;
        public static var e_pairBit:uint = 32;
        public static var e_centerOfMassBit:uint = 64;

        public var m_drawFlags:uint;
        public var m_sprite:Sprite;
        public var m_drawScale:Number = 1;
        public var m_lineThickness:Number = 1;
        public var m_alpha:Number = 1;
        public var m_fillAlpha:Number = 1;
        public var m_xformScale:Number = 1;

        public function b2DebugDraw()
        {
            this.m_drawFlags = 0;
        }

        public function SetFlags(_arg_1:uint):void
        {
            this.m_drawFlags = _arg_1;
        }

        public function GetFlags():uint
        {
            return (this.m_drawFlags);
        }

        public function AppendFlags(_arg_1:uint):void
        {
            this.m_drawFlags = (this.m_drawFlags | _arg_1);
        }

        public function ClearFlags(_arg_1:uint):void
        {
            this.m_drawFlags = (this.m_drawFlags & (~(_arg_1)));
        }

        public function DrawPolygon(_arg_1:Array, _arg_2:int, _arg_3:b2Color):void
        {
            this.m_sprite.graphics.lineStyle(this.m_lineThickness, _arg_3.color, this.m_alpha);
            this.m_sprite.graphics.moveTo((_arg_1[0].x * this.m_drawScale), (_arg_1[0].y * this.m_drawScale));
            var _local_4:int = 1;
            while (_local_4 < _arg_2)
            {
                this.m_sprite.graphics.lineTo((_arg_1[_local_4].x * this.m_drawScale), (_arg_1[_local_4].y * this.m_drawScale));
                _local_4++;
            };
            this.m_sprite.graphics.lineTo((_arg_1[0].x * this.m_drawScale), (_arg_1[0].y * this.m_drawScale));
        }

        public function DrawSolidPolygon(_arg_1:Array, _arg_2:int, _arg_3:b2Color):void
        {
            this.m_sprite.graphics.lineStyle(this.m_lineThickness, _arg_3.color, this.m_alpha);
            this.m_sprite.graphics.moveTo((_arg_1[0].x * this.m_drawScale), (_arg_1[0].y * this.m_drawScale));
            this.m_sprite.graphics.beginFill(_arg_3.color, this.m_fillAlpha);
            var _local_4:int = 1;
            while (_local_4 < _arg_2)
            {
                this.m_sprite.graphics.lineTo((_arg_1[_local_4].x * this.m_drawScale), (_arg_1[_local_4].y * this.m_drawScale));
                _local_4++;
            };
            this.m_sprite.graphics.lineTo((_arg_1[0].x * this.m_drawScale), (_arg_1[0].y * this.m_drawScale));
            this.m_sprite.graphics.endFill();
        }

        public function DrawCircle(_arg_1:b2Vec2, _arg_2:Number, _arg_3:b2Color):void
        {
            this.m_sprite.graphics.lineStyle(this.m_lineThickness, _arg_3.color, this.m_alpha);
            this.m_sprite.graphics.drawCircle((_arg_1.x * this.m_drawScale), (_arg_1.y * this.m_drawScale), (_arg_2 * this.m_drawScale));
        }

        public function DrawSolidCircle(_arg_1:b2Vec2, _arg_2:Number, _arg_3:b2Vec2, _arg_4:b2Color):void
        {
            this.m_sprite.graphics.lineStyle(this.m_lineThickness, _arg_4.color, this.m_alpha);
            this.m_sprite.graphics.moveTo(0, 0);
            this.m_sprite.graphics.beginFill(_arg_4.color, this.m_fillAlpha);
            this.m_sprite.graphics.drawCircle((_arg_1.x * this.m_drawScale), (_arg_1.y * this.m_drawScale), (_arg_2 * this.m_drawScale));
            this.m_sprite.graphics.endFill();
            this.m_sprite.graphics.moveTo((_arg_1.x * this.m_drawScale), (_arg_1.y * this.m_drawScale));
            this.m_sprite.graphics.lineTo(((_arg_1.x + (_arg_3.x * _arg_2)) * this.m_drawScale), ((_arg_1.y + (_arg_3.y * _arg_2)) * this.m_drawScale));
        }

        public function DrawSegment(_arg_1:b2Vec2, _arg_2:b2Vec2, _arg_3:b2Color):void
        {
            this.m_sprite.graphics.lineStyle(this.m_lineThickness, _arg_3.color, this.m_alpha);
            this.m_sprite.graphics.moveTo((_arg_1.x * this.m_drawScale), (_arg_1.y * this.m_drawScale));
            this.m_sprite.graphics.lineTo((_arg_2.x * this.m_drawScale), (_arg_2.y * this.m_drawScale));
        }

        public function DrawXForm(_arg_1:b2XForm):void
        {
            this.m_sprite.graphics.lineStyle(this.m_lineThickness, 0xFF0000, this.m_alpha);
            this.m_sprite.graphics.moveTo((_arg_1.position.x * this.m_drawScale), (_arg_1.position.y * this.m_drawScale));
            this.m_sprite.graphics.lineTo(((_arg_1.position.x + (this.m_xformScale * _arg_1.R.col1.x)) * this.m_drawScale), ((_arg_1.position.y + (this.m_xformScale * _arg_1.R.col1.y)) * this.m_drawScale));
            this.m_sprite.graphics.lineStyle(this.m_lineThickness, 0xFF00, this.m_alpha);
            this.m_sprite.graphics.moveTo((_arg_1.position.x * this.m_drawScale), (_arg_1.position.y * this.m_drawScale));
            this.m_sprite.graphics.lineTo(((_arg_1.position.x + (this.m_xformScale * _arg_1.R.col2.x)) * this.m_drawScale), ((_arg_1.position.y + (this.m_xformScale * _arg_1.R.col2.y)) * this.m_drawScale));
        }


    }
}//package Box2D.Dynamics

//------------------------------------------------------------
//Box2D.Dynamics.b2DestructionListener

package Box2D.Dynamics
{
    import Box2D.Dynamics.Joints.b2Joint;
    import Box2D.Collision.Shapes.b2Shape;

    public class b2DestructionListener 
    {


        public function SayGoodbyeJoint(_arg_1:b2Joint):void
        {
        }

        public function SayGoodbyeShape(_arg_1:b2Shape):void
        {
        }


    }
}//package Box2D.Dynamics

//------------------------------------------------------------
//Box2D.Dynamics.b2Island

package Box2D.Dynamics
{
    import Box2D.Dynamics.Contacts.b2ContactResult;
    import Box2D.Dynamics.Joints.b2Joint;
    import Box2D.Common.Math.b2Math;
    import Box2D.Common.b2Settings;
    import Box2D.Dynamics.Contacts.b2ContactSolver;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Dynamics.Contacts.b2Contact;
    import Box2D.Dynamics.Contacts.b2ContactConstraint;
    import Box2D.Collision.b2Manifold;
    import Box2D.Collision.b2ManifoldPoint;
    import Box2D.Dynamics.Contacts.b2ContactConstraintPoint;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Dynamics.Joints.*;
    import Box2D.Common.*;
    import Box2D.Dynamics.Contacts.*;

    public class b2Island 
    {

        private static var s_reportCR:b2ContactResult = new b2ContactResult();

        public var m_allocator:*;
        public var m_listener:b2ContactListener;
        public var m_bodies:Array;
        public var m_contacts:Array;
        public var m_joints:Array;
        public var m_bodyCount:int;
        public var m_jointCount:int;
        public var m_contactCount:int;
        public var m_bodyCapacity:int;
        public var m_contactCapacity:int;
        public var m_jointCapacity:int;
        public var m_positionIterationCount:int;

        public function b2Island(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:*, _arg_5:b2ContactListener)
        {
            var _local_6:int;
            super();
            this.m_bodyCapacity = _arg_1;
            this.m_contactCapacity = _arg_2;
            this.m_jointCapacity = _arg_3;
            this.m_bodyCount = 0;
            this.m_contactCount = 0;
            this.m_jointCount = 0;
            this.m_allocator = _arg_4;
            this.m_listener = _arg_5;
            this.m_bodies = new Array();
            _local_6 = 0;
            while (_local_6 < _arg_1)
            {
                this.m_bodies[_local_6] = null;
                _local_6++;
            };
            this.m_contacts = new Array();
            _local_6 = 0;
            while (_local_6 < _arg_2)
            {
                this.m_contacts[_local_6] = null;
                _local_6++;
            };
            this.m_joints = new Array();
            _local_6 = 0;
            while (_local_6 < _arg_3)
            {
                this.m_joints[_local_6] = null;
                _local_6++;
            };
            this.m_positionIterationCount = 0;
        }

        public function Clear():void
        {
            this.m_bodyCount = 0;
            this.m_contactCount = 0;
            this.m_jointCount = 0;
        }

        public function Solve(_arg_1:b2TimeStep, _arg_2:b2Vec2, _arg_3:Boolean, _arg_4:Boolean):void
        {
            var _local_5:int;
            var _local_6:b2Body;
            var _local_7:b2Joint;
            var _local_9:int;
            var _local_10:Boolean;
            var _local_11:Boolean;
            var _local_12:Boolean;
            var _local_13:Number;
            var _local_14:Number;
            var _local_15:Number;
            _local_5 = 0;
            while (_local_5 < this.m_bodyCount)
            {
                _local_6 = this.m_bodies[_local_5];
                if (!_local_6.IsStatic())
                {
                    _local_6.m_linearVelocity.x = (_local_6.m_linearVelocity.x + (_arg_1.dt * (_arg_2.x + (_local_6.m_invMass * _local_6.m_force.x))));
                    _local_6.m_linearVelocity.y = (_local_6.m_linearVelocity.y + (_arg_1.dt * (_arg_2.y + (_local_6.m_invMass * _local_6.m_force.y))));
                    _local_6.m_angularVelocity = (_local_6.m_angularVelocity + ((_arg_1.dt * _local_6.m_invI) * _local_6.m_torque));
                    _local_6.m_force.SetZero();
                    _local_6.m_torque = 0;
                    _local_6.m_linearVelocity.Multiply(b2Math.b2Clamp((1 - (_arg_1.dt * _local_6.m_linearDamping)), 0, 1));
                    _local_6.m_angularVelocity = (_local_6.m_angularVelocity * b2Math.b2Clamp((1 - (_arg_1.dt * _local_6.m_angularDamping)), 0, 1));
                    if (_local_6.m_linearVelocity.LengthSquared() > b2Settings.b2_maxLinearVelocitySquared)
                    {
                        _local_6.m_linearVelocity.Normalize();
                        _local_6.m_linearVelocity.x = (_local_6.m_linearVelocity.x * b2Settings.b2_maxLinearVelocity);
                        _local_6.m_linearVelocity.y = (_local_6.m_linearVelocity.y * b2Settings.b2_maxLinearVelocity);
                    };
                    if ((_local_6.m_angularVelocity * _local_6.m_angularVelocity) > b2Settings.b2_maxAngularVelocitySquared)
                    {
                        if (_local_6.m_angularVelocity < 0)
                        {
                            _local_6.m_angularVelocity = -(b2Settings.b2_maxAngularVelocity);
                        }
                        else
                        {
                            _local_6.m_angularVelocity = b2Settings.b2_maxAngularVelocity;
                        };
                    };
                };
                _local_5++;
            };
            var _local_8:b2ContactSolver = new b2ContactSolver(_arg_1, this.m_contacts, this.m_contactCount, this.m_allocator);
            _local_8.InitVelocityConstraints(_arg_1);
            _local_5 = 0;
            while (_local_5 < this.m_jointCount)
            {
                _local_7 = this.m_joints[_local_5];
                _local_7.InitVelocityConstraints(_arg_1);
                _local_5++;
            };
            _local_5 = 0;
            while (_local_5 < _arg_1.maxIterations)
            {
                _local_8.SolveVelocityConstraints();
                _local_9 = 0;
                while (_local_9 < this.m_jointCount)
                {
                    _local_7 = this.m_joints[_local_9];
                    _local_7.SolveVelocityConstraints(_arg_1);
                    _local_9++;
                };
                _local_5++;
            };
            _local_8.FinalizeVelocityConstraints();
            _local_5 = 0;
            while (_local_5 < this.m_bodyCount)
            {
                _local_6 = this.m_bodies[_local_5];
                if (!_local_6.IsStatic())
                {
                    _local_6.m_sweep.c0.SetV(_local_6.m_sweep.c);
                    _local_6.m_sweep.a0 = _local_6.m_sweep.a;
                    _local_6.m_sweep.c.x = (_local_6.m_sweep.c.x + (_arg_1.dt * _local_6.m_linearVelocity.x));
                    _local_6.m_sweep.c.y = (_local_6.m_sweep.c.y + (_arg_1.dt * _local_6.m_linearVelocity.y));
                    _local_6.m_sweep.a = (_local_6.m_sweep.a + (_arg_1.dt * _local_6.m_angularVelocity));
                    _local_6.SynchronizeTransform();
                };
                _local_5++;
            };
            if (_arg_3)
            {
                _local_5 = 0;
                while (_local_5 < this.m_jointCount)
                {
                    _local_7 = this.m_joints[_local_5];
                    _local_7.InitPositionConstraints();
                    _local_5++;
                };
                this.m_positionIterationCount = 0;
                while (this.m_positionIterationCount < _arg_1.maxIterations)
                {
                    _local_10 = _local_8.SolvePositionConstraints(b2Settings.b2_contactBaumgarte);
                    _local_11 = true;
                    _local_5 = 0;
                    while (_local_5 < this.m_jointCount)
                    {
                        _local_7 = this.m_joints[_local_5];
                        _local_12 = _local_7.SolvePositionConstraints();
                        _local_11 = ((_local_11) && (_local_12));
                        _local_5++;
                    };
                    if (((_local_10) && (_local_11))) break;
                    this.m_positionIterationCount++;
                };
            };
            this.Report(_local_8.m_constraints);
            if (_arg_4)
            {
                _local_13 = Number.MAX_VALUE;
                _local_14 = (b2Settings.b2_linearSleepTolerance * b2Settings.b2_linearSleepTolerance);
                _local_15 = (b2Settings.b2_angularSleepTolerance * b2Settings.b2_angularSleepTolerance);
                _local_5 = 0;
                while (_local_5 < this.m_bodyCount)
                {
                    _local_6 = this.m_bodies[_local_5];
                    if (_local_6.m_invMass != 0)
                    {
                        if ((_local_6.m_flags & b2Body.e_allowSleepFlag) == 0)
                        {
                            _local_6.m_sleepTime = 0;
                            _local_13 = 0;
                        };
                        if (((((_local_6.m_flags & b2Body.e_allowSleepFlag) == 0) || ((_local_6.m_angularVelocity * _local_6.m_angularVelocity) > _local_15)) || (b2Math.b2Dot(_local_6.m_linearVelocity, _local_6.m_linearVelocity) > _local_14)))
                        {
                            _local_6.m_sleepTime = 0;
                            _local_13 = 0;
                        }
                        else
                        {
                            _local_6.m_sleepTime = (_local_6.m_sleepTime + _arg_1.dt);
                            _local_13 = b2Math.b2Min(_local_13, _local_6.m_sleepTime);
                        };
                    };
                    _local_5++;
                };
                if (_local_13 >= b2Settings.b2_timeToSleep)
                {
                    _local_5 = 0;
                    while (_local_5 < this.m_bodyCount)
                    {
                        _local_6 = this.m_bodies[_local_5];
                        _local_6.m_flags = (_local_6.m_flags | b2Body.e_sleepFlag);
                        _local_6.m_linearVelocity.SetZero();
                        _local_6.m_angularVelocity = 0;
                        _local_5++;
                    };
                };
            };
        }

        public function SolveTOI(_arg_1:b2TimeStep):void
        {
            var _local_2:int;
            var _local_5:b2Body;
            var _local_6:Boolean;
            var _local_3:b2ContactSolver = new b2ContactSolver(_arg_1, this.m_contacts, this.m_contactCount, this.m_allocator);
            _local_2 = 0;
            while (_local_2 < _arg_1.maxIterations)
            {
                _local_3.SolveVelocityConstraints();
                _local_2++;
            };
            _local_2 = 0;
            while (_local_2 < this.m_bodyCount)
            {
                _local_5 = this.m_bodies[_local_2];
                if (!_local_5.IsStatic())
                {
                    _local_5.m_sweep.c0.SetV(_local_5.m_sweep.c);
                    _local_5.m_sweep.a0 = _local_5.m_sweep.a;
                    _local_5.m_sweep.c.x = (_local_5.m_sweep.c.x + (_arg_1.dt * _local_5.m_linearVelocity.x));
                    _local_5.m_sweep.c.y = (_local_5.m_sweep.c.y + (_arg_1.dt * _local_5.m_linearVelocity.y));
                    _local_5.m_sweep.a = (_local_5.m_sweep.a + (_arg_1.dt * _local_5.m_angularVelocity));
                    _local_5.SynchronizeTransform();
                };
                _local_2++;
            };
            var _local_4:Number = 0.75;
            _local_2 = 0;
            while (_local_2 < _arg_1.maxIterations)
            {
                _local_6 = _local_3.SolvePositionConstraints(_local_4);
                if (_local_6) break;
                _local_2++;
            };
            this.Report(_local_3.m_constraints);
        }

        public function Report(_arg_1:Array):void
        {
            var _local_2:b2Mat22;
            var _local_3:b2Vec2;
            var _local_5:b2Contact;
            var _local_6:b2ContactConstraint;
            var _local_7:b2ContactResult;
            var _local_8:b2Body;
            var _local_9:int;
            var _local_10:Array;
            var _local_11:int;
            var _local_12:b2Manifold;
            var _local_13:int;
            var _local_14:b2ManifoldPoint;
            var _local_15:b2ContactConstraintPoint;
            if (this.m_listener == null)
            {
                return;
            };
            var _local_4:int;
            while (_local_4 < this.m_contactCount)
            {
                _local_5 = this.m_contacts[_local_4];
                _local_6 = _arg_1[_local_4];
                _local_7 = s_reportCR;
                _local_7.shape1 = _local_5.m_shape1;
                _local_7.shape2 = _local_5.m_shape2;
                _local_8 = _local_7.shape1.m_body;
                _local_9 = _local_5.m_manifoldCount;
                _local_10 = _local_5.GetManifolds();
                _local_11 = 0;
                while (_local_11 < _local_9)
                {
                    _local_12 = _local_10[_local_11];
                    _local_7.normal.SetV(_local_12.normal);
                    _local_13 = 0;
                    while (_local_13 < _local_12.pointCount)
                    {
                        _local_14 = _local_12.points[_local_13];
                        _local_15 = _local_6.points[_local_13];
                        _local_7.position = _local_8.GetWorldPoint(_local_14.localPoint1);
                        _local_7.normalImpulse = _local_15.normalImpulse;
                        _local_7.tangentImpulse = _local_15.tangentImpulse;
                        _local_7.id.key = _local_14.id.key;
                        this.m_listener.Result(_local_7);
                        _local_13++;
                    };
                    _local_11++;
                };
                _local_4++;
            };
        }

        public function AddBody(_arg_1:b2Body):void
        {
            var _local_2:* = this.m_bodyCount++;
            this.m_bodies[_local_2] = _arg_1;
        }

        public function AddContact(_arg_1:b2Contact):void
        {
            var _local_2:* = this.m_contactCount++;
            this.m_contacts[_local_2] = _arg_1;
        }

        public function AddJoint(_arg_1:b2Joint):void
        {
            var _local_2:* = this.m_jointCount++;
            this.m_joints[_local_2] = _arg_1;
        }


    }
}//package Box2D.Dynamics

//------------------------------------------------------------
//Box2D.Dynamics.b2TimeStep

package Box2D.Dynamics
{
    public class b2TimeStep 
    {

        public var dt:Number;
        public var inv_dt:Number;
        public var dtRatio:Number;
        public var maxIterations:int;
        public var warmStarting:Boolean;
        public var positionCorrection:Boolean;


    }
}//package Box2D.Dynamics

//------------------------------------------------------------
//Box2D.Dynamics.b2World

package Box2D.Dynamics
{
    import Box2D.Common.b2Color;
    import Box2D.Common.Math.b2XForm;
    import Box2D.Collision.b2BroadPhase;
    import Box2D.Dynamics.Joints.b2Joint;
    import Box2D.Dynamics.Contacts.b2Contact;
    import Box2D.Common.Math.b2Vec2;
    import Box2D.Collision.b2AABB;
    import Box2D.Dynamics.Joints.b2JointEdge;
    import Box2D.Collision.Shapes.b2Shape;
    import Box2D.Dynamics.Joints.b2JointDef;
    import Box2D.Dynamics.Contacts.b2ContactEdge;
    import Box2D.Common.b2Settings;
    import Box2D.Collision.b2TimeOfImpact;
    import Box2D.Dynamics.Joints.b2PulleyJoint;
    import Box2D.Collision.Shapes.b2CircleShape;
    import Box2D.Collision.Shapes.b2PolygonShape;
    import Box2D.Common.Math.b2Math;
    import Box2D.Collision.b2Pair;
    import Box2D.Collision.b2Proxy;
    import Box2D.Collision.b2OBB;
    import Box2D.Common.Math.b2Mat22;
    import Box2D.Collision.Shapes.*;
    import Box2D.Common.Math.*;
    import Box2D.Collision.*;
    import Box2D.Dynamics.Joints.*;
    import Box2D.Common.*;
    import Box2D.Dynamics.Contacts.*;

    public class b2World 
    {

        private static var s_jointColor:b2Color = new b2Color(0.5, 0.8, 0.8);
        private static var s_coreColor:b2Color = new b2Color(0.9, 0.6, 0.6);
        private static var s_xf:b2XForm = new b2XForm();
        public static var m_positionCorrection:Boolean;
        public static var m_warmStarting:Boolean;
        public static var m_continuousPhysics:Boolean;

        public var m_blockAllocator:*;
        public var m_stackAllocator:*;
        public var m_lock:Boolean;
        public var m_broadPhase:b2BroadPhase;
        public var m_contactManager:b2ContactManager = new b2ContactManager();
        public var m_bodyList:b2Body;
        public var m_jointList:b2Joint;
        public var m_contactList:b2Contact;
        public var m_bodyCount:int;
        public var m_contactCount:int;
        public var m_jointCount:int;
        public var m_gravity:b2Vec2;
        public var m_allowSleep:Boolean;
        public var m_groundBody:b2Body;
        public var m_destructionListener:b2DestructionListener;
        public var m_boundaryListener:b2BoundaryListener;
        public var m_contactFilter:b2ContactFilter;
        public var m_contactListener:b2ContactListener;
        public var m_debugDraw:b2DebugDraw;
        public var m_inv_dt0:Number;
        public var m_positionIterationCount:int;

        public function b2World(_arg_1:b2AABB, _arg_2:b2Vec2, _arg_3:Boolean)
        {
            this.m_destructionListener = null;
            this.m_boundaryListener = null;
            this.m_contactFilter = b2ContactFilter.b2_defaultFilter;
            this.m_contactListener = null;
            this.m_debugDraw = null;
            this.m_bodyList = null;
            this.m_contactList = null;
            this.m_jointList = null;
            this.m_bodyCount = 0;
            this.m_contactCount = 0;
            this.m_jointCount = 0;
            m_positionCorrection = true;
            m_warmStarting = true;
            m_continuousPhysics = true;
            this.m_allowSleep = _arg_3;
            this.m_gravity = _arg_2;
            this.m_lock = false;
            this.m_inv_dt0 = 0;
            this.m_contactManager.m_world = this;
            this.m_broadPhase = new b2BroadPhase(_arg_1, this.m_contactManager);
            var _local_4:b2BodyDef = new b2BodyDef();
            this.m_groundBody = this.CreateBody(_local_4);
        }

        public function SetDestructionListener(_arg_1:b2DestructionListener):void
        {
            this.m_destructionListener = _arg_1;
        }

        public function SetBoundaryListener(_arg_1:b2BoundaryListener):void
        {
            this.m_boundaryListener = _arg_1;
        }

        public function SetContactFilter(_arg_1:b2ContactFilter):void
        {
            this.m_contactFilter = _arg_1;
        }

        public function SetContactListener(_arg_1:b2ContactListener):void
        {
            this.m_contactListener = _arg_1;
        }

        public function SetDebugDraw(_arg_1:b2DebugDraw):void
        {
            this.m_debugDraw = _arg_1;
        }

        public function Validate():void
        {
            this.m_broadPhase.Validate();
        }

        public function GetProxyCount():int
        {
            return (this.m_broadPhase.m_proxyCount);
        }

        public function GetPairCount():int
        {
            return (this.m_broadPhase.m_pairManager.m_pairCount);
        }

        public function CreateBody(_arg_1:b2BodyDef):b2Body
        {
            if (this.m_lock == true)
            {
                return (null);
            };
            var _local_2:b2Body = new b2Body(_arg_1, this);
            _local_2.m_prev = null;
            _local_2.m_next = this.m_bodyList;
            if (this.m_bodyList)
            {
                this.m_bodyList.m_prev = _local_2;
            };
            this.m_bodyList = _local_2;
            this.m_bodyCount++;
            return (_local_2);
        }

        public function DestroyBody(_arg_1:b2Body):void
        {
            var _local_4:b2JointEdge;
            var _local_5:b2Shape;
            if (this.m_lock == true)
            {
                return;
            };
            var _local_2:b2JointEdge = _arg_1.m_jointList;
            while (_local_2)
            {
                _local_4 = _local_2;
                _local_2 = _local_2.next;
                if (this.m_destructionListener)
                {
                    this.m_destructionListener.SayGoodbyeJoint(_local_4.joint);
                };
                this.DestroyJoint(_local_4.joint);
            };
            var _local_3:b2Shape = _arg_1.m_shapeList;
            while (_local_3)
            {
                _local_5 = _local_3;
                _local_3 = _local_3.m_next;
                if (this.m_destructionListener)
                {
                    this.m_destructionListener.SayGoodbyeShape(_local_5);
                };
                _local_5.DestroyProxy(this.m_broadPhase);
                b2Shape.Destroy(_local_5, this.m_blockAllocator);
            };
            if (_arg_1.m_prev)
            {
                _arg_1.m_prev.m_next = _arg_1.m_next;
            };
            if (_arg_1.m_next)
            {
                _arg_1.m_next.m_prev = _arg_1.m_prev;
            };
            if (_arg_1 == this.m_bodyList)
            {
                this.m_bodyList = _arg_1.m_next;
            };
            this.m_bodyCount--;
        }

        public function CreateJoint(_arg_1:b2JointDef):b2Joint
        {
            var _local_3:b2Body;
            var _local_4:b2Shape;
            var _local_2:b2Joint = b2Joint.Create(_arg_1, this.m_blockAllocator);
            _local_2.m_prev = null;
            _local_2.m_next = this.m_jointList;
            if (this.m_jointList)
            {
                this.m_jointList.m_prev = _local_2;
            };
            this.m_jointList = _local_2;
            this.m_jointCount++;
            _local_2.m_node1.joint = _local_2;
            _local_2.m_node1.other = _local_2.m_body2;
            _local_2.m_node1.prev = null;
            _local_2.m_node1.next = _local_2.m_body1.m_jointList;
            if (_local_2.m_body1.m_jointList)
            {
                _local_2.m_body1.m_jointList.prev = _local_2.m_node1;
            };
            _local_2.m_body1.m_jointList = _local_2.m_node1;
            _local_2.m_node2.joint = _local_2;
            _local_2.m_node2.other = _local_2.m_body1;
            _local_2.m_node2.prev = null;
            _local_2.m_node2.next = _local_2.m_body2.m_jointList;
            if (_local_2.m_body2.m_jointList)
            {
                _local_2.m_body2.m_jointList.prev = _local_2.m_node2;
            };
            _local_2.m_body2.m_jointList = _local_2.m_node2;
            if (_arg_1.collideConnected == false)
            {
                _local_3 = ((_arg_1.body1.m_shapeCount < _arg_1.body2.m_shapeCount) ? _arg_1.body1 : _arg_1.body2);
                _local_4 = _local_3.m_shapeList;
                while (_local_4)
                {
                    _local_4.RefilterProxy(this.m_broadPhase, _local_3.m_xf);
                    _local_4 = _local_4.m_next;
                };
            };
            return (_local_2);
        }

        public function DestroyJoint(_arg_1:b2Joint):void
        {
            var _local_5:b2Body;
            var _local_6:b2Shape;
            var _local_2:Boolean = _arg_1.m_collideConnected;
            if (_arg_1.m_prev)
            {
                _arg_1.m_prev.m_next = _arg_1.m_next;
            };
            if (_arg_1.m_next)
            {
                _arg_1.m_next.m_prev = _arg_1.m_prev;
            };
            if (_arg_1 == this.m_jointList)
            {
                this.m_jointList = _arg_1.m_next;
            };
            var _local_3:b2Body = _arg_1.m_body1;
            var _local_4:b2Body = _arg_1.m_body2;
            _local_3.WakeUp();
            _local_4.WakeUp();
            if (_arg_1.m_node1.prev)
            {
                _arg_1.m_node1.prev.next = _arg_1.m_node1.next;
            };
            if (_arg_1.m_node1.next)
            {
                _arg_1.m_node1.next.prev = _arg_1.m_node1.prev;
            };
            if (_arg_1.m_node1 == _local_3.m_jointList)
            {
                _local_3.m_jointList = _arg_1.m_node1.next;
            };
            _arg_1.m_node1.prev = null;
            _arg_1.m_node1.next = null;
            if (_arg_1.m_node2.prev)
            {
                _arg_1.m_node2.prev.next = _arg_1.m_node2.next;
            };
            if (_arg_1.m_node2.next)
            {
                _arg_1.m_node2.next.prev = _arg_1.m_node2.prev;
            };
            if (_arg_1.m_node2 == _local_4.m_jointList)
            {
                _local_4.m_jointList = _arg_1.m_node2.next;
            };
            _arg_1.m_node2.prev = null;
            _arg_1.m_node2.next = null;
            b2Joint.Destroy(_arg_1, this.m_blockAllocator);
            this.m_jointCount--;
            if (_local_2 == false)
            {
                _local_5 = ((_local_3.m_shapeCount < _local_4.m_shapeCount) ? _local_3 : _local_4);
                _local_6 = _local_5.m_shapeList;
                while (_local_6)
                {
                    _local_6.RefilterProxy(this.m_broadPhase, _local_5.m_xf);
                    _local_6 = _local_6.m_next;
                };
            };
        }

        public function Refilter(_arg_1:b2Shape):void
        {
            _arg_1.RefilterProxy(this.m_broadPhase, _arg_1.m_body.m_xf);
        }

        public function SetWarmStarting(_arg_1:Boolean):void
        {
            m_warmStarting = _arg_1;
        }

        public function SetPositionCorrection(_arg_1:Boolean):void
        {
            m_positionCorrection = _arg_1;
        }

        public function SetContinuousPhysics(_arg_1:Boolean):void
        {
            m_continuousPhysics = _arg_1;
        }

        public function GetBodyCount():int
        {
            return (this.m_bodyCount);
        }

        public function GetJointCount():int
        {
            return (this.m_jointCount);
        }

        public function GetContactCount():int
        {
            return (this.m_contactCount);
        }

        public function SetGravity(_arg_1:b2Vec2):void
        {
            this.m_gravity = _arg_1;
        }

        public function GetGroundBody():b2Body
        {
            return (this.m_groundBody);
        }

        public function Step(_arg_1:Number, _arg_2:int):void
        {
            this.m_lock = true;
            var _local_3:b2TimeStep = new b2TimeStep();
            _local_3.dt = _arg_1;
            _local_3.maxIterations = _arg_2;
            if (_arg_1 > 0)
            {
                _local_3.inv_dt = (1 / _arg_1);
            }
            else
            {
                _local_3.inv_dt = 0;
            };
            _local_3.dtRatio = (this.m_inv_dt0 * _arg_1);
            _local_3.positionCorrection = m_positionCorrection;
            _local_3.warmStarting = m_warmStarting;
            this.m_contactManager.Collide();
            if (_local_3.dt > 0)
            {
                this.Solve(_local_3);
            };
            if (((m_continuousPhysics) && (_local_3.dt > 0)))
            {
                this.SolveTOI(_local_3);
            };
            this.DrawDebugData();
            this.m_inv_dt0 = _local_3.inv_dt;
            this.m_lock = false;
        }

        public function Query(_arg_1:b2AABB, _arg_2:Array, _arg_3:int):int
        {
            var _local_4:Array = new Array();
            var _local_5:int = this.m_broadPhase.QueryAABB(_arg_1, _local_4, _arg_3);
            var _local_6:int;
            while (_local_6 < _local_5)
            {
                _arg_2[_local_6] = _local_4[_local_6];
                _local_6++;
            };
            return (_local_5);
        }

        public function GetBodyList():b2Body
        {
            return (this.m_bodyList);
        }

        public function GetJointList():b2Joint
        {
            return (this.m_jointList);
        }

        public function Solve(_arg_1:b2TimeStep):void
        {
            var _local_2:b2Body;
            var _local_9:int;
            var _local_10:int;
            var _local_11:b2Body;
            var _local_12:b2ContactEdge;
            var _local_13:b2JointEdge;
            var _local_14:Boolean;
            this.m_positionIterationCount = 0;
            var _local_3:b2Island = new b2Island(this.m_bodyCount, this.m_contactCount, this.m_jointCount, this.m_stackAllocator, this.m_contactListener);
            _local_2 = this.m_bodyList;
            while (_local_2)
            {
                _local_2.m_flags = (_local_2.m_flags & (~(b2Body.e_islandFlag)));
                _local_2 = _local_2.m_next;
            };
            var _local_4:b2Contact = this.m_contactList;
            while (_local_4)
            {
                _local_4.m_flags = (_local_4.m_flags & (~(b2Contact.e_islandFlag)));
                _local_4 = _local_4.m_next;
            };
            var _local_5:b2Joint = this.m_jointList;
            while (_local_5)
            {
                _local_5.m_islandFlag = false;
                _local_5 = _local_5.m_next;
            };
            var _local_6:int = this.m_bodyCount;
            var _local_7:Array = new Array();
            var _local_8:b2Body = this.m_bodyList;
            while (_local_8)
            {
                if (!(_local_8.m_flags & ((b2Body.e_islandFlag | b2Body.e_sleepFlag) | b2Body.e_frozenFlag)))
                {
                    if (!_local_8.IsStatic())
                    {
                        _local_3.Clear();
                        _local_9 = 0;
                        var _local_15:* = _local_9++;
                        _local_7[_local_15] = _local_8;
                        _local_8.m_flags = (_local_8.m_flags | b2Body.e_islandFlag);
                        while (_local_9 > 0)
                        {
                            _local_2 = _local_7[--_local_9];
                            _local_3.AddBody(_local_2);
                            _local_2.m_flags = (_local_2.m_flags & (~(b2Body.e_sleepFlag)));
                            if (!_local_2.IsStatic())
                            {
                                _local_12 = _local_2.m_contactList;
                                while (_local_12)
                                {
                                    if (!(_local_12.contact.m_flags & (b2Contact.e_islandFlag | b2Contact.e_nonSolidFlag)))
                                    {
                                        if (_local_12.contact.m_manifoldCount != 0)
                                        {
                                            _local_3.AddContact(_local_12.contact);
                                            _local_12.contact.m_flags = (_local_12.contact.m_flags | b2Contact.e_islandFlag);
                                            _local_11 = _local_12.other;
                                            if (!(_local_11.m_flags & b2Body.e_islandFlag))
                                            {
                                                var _local_16:* = _local_9++;
                                                _local_7[_local_16] = _local_11;
                                                _local_11.m_flags = (_local_11.m_flags | b2Body.e_islandFlag);
                                            };
                                        };
                                    };
                                    _local_12 = _local_12.next;
                                };
                                _local_13 = _local_2.m_jointList;
                                while (_local_13)
                                {
                                    if (_local_13.joint.m_islandFlag != true)
                                    {
                                        _local_3.AddJoint(_local_13.joint);
                                        _local_13.joint.m_islandFlag = true;
                                        _local_11 = _local_13.other;
                                        if (!(_local_11.m_flags & b2Body.e_islandFlag))
                                        {
                                            _local_16 = _local_9++;
                                            _local_7[_local_16] = _local_11;
                                            _local_11.m_flags = (_local_11.m_flags | b2Body.e_islandFlag);
                                        };
                                    };
                                    _local_13 = _local_13.next;
                                };
                            };
                        };
                        _local_3.Solve(_arg_1, this.m_gravity, m_positionCorrection, this.m_allowSleep);
                        if (_local_3.m_positionIterationCount > this.m_positionIterationCount)
                        {
                            this.m_positionIterationCount = _local_3.m_positionIterationCount;
                        };
                        _local_10 = 0;
                        while (_local_10 < _local_3.m_bodyCount)
                        {
                            _local_2 = _local_3.m_bodies[_local_10];
                            if (_local_2.IsStatic())
                            {
                                _local_2.m_flags = (_local_2.m_flags & (~(b2Body.e_islandFlag)));
                            };
                            _local_10++;
                        };
                    };
                };
                _local_8 = _local_8.m_next;
            };
            _local_2 = this.m_bodyList;
            while (_local_2)
            {
                if (!(_local_2.m_flags & (b2Body.e_sleepFlag | b2Body.e_frozenFlag)))
                {
                    if (!_local_2.IsStatic())
                    {
                        _local_14 = _local_2.SynchronizeShapes();
                        if (((_local_14 == false) && (!(this.m_boundaryListener == null))))
                        {
                            this.m_boundaryListener.Violation(_local_2);
                        };
                    };
                };
                _local_2 = _local_2.m_next;
            };
            this.m_broadPhase.Commit();
        }

        public function SolveTOI(_arg_1:b2TimeStep):void
        {
            var _local_2:b2Body;
            var _local_3:b2Shape;
            var _local_4:b2Shape;
            var _local_5:b2Body;
            var _local_6:b2Body;
            var _local_7:b2ContactEdge;
            var _local_11:b2Contact;
            var _local_12:b2Contact;
            var _local_13:Number;
            var _local_14:b2Body;
            var _local_15:int;
            var _local_16:b2TimeStep;
            var _local_17:int;
            var _local_18:Number;
            var _local_19:Number;
            var _local_20:b2Body;
            var _local_21:Boolean;
            var _local_8:b2Island = new b2Island(this.m_bodyCount, b2Settings.b2_maxTOIContactsPerIsland, 0, this.m_stackAllocator, this.m_contactListener);
            var _local_9:int = this.m_bodyCount;
            var _local_10:Array = new Array();
            _local_2 = this.m_bodyList;
            while (_local_2)
            {
                _local_2.m_flags = (_local_2.m_flags & (~(b2Body.e_islandFlag)));
                _local_2.m_sweep.t0 = 0;
                _local_2 = _local_2.m_next;
            };
            _local_11 = this.m_contactList;
            while (_local_11)
            {
                _local_11.m_flags = (_local_11.m_flags & (~(b2Contact.e_toiFlag | b2Contact.e_islandFlag)));
                _local_11 = _local_11.m_next;
            };
            while (true)
            {
                _local_12 = null;
                _local_13 = 1;
                _local_11 = this.m_contactList;
                for (;_local_11;(_local_11 = _local_11.m_next))
                {
                    if (!(_local_11.m_flags & (b2Contact.e_slowFlag | b2Contact.e_nonSolidFlag)))
                    {
                        _local_18 = 1;
                        if ((_local_11.m_flags & b2Contact.e_toiFlag))
                        {
                            _local_18 = _local_11.m_toi;
                        }
                        else
                        {
                            _local_3 = _local_11.m_shape1;
                            _local_4 = _local_11.m_shape2;
                            _local_5 = _local_3.m_body;
                            _local_6 = _local_4.m_body;
                            if ((((_local_5.IsStatic()) || (_local_5.IsSleeping())) && ((_local_6.IsStatic()) || (_local_6.IsSleeping())))) continue;
                            _local_19 = _local_5.m_sweep.t0;
                            if (_local_5.m_sweep.t0 < _local_6.m_sweep.t0)
                            {
                                _local_19 = _local_6.m_sweep.t0;
                                _local_5.m_sweep.Advance(_local_19);
                            }
                            else
                            {
                                if (_local_6.m_sweep.t0 < _local_5.m_sweep.t0)
                                {
                                    _local_19 = _local_5.m_sweep.t0;
                                    _local_6.m_sweep.Advance(_local_19);
                                };
                            };
                            _local_18 = b2TimeOfImpact.TimeOfImpact(_local_11.m_shape1, _local_5.m_sweep, _local_11.m_shape2, _local_6.m_sweep);
                            if (((_local_18 > 0) && (_local_18 < 1)))
                            {
                                _local_18 = (((1 - _local_18) * _local_19) + _local_18);
                                if (_local_18 > 1)
                                {
                                    _local_18 = 1;
                                };
                            };
                            _local_11.m_toi = _local_18;
                            _local_11.m_flags = (_local_11.m_flags | b2Contact.e_toiFlag);
                        };
                        if (((Number.MIN_VALUE < _local_18) && (_local_18 < _local_13)))
                        {
                            _local_12 = _local_11;
                            _local_13 = _local_18;
                        };
                    };
                };
                if (((_local_12 == null) || ((1 - (100 * Number.MIN_VALUE)) < _local_13))) break;
                _local_3 = _local_12.m_shape1;
                _local_4 = _local_12.m_shape2;
                _local_5 = _local_3.m_body;
                _local_6 = _local_4.m_body;
                _local_5.Advance(_local_13);
                _local_6.Advance(_local_13);
                _local_12.Update(this.m_contactListener);
                _local_12.m_flags = (_local_12.m_flags & (~(b2Contact.e_toiFlag)));
                if (_local_12.m_manifoldCount != 0)
                {
                    _local_14 = _local_5;
                    if (_local_14.IsStatic())
                    {
                        _local_14 = _local_6;
                    };
                    _local_8.Clear();
                    _local_15 = 0;
                    var _local_22:* = _local_15++;
                    _local_10[_local_22] = _local_14;
                    _local_14.m_flags = (_local_14.m_flags | b2Body.e_islandFlag);
                    while (_local_15 > 0)
                    {
                        _local_2 = _local_10[--_local_15];
                        _local_8.AddBody(_local_2);
                        _local_2.m_flags = (_local_2.m_flags & (~(b2Body.e_sleepFlag)));
                        if (!_local_2.IsStatic())
                        {
                            _local_7 = _local_2.m_contactList;
                            while (_local_7)
                            {
                                if (_local_8.m_contactCount != _local_8.m_contactCapacity)
                                {
                                    if (!(_local_7.contact.m_flags & ((b2Contact.e_islandFlag | b2Contact.e_slowFlag) | b2Contact.e_nonSolidFlag)))
                                    {
                                        if (_local_7.contact.m_manifoldCount != 0)
                                        {
                                            _local_8.AddContact(_local_7.contact);
                                            _local_7.contact.m_flags = (_local_7.contact.m_flags | b2Contact.e_islandFlag);
                                            _local_20 = _local_7.other;
                                            if (!(_local_20.m_flags & b2Body.e_islandFlag))
                                            {
                                                if (_local_20.IsStatic() == false)
                                                {
                                                    _local_20.Advance(_local_13);
                                                    _local_20.WakeUp();
                                                };
                                                var _local_23:* = _local_15++;
                                                _local_10[_local_23] = _local_20;
                                                _local_20.m_flags = (_local_20.m_flags | b2Body.e_islandFlag);
                                            };
                                        };
                                    };
                                };
                                _local_7 = _local_7.next;
                            };
                        };
                    };
                    _local_16 = new b2TimeStep();
                    _local_16.dt = ((1 - _local_13) * _arg_1.dt);
                    _local_16.inv_dt = (1 / _local_16.dt);
                    _local_16.maxIterations = _arg_1.maxIterations;
                    _local_8.SolveTOI(_local_16);
                    _local_17 = 0;
                    while (_local_17 < _local_8.m_bodyCount)
                    {
                        _local_2 = _local_8.m_bodies[_local_17];
                        _local_2.m_flags = (_local_2.m_flags & (~(b2Body.e_islandFlag)));
                        if (!(_local_2.m_flags & (b2Body.e_sleepFlag | b2Body.e_frozenFlag)))
                        {
                            if (!_local_2.IsStatic())
                            {
                                _local_21 = _local_2.SynchronizeShapes();
                                if (((_local_21 == false) && (!(this.m_boundaryListener == null))))
                                {
                                    this.m_boundaryListener.Violation(_local_2);
                                };
                                _local_7 = _local_2.m_contactList;
                                while (_local_7)
                                {
                                    _local_7.contact.m_flags = (_local_7.contact.m_flags & (~(b2Contact.e_toiFlag)));
                                    _local_7 = _local_7.next;
                                };
                            };
                        };
                        _local_17++;
                    };
                    _local_17 = 0;
                    while (_local_17 < _local_8.m_contactCount)
                    {
                        _local_11 = _local_8.m_contacts[_local_17];
                        _local_11.m_flags = (_local_11.m_flags & (~(b2Contact.e_toiFlag | b2Contact.e_islandFlag)));
                        _local_17++;
                    };
                    this.m_broadPhase.Commit();
                };
            };
        }

        public function DrawJoint(_arg_1:b2Joint):void
        {
            var _local_11:b2PulleyJoint;
            var _local_12:b2Vec2;
            var _local_13:b2Vec2;
            var _local_2:b2Body = _arg_1.m_body1;
            var _local_3:b2Body = _arg_1.m_body2;
            var _local_4:b2XForm = _local_2.m_xf;
            var _local_5:b2XForm = _local_3.m_xf;
            var _local_6:b2Vec2 = _local_4.position;
            var _local_7:b2Vec2 = _local_5.position;
            var _local_8:b2Vec2 = _arg_1.GetAnchor1();
            var _local_9:b2Vec2 = _arg_1.GetAnchor2();
            var _local_10:b2Color = s_jointColor;
            switch (_arg_1.m_type)
            {
                case b2Joint.e_distanceJoint:
                    this.m_debugDraw.DrawSegment(_local_8, _local_9, _local_10);
                    return;
                case b2Joint.e_pulleyJoint:
                    _local_11 = (_arg_1 as b2PulleyJoint);
                    _local_12 = _local_11.GetGroundAnchor1();
                    _local_13 = _local_11.GetGroundAnchor2();
                    this.m_debugDraw.DrawSegment(_local_12, _local_8, _local_10);
                    this.m_debugDraw.DrawSegment(_local_13, _local_9, _local_10);
                    this.m_debugDraw.DrawSegment(_local_12, _local_13, _local_10);
                    return;
                case b2Joint.e_mouseJoint:
                    this.m_debugDraw.DrawSegment(_local_8, _local_9, _local_10);
                    return;
                default:
                    if (_local_2 != this.m_groundBody)
                    {
                        this.m_debugDraw.DrawSegment(_local_6, _local_8, _local_10);
                    };
                    this.m_debugDraw.DrawSegment(_local_8, _local_9, _local_10);
                    if (_local_3 != this.m_groundBody)
                    {
                        this.m_debugDraw.DrawSegment(_local_7, _local_9, _local_10);
                    };
            };
        }

        public function DrawShape(_arg_1:b2Shape, _arg_2:b2XForm, _arg_3:b2Color, _arg_4:Boolean):void
        {
            var _local_6:b2CircleShape;
            var _local_7:b2Vec2;
            var _local_8:Number;
            var _local_9:b2Vec2;
            var _local_10:int;
            var _local_11:b2PolygonShape;
            var _local_12:int;
            var _local_13:Array;
            var _local_14:Array;
            var _local_15:Array;
            var _local_5:b2Color = s_coreColor;
            switch (_arg_1.m_type)
            {
                case b2Shape.e_circleShape:
                    _local_6 = (_arg_1 as b2CircleShape);
                    _local_7 = b2Math.b2MulX(_arg_2, _local_6.m_localPosition);
                    _local_8 = _local_6.m_radius;
                    _local_9 = _arg_2.R.col1;
                    this.m_debugDraw.DrawSolidCircle(_local_7, _local_8, _local_9, _arg_3);
                    if (_arg_4)
                    {
                        this.m_debugDraw.DrawCircle(_local_7, (_local_8 - b2Settings.b2_toiSlop), _local_5);
                    };
                    return;
                case b2Shape.e_polygonShape:
                    _local_11 = (_arg_1 as b2PolygonShape);
                    _local_12 = _local_11.GetVertexCount();
                    _local_13 = _local_11.GetVertices();
                    _local_14 = new Array();
                    _local_10 = 0;
                    while (_local_10 < _local_12)
                    {
                        _local_14[_local_10] = b2Math.b2MulX(_arg_2, _local_13[_local_10]);
                        _local_10++;
                    };
                    this.m_debugDraw.DrawSolidPolygon(_local_14, _local_12, _arg_3);
                    if (_arg_4)
                    {
                        _local_15 = _local_11.GetCoreVertices();
                        _local_10 = 0;
                        while (_local_10 < _local_12)
                        {
                            _local_14[_local_10] = b2Math.b2MulX(_arg_2, _local_15[_local_10]);
                            _local_10++;
                        };
                        this.m_debugDraw.DrawPolygon(_local_14, _local_12, _local_5);
                    };
                    return;
            };
        }

        public function DrawDebugData():void
        {
            var _local_2:int;
            var _local_3:b2Body;
            var _local_4:b2Shape;
            var _local_5:b2Joint;
            var _local_6:b2BroadPhase;
            var _local_11:b2XForm;
            var _local_15:Boolean;
            var _local_16:uint;
            var _local_17:b2Pair;
            var _local_18:b2Proxy;
            var _local_19:b2Proxy;
            var _local_20:b2Vec2;
            var _local_21:b2Vec2;
            var _local_22:b2Proxy;
            var _local_23:b2PolygonShape;
            var _local_24:b2OBB;
            var _local_25:b2Vec2;
            var _local_26:b2Mat22;
            var _local_27:b2Vec2;
            var _local_28:Number;
            if (this.m_debugDraw == null)
            {
                return;
            };
            this.m_debugDraw.m_sprite.graphics.clear();
            var _local_1:uint = this.m_debugDraw.GetFlags();
            var _local_7:b2Vec2 = new b2Vec2();
            var _local_8:b2Vec2 = new b2Vec2();
            var _local_9:b2Vec2 = new b2Vec2();
            var _local_10:b2Color = new b2Color(0, 0, 0);
            var _local_12:b2AABB = new b2AABB();
            var _local_13:b2AABB = new b2AABB();
            var _local_14:Array = [new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Vec2()];
            if ((_local_1 & b2DebugDraw.e_shapeBit))
            {
                _local_15 = ((_local_1 & b2DebugDraw.e_coreShapeBit) == b2DebugDraw.e_coreShapeBit);
                _local_3 = this.m_bodyList;
                while (_local_3)
                {
                    _local_11 = _local_3.m_xf;
                    _local_4 = _local_3.GetShapeList();
                    while (_local_4)
                    {
                        if (_local_3.IsStatic())
                        {
                            this.DrawShape(_local_4, _local_11, new b2Color(0.5, 0.9, 0.5), _local_15);
                        }
                        else
                        {
                            if (_local_3.IsSleeping())
                            {
                                this.DrawShape(_local_4, _local_11, new b2Color(0.5, 0.5, 0.9), _local_15);
                            }
                            else
                            {
                                this.DrawShape(_local_4, _local_11, new b2Color(0.9, 0.9, 0.9), _local_15);
                            };
                        };
                        _local_4 = _local_4.m_next;
                    };
                    _local_3 = _local_3.m_next;
                };
            };
            if ((_local_1 & b2DebugDraw.e_jointBit))
            {
                _local_5 = this.m_jointList;
                while (_local_5)
                {
                    this.DrawJoint(_local_5);
                    _local_5 = _local_5.m_next;
                };
            };
            if ((_local_1 & b2DebugDraw.e_pairBit))
            {
                _local_6 = this.m_broadPhase;
                _local_7.Set((1 / _local_6.m_quantizationFactor.x), (1 / _local_6.m_quantizationFactor.y));
                _local_10.Set(0.9, 0.9, 0.3);
                _local_2 = 0;
                while (_local_2 < b2Pair.b2_tableCapacity)
                {
                    _local_16 = _local_6.m_pairManager.m_hashTable[_local_2];
                    while (_local_16 != b2Pair.b2_nullPair)
                    {
                        _local_17 = _local_6.m_pairManager.m_pairs[_local_16];
                        _local_18 = _local_6.m_proxyPool[_local_17.proxyId1];
                        _local_19 = _local_6.m_proxyPool[_local_17.proxyId2];
                        _local_12.lowerBound.x = (_local_6.m_worldAABB.lowerBound.x + (_local_7.x * _local_6.m_bounds[0][_local_18.lowerBounds[0]].value));
                        _local_12.lowerBound.y = (_local_6.m_worldAABB.lowerBound.y + (_local_7.y * _local_6.m_bounds[1][_local_18.lowerBounds[1]].value));
                        _local_12.upperBound.x = (_local_6.m_worldAABB.lowerBound.x + (_local_7.x * _local_6.m_bounds[0][_local_18.upperBounds[0]].value));
                        _local_12.upperBound.y = (_local_6.m_worldAABB.lowerBound.y + (_local_7.y * _local_6.m_bounds[1][_local_18.upperBounds[1]].value));
                        _local_13.lowerBound.x = (_local_6.m_worldAABB.lowerBound.x + (_local_7.x * _local_6.m_bounds[0][_local_19.lowerBounds[0]].value));
                        _local_13.lowerBound.y = (_local_6.m_worldAABB.lowerBound.y + (_local_7.y * _local_6.m_bounds[1][_local_19.lowerBounds[1]].value));
                        _local_13.upperBound.x = (_local_6.m_worldAABB.lowerBound.x + (_local_7.x * _local_6.m_bounds[0][_local_19.upperBounds[0]].value));
                        _local_13.upperBound.y = (_local_6.m_worldAABB.lowerBound.y + (_local_7.y * _local_6.m_bounds[1][_local_19.upperBounds[1]].value));
                        _local_8.x = (0.5 * (_local_12.lowerBound.x + _local_12.upperBound.x));
                        _local_8.y = (0.5 * (_local_12.lowerBound.y + _local_12.upperBound.y));
                        _local_9.x = (0.5 * (_local_13.lowerBound.x + _local_13.upperBound.x));
                        _local_9.y = (0.5 * (_local_13.lowerBound.y + _local_13.upperBound.y));
                        this.m_debugDraw.DrawSegment(_local_8, _local_9, _local_10);
                        _local_16 = _local_17.next;
                    };
                    _local_2++;
                };
            };
            if ((_local_1 & b2DebugDraw.e_aabbBit))
            {
                _local_6 = this.m_broadPhase;
                _local_20 = _local_6.m_worldAABB.lowerBound;
                _local_21 = _local_6.m_worldAABB.upperBound;
                _local_7.Set((1 / _local_6.m_quantizationFactor.x), (1 / _local_6.m_quantizationFactor.y));
                _local_10.Set(0.9, 0.3, 0.9);
                _local_2 = 0;
                while (_local_2 < b2Settings.b2_maxProxies)
                {
                    _local_22 = _local_6.m_proxyPool[_local_2];
                    if (_local_22.IsValid() != false)
                    {
                        _local_12.lowerBound.x = (_local_20.x + (_local_7.x * _local_6.m_bounds[0][_local_22.lowerBounds[0]].value));
                        _local_12.lowerBound.y = (_local_20.y + (_local_7.y * _local_6.m_bounds[1][_local_22.lowerBounds[1]].value));
                        _local_12.upperBound.x = (_local_20.x + (_local_7.x * _local_6.m_bounds[0][_local_22.upperBounds[0]].value));
                        _local_12.upperBound.y = (_local_20.y + (_local_7.y * _local_6.m_bounds[1][_local_22.upperBounds[1]].value));
                        _local_14[0].Set(_local_12.lowerBound.x, _local_12.lowerBound.y);
                        _local_14[1].Set(_local_12.upperBound.x, _local_12.lowerBound.y);
                        _local_14[2].Set(_local_12.upperBound.x, _local_12.upperBound.y);
                        _local_14[3].Set(_local_12.lowerBound.x, _local_12.upperBound.y);
                        this.m_debugDraw.DrawPolygon(_local_14, 4, _local_10);
                    };
                    _local_2++;
                };
                _local_14[0].Set(_local_20.x, _local_20.y);
                _local_14[1].Set(_local_21.x, _local_20.y);
                _local_14[2].Set(_local_21.x, _local_21.y);
                _local_14[3].Set(_local_20.x, _local_21.y);
                this.m_debugDraw.DrawPolygon(_local_14, 4, new b2Color(0.3, 0.9, 0.9));
            };
            if ((_local_1 & b2DebugDraw.e_obbBit))
            {
                _local_10.Set(0.5, 0.3, 0.5);
                _local_3 = this.m_bodyList;
                while (_local_3)
                {
                    _local_11 = _local_3.m_xf;
                    _local_4 = _local_3.GetShapeList();
                    while (_local_4)
                    {
                        if (_local_4.m_type == b2Shape.e_polygonShape)
                        {
                            _local_23 = (_local_4 as b2PolygonShape);
                            _local_24 = _local_23.GetOBB();
                            _local_25 = _local_24.extents;
                            _local_14[0].Set(-(_local_25.x), -(_local_25.y));
                            _local_14[1].Set(_local_25.x, -(_local_25.y));
                            _local_14[2].Set(_local_25.x, _local_25.y);
                            _local_14[3].Set(-(_local_25.x), _local_25.y);
                            _local_2 = 0;
                            while (_local_2 < 4)
                            {
                                _local_26 = _local_24.R;
                                _local_27 = _local_14[_local_2];
                                _local_28 = (_local_24.center.x + ((_local_26.col1.x * _local_27.x) + (_local_26.col2.x * _local_27.y)));
                                _local_14[_local_2].y = (_local_24.center.y + ((_local_26.col1.y * _local_27.x) + (_local_26.col2.y * _local_27.y)));
                                _local_14[_local_2].x = _local_28;
                                _local_26 = _local_11.R;
                                _local_28 = (_local_11.position.x + ((_local_26.col1.x * _local_27.x) + (_local_26.col2.x * _local_27.y)));
                                _local_14[_local_2].y = (_local_11.position.y + ((_local_26.col1.y * _local_27.x) + (_local_26.col2.y * _local_27.y)));
                                _local_14[_local_2].x = _local_28;
                                _local_2++;
                            };
                            this.m_debugDraw.DrawPolygon(_local_14, 4, _local_10);
                        };
                        _local_4 = _local_4.m_next;
                    };
                    _local_3 = _local_3.m_next;
                };
            };
            if ((_local_1 & b2DebugDraw.e_centerOfMassBit))
            {
                _local_3 = this.m_bodyList;
                while (_local_3)
                {
                    _local_11 = s_xf;
                    _local_11.R = _local_3.m_xf.R;
                    _local_11.position = _local_3.GetWorldCenter();
                    this.m_debugDraw.DrawXForm(_local_11);
                    _local_3 = _local_3.m_next;
                };
            };
        }


    }
}//package Box2D.Dynamics

//------------------------------------------------------------
//editeur.$Editeur

package editeur
{
    import flash.display.Stage;
    import flash.display.MovieClip;
    import flash.filters.GlowFilter;
    import flash.xml.XMLNode;
    import ressources.$Res;
    import flash.events.MouseEvent;
    import flash.events.Event;

    public class $Editeur 
    {

        public static const LIMITE_S:int = 40;
        public static const LIMITE_O:int = 30;
        public static const OBJET_AUTORISÉS:Array = new Array(11, 14, 22, 15, 16, 12, 13, 6, 28, 32, 1, 2, 10, 3, 4, 7);
        public static var stage:Stage;
        public static var _root:MovieClip;
        private static const EFFET_SELECTION:Array = new Array(new GlowFilter(12763866, 1, 5, 5, 3, 3));
        public static var ZoneInfo:MovieClip;
        public static var ModeSelection:Boolean = false;
        private static var SelectionEnCours:XMLNode;
        private static var ClipSelectionEnCours:MovieClip;


        public static function Création_Nouveau_Monde(_arg_1:XMLNode):MovieClip
        {
            var _local_9:int;
            var _local_10:int;
            var _local_15:Array;
            var _local_16:XMLNode;
            var _local_17:String;
            var _local_18:MovieClip;
            var _local_19:XMLNode;
            var _local_20:MovieClip;
            var _local_21:XMLNode;
            var _local_22:int;
            var _local_2:XMLNode = _arg_1;
            var _local_3:MovieClip = new MovieClip();
            _local_3.ObjetInterdit = new Array(7, 26, 27);
            var _local_4:XMLNode = _local_2.childNodes[0];
            var _local_5:XMLNode = _local_2.childNodes[1];
            var _local_6:XMLNode = _local_5.childNodes[0];
            var _local_7:XMLNode = _local_5.childNodes[1];
            var _local_8:XMLNode = _local_5.childNodes[2];
            if (_local_4.attributes.G != null)
            {
                _local_15 = _local_4.attributes.G.split(",");
                _local_3.Gravité = true;
                _local_3.VGX = Number(_local_15[0]);
                _local_3.VGY = Number(_local_15[1]);
            };
            if (_local_4.attributes.N != null)
            {
                _local_3.Noire = true;
            };
            if (_local_4.attributes.C != null)
            {
                _local_3.CollisionJoueur = true;
            };
            if (_local_4.attributes.A != null)
            {
                _local_3.Lien = true;
            };
            var _local_11:Array = _local_7.childNodes;
            var _local_12:Array = new Array();
            _local_9 = _local_11.length;
            _local_10 = -1;
            while (++_local_10 < _local_9)
            {
                if (_local_10 == LIMITE_O) break;
                _local_16 = _local_11[_local_10];
                _local_17 = _local_16.nodeName;
                _local_18 = new MovieClip();
                if (_local_17 == "T")
                {
                    _local_18.name = "TS";
                }
                else
                {
                    if (_local_17 == "F")
                    {
                        _local_18.name = "F";
                    }
                    else
                    {
                        if (_local_17 == "DS")
                        {
                            _local_18.name = "SSS";
                        }
                        else
                        {
                            if (_local_17 == "DC")
                            {
                                _local_18.name = "SG";
                            };
                        };
                    };
                };
                _local_3.addChild(_local_18);
                _local_18.x = _local_16.attributes.X;
                _local_18.y = _local_16.attributes.Y;
            };
            var _local_13:Array = _local_6.childNodes;
            _local_9 = _local_13.length;
            _local_10 = -1;
            while (++_local_10 < _local_9)
            {
                if (_local_10 == LIMITE_S) break;
                _local_19 = _local_13[_local_10];
                _local_20 = $Res.Pouf("$Sol_DurDyn");
                _local_20.name = "SOL";
                _local_20.Type = int(_local_19.attributes.T);
                _local_20.Prop = _local_19.attributes.P.split(",");
                _local_3.addChild(_local_20);
                _local_20.width = (int(_local_19.attributes.L) * 1.01);
                _local_20.height = (int(_local_19.attributes.H) * 1.01);
                _local_20.x = _local_19.attributes.X;
                _local_20.y = _local_19.attributes.Y;
            };
            var _local_14:Array = _local_8.childNodes;
            if (_local_14.length > LIMITE_O)
            {
                _local_14.splice(LIMITE_O);
            };
            _local_9 = _local_14.length;
            _local_10 = -1;
            while (++_local_10 < _local_9)
            {
                _local_21 = _local_14[_local_10];
                _local_22 = int(_local_21.attributes.C);
                if (OBJET_AUTORISÉS.indexOf(_local_22) == -1)
                {
                    _local_21.removeNode();
                    _local_10--;
                    _local_9--;
                };
            };
            _local_3.ListeObjet = _local_14;
            return (_local_3);
        }

        public static function Génération_Zone(_arg_1:XMLNode, _arg_2:MovieClip):void
        {
            var _local_9:int;
            var _local_10:int;
            var _local_11:int;
            var _local_12:int;
            var _local_18:XMLNode;
            var _local_19:String;
            var _local_20:MovieClip;
            var _local_21:XMLNode;
            var _local_22:MovieClip;
            var _local_23:int;
            var _local_24:Array;
            var _local_25:XMLNode;
            var _local_26:int;
            var _local_27:MovieClip;
            var _local_28:Array;
            _arg_2.graphics.clear();
            while (_arg_2.numChildren)
            {
                _arg_2.removeChildAt(0);
            };
            _arg_2.graphics.beginFill(6976661);
            _arg_2.graphics.drawRect(0, 0, 800, 400);
            _arg_2.graphics.endFill();
            var _local_3:XMLNode = _arg_1.childNodes[0];
            var _local_4:XMLNode = _arg_1.childNodes[1];
            var _local_5:XMLNode = _local_4.childNodes[0];
            var _local_6:XMLNode = _local_4.childNodes[1];
            var _local_7:XMLNode = _local_4.childNodes[2];
            if (((!(_local_3.attributes.G == null)) && (_local_3.attributes.G == "0,10")))
            {
                delete _local_3.attributes.G;
            };
            if (_local_3.attributes.N != null)
            {
                _local_3.attributes.N = "";
            };
            if (_local_3.attributes.C != null)
            {
                _local_3.attributes.C = "";
            };
            if (_local_3.attributes.A != null)
            {
                _local_3.attributes.A = "";
            };
            var _local_8:* = (!(_local_3.attributes.V == null));
            if (_local_8)
            {
                _local_3.attributes.V = "";
            };
            var _local_13:Boolean;
            var _local_14:Array = _local_6.childNodes;
            var _local_15:Array = new Array();
            _local_11 = _local_14.length;
            _local_12 = -1;
            while (++_local_12 < _local_11)
            {
                if (_local_12 == LIMITE_O) break;
                _local_18 = _local_14[_local_12];
                _local_19 = _local_18.nodeName;
                if (_local_19 == "T")
                {
                    _local_20 = $Res.Pouf("$Trou_Souris");
                }
                else
                {
                    if (_local_19 == "F")
                    {
                        _local_20 = $Res.Pouf("$Fromage");
                        if (_local_8)
                        {
                            if (_local_13)
                            {
                                _local_18.removeNode();
                                _local_12--;
                                _local_11--;
                                continue;
                            };
                            _local_13 = true;
                        };
                    }
                    else
                    {
                        if (_local_19 == "DS")
                        {
                            _local_20 = $Res.Pouf("AnimStatique");
                            _local_20.gotoAndStop(1);
                        }
                        else
                        {
                            if (_local_19 == "DC")
                            {
                                _local_20 = $Res.Pouf("AnimStatiqueC");
                                _local_20.gotoAndStop(1);
                            };
                        };
                    };
                };
                _arg_2.addChild(_local_20);
                _local_20.x = _local_18.attributes.X;
                _local_20.y = _local_18.attributes.Y;
                _local_20.cacheAsBitmap = true;
                _local_20.addEventListener(MouseEvent.MOUSE_DOWN, Clique_Objet);
                _local_20.Info = _local_18;
                _local_20.useHandCursor = true;
                _local_20.buttonMode = true;
                if (SelectionEnCours == _local_18)
                {
                    Effet_Selection(_local_20);
                };
            };
            _local_11 = _local_15.length;
            _local_12 = -1;
            while (++_local_12 < _local_11)
            {
                _local_15[_local_12].removeNode();
            };
            var _local_16:Array = _local_5.childNodes;
            _local_11 = _local_16.length;
            _local_12 = -1;
            while (++_local_12 < _local_11)
            {
                if (_local_12 == LIMITE_S) break;
                _local_21 = _local_16[_local_12];
                _local_22 = $Res.Pouf("$Sol_DurDyn");
                _arg_2.addChild(_local_22);
                _local_22.x = _local_21.attributes.X;
                _local_22.y = _local_21.attributes.Y;
                _local_9 = _local_21.attributes.L;
                _local_10 = _local_21.attributes.H;
                if (_local_9 < 10)
                {
                    _local_9 = 10;
                    _local_21.attributes.L = 10;
                };
                if (_local_10 < 10)
                {
                    _local_10 = 10;
                    _local_21.attributes.H = 10;
                };
                _local_22.width = (_local_9 * 1.01);
                _local_22.height = (_local_10 * 1.01);
                _local_23 = _local_21.attributes.T;
                if (_local_23 == 1)
                {
                    _local_22.transform.colorTransform = _root.CouleurSolGlace;
                }
                else
                {
                    if (_local_23 == 2)
                    {
                        _local_22.transform.colorTransform = _root.CouleurSolTramp;
                    }
                    else
                    {
                        if (_local_23 == 3)
                        {
                            _local_22.transform.colorTransform = _root.CouleurSolLave;
                        }
                        else
                        {
                            if (_local_23 == 4)
                            {
                                _local_22.transform.colorTransform = _root.CouleurSolDur;
                            };
                        };
                    };
                };
                _local_24 = _local_21.attributes.P.split(",");
                if (((!(_local_24[5] == "1")) && (!(_local_24[5] == "0"))))
                {
                    _local_24[5] = 0;
                };
                if (((!(_local_24[0] == "1")) && (!(_local_24[0] == "0"))))
                {
                    _local_24[0] = 0;
                };
                if (_local_24[0] == "0")
                {
                    _local_24[1] = 0;
                    _local_24[5] = 0;
                    _local_24[6] = 0;
                    _local_24[7] = 0;
                };
                _local_22.rotation = int(_local_24[4]);
                _local_21.attributes.P = _local_24.join(",");
                _local_22.addEventListener(MouseEvent.MOUSE_DOWN, Clique_Objet);
                _local_22.Info = _local_21;
                _local_22.useHandCursor = true;
                _local_22.buttonMode = true;
                if (SelectionEnCours == _local_21)
                {
                    Effet_Selection(_local_22);
                };
            };
            var _local_17:Array = _local_7.childNodes;
            _local_11 = _local_17.length;
            _local_12 = -1;
            while (++_local_12 < _local_11)
            {
                if (_local_12 == LIMITE_O) break;
                _local_25 = _local_17[_local_12];
                _local_26 = int(_local_25.attributes.C);
                if (OBJET_AUTORISÉS.indexOf(_local_26) != -1)
                {
                    _local_27 = $Res.Pouf(("$Objet_" + _local_26));
                    _local_27.x = int(_local_25.attributes.X);
                    _local_27.y = int(_local_25.attributes.Y);
                    _arg_2.addChild(_local_27);
                    _local_28 = _local_25.attributes.P.split(",");
                    _local_27.rotation = int(_local_28[0]);
                    if (((_local_28.length == 1) || ((!(_local_28[1] == "1")) && (!(_local_28[1] == "0")))))
                    {
                        _local_28[1] = 0;
                    }
                    else
                    {
                        if (_local_28[1] == "1")
                        {
                            _local_27.transform.colorTransform = _root.CouleurFantome;
                        };
                    };
                    _local_27.addEventListener(MouseEvent.MOUSE_DOWN, Clique_Objet);
                    _local_27.Info = _local_25;
                    _local_27.useHandCursor = true;
                    _local_27.buttonMode = true;
                    if (SelectionEnCours == _local_25)
                    {
                        Effet_Selection(_local_27);
                    };
                };
            };
        }

        public static function Effet_Selection(_arg_1:MovieClip):void
        {
            if (ClipSelectionEnCours)
            {
                ClipSelectionEnCours.filters = new Array();
            };
            ClipSelectionEnCours = _arg_1;
            if (ClipSelectionEnCours)
            {
                ClipSelectionEnCours.filters = EFFET_SELECTION;
            }
            else
            {
                SelectionEnCours = null;
            };
        }

        private static function Clique_Objet(_arg_1:Event):void
        {
            var _local_2:MovieClip;
            if (ModeSelection)
            {
                _local_2 = (_arg_1.currentTarget as MovieClip);
                SelectionEnCours = _local_2.Info;
                ZoneInfo.MAJ(SelectionEnCours, _local_2);
                Effet_Selection(_local_2);
                stage.addEventListener(MouseEvent.MOUSE_UP, Declique_Objet);
            };
        }

        private static function Declique_Objet(_arg_1:Event):void
        {
            ZoneInfo.Fin_Déplacement();
        }


    }
}//package editeur

//------------------------------------------------------------
//elements.JadeAscenseur

package elements
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.display.Shape;
    import flash.events.MouseEvent;
    import flash.events.Event;

    public class JadeAscenseur extends Sprite 
    {

        private var Texte:TextField;
        private var Largeur:int;
        private var Hauteur:int;
        private var ClipAscenseur:Sprite;
        private var ClipBarre:Sprite;
        private var PuissanceMolette:int;
        private var AscenseurCF:uint;
        private var AscenseurCB:uint;
        private var FinEnCours:Boolean = false;
        private var LimiteBarreY:int;
        private var DécalageBarreY:int;

        public function JadeAscenseur(_arg_1:TextField, _arg_2:int=1, _arg_3:uint=2108213, _arg_4:uint=3952740)
        {
            this.Texte = _arg_1;
            this.Largeur = this.Texte.width;
            this.Hauteur = (this.Texte.height - 10);
            this.Texte.mouseWheelEnabled = false;
            this.Texte.mouseEnabled = true;
            mouseChildren = false;
            mouseEnabled = true;
            this.PuissanceMolette = _arg_2;
            this.ClipAscenseur = new Sprite();
            this.ClipAscenseur.x = ((this.Texte.x + this.Largeur) + 5);
            this.ClipAscenseur.y = (this.Texte.y + 5);
            this.AscenseurCF = _arg_3;
            this.AscenseurCB = _arg_4;
            var _local_5:Shape = new Shape();
            _local_5.graphics.beginFill(0, 0);
            _local_5.graphics.drawRect(-5, 0, 13, this.Hauteur);
            _local_5.graphics.endFill();
            this.ClipAscenseur.addChild(_local_5);
            var _local_6:Shape = new Shape();
            _local_6.graphics.beginFill(this.AscenseurCF);
            _local_6.graphics.drawRoundRect(0, 0, 3, this.Hauteur, 4);
            _local_6.graphics.endFill();
            this.ClipAscenseur.addChild(_local_6);
            this.ClipBarre = new Sprite();
            this.ClipAscenseur.addChild(this.ClipBarre);
            addChild(this.ClipAscenseur);
            addEventListener(MouseEvent.MOUSE_WHEEL, this.Utilisation_Molette);
            this.Texte.addEventListener(MouseEvent.MOUSE_WHEEL, this.Utilisation_Molette);
            addEventListener(MouseEvent.MOUSE_DOWN, this.Clique_Ascenseur);
            this.Texte.parent.addChild(this);
            visible = false;
        }

        public function Rendu_Ascenseur(_arg_1:int):void
        {
            var _local_2:int;
            var _local_3:Number;
            var _local_4:int;
            if (this.Texte.maxScrollV == 1)
            {
                this.Texte.scrollV = 1;
                visible = false;
                this.FinEnCours = false;
            }
            else
            {
                _local_2 = this.Texte.numLines;
                _local_3 = ((_local_2 - this.Texte.maxScrollV) / _local_2);
                this.FinEnCours = (this.Texte.scrollV == this.Texte.maxScrollV);
                visible = true;
                _local_4 = int((this.Hauteur * _local_3));
                if (_local_4 < 10)
                {
                    _local_4 = 10;
                };
                this.ClipBarre.graphics.clear();
                this.ClipBarre.graphics.beginFill(this.AscenseurCB);
                this.ClipBarre.graphics.drawRoundRect(0, 0, 3, _local_4, 4);
                this.ClipBarre.graphics.endFill();
                this.LimiteBarreY = (this.Hauteur - _local_4);
                if (_arg_1 == 0)
                {
                    this.Texte.scrollV = 0;
                    this.ClipBarre.y = 0;
                }
                else
                {
                    if (_arg_1 == 1)
                    {
                        if (this.FinEnCours)
                        {
                            this.Texte.scrollV = this.Texte.maxScrollV;
                            this.ClipBarre.y = this.LimiteBarreY;
                        };
                    }
                    else
                    {
                        if (_arg_1 == 2)
                        {
                            this.Texte.scrollV = this.Texte.maxScrollV;
                            this.ClipBarre.y = this.LimiteBarreY;
                        };
                    };
                };
            };
        }

        private function Utilisation_Molette(_arg_1:MouseEvent):void
        {
            var _local_2:int;
            var _local_3:Number;
            if (visible)
            {
                if (_arg_1.delta < 0)
                {
                    _local_2 = this.PuissanceMolette;
                }
                else
                {
                    _local_2 = -(this.PuissanceMolette);
                };
                this.Texte.scrollV = (this.Texte.scrollV + _local_2);
                _local_3 = ((this.Texte.scrollV - 1) / (this.Texte.maxScrollV - 1));
                this.ClipBarre.y = int((this.LimiteBarreY * _local_3));
            };
        }

        private function Clique_Ascenseur(_arg_1:Event):void
        {
            this.DécalageBarreY = this.ClipBarre.mouseY;
            stage.addEventListener(MouseEvent.MOUSE_MOVE, this.Boucle_Ascenseur);
            stage.addEventListener(MouseEvent.MOUSE_UP, this.Declique_Ascenseur);
        }

        private function Declique_Ascenseur(_arg_1:Event):void
        {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.Boucle_Ascenseur);
            stage.removeEventListener(MouseEvent.MOUSE_UP, this.Declique_Ascenseur);
        }

        private function Boucle_Ascenseur(_arg_1:MouseEvent):void
        {
            var _local_2:int = (this.ClipAscenseur.mouseY - this.DécalageBarreY);
            if (_local_2 < 0)
            {
                _local_2 = 0;
            }
            else
            {
                if (_local_2 > this.LimiteBarreY)
                {
                    _local_2 = this.LimiteBarreY;
                };
            };
            this.ClipBarre.y = _local_2;
            var _local_3:Number = (this.ClipBarre.y / this.LimiteBarreY);
            var _local_4:int = Math.ceil((this.Texte.maxScrollV * _local_3));
            if (_local_4 == 0)
            {
                _local_4 = 1;
            };
            this.Texte.scrollV = _local_4;
            _arg_1.updateAfterEvent();
        }


    }
}//package elements

//------------------------------------------------------------
//elements.JadeClique

package elements
{
    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.events.Event;

    public class JadeClique extends Sprite 
    {

        public static var BTN_CLASSE:Class;

        private var Fonction:Function;
        private var Arg:*;
        private var Argument:Boolean = false;
        private var Dessus:Boolean = false;
        private var PosX:int = 10;
        private var Active:Boolean = true;
        private var CouleurPrimaire:uint = 12763866;
        private var CouleurSecondaire:uint = 8772;
        private var CouleurBase:uint = CouleurPrimaire;
        private var F1:MovieClip;
        private var F2:MovieClip;
        public var Texte:TextField;
        public var VignetteTexte:String;
        public var VignetteFixe:int;
        public var VignetteFixeX:int;
        public var VignetteFixeY:int;
        public var VignetteLargeur:int;

        public function JadeClique(_arg_1:int, _arg_2:int, _arg_3:String, _arg_4:Function, _arg_5:*=null, _arg_6:int=0)
        {
            var _local_8:int;
            super();
            mouseChildren = false;
            this.Fonction = _arg_4;
            if (_arg_5 != null)
            {
                this.Argument = true;
                this.Arg = _arg_5;
            };
            var _local_7:MovieClip = new BTN_CLASSE();
            this.Texte = _local_7.T;
            this.Texte.text = _arg_3;
            this.F1 = _local_7.F1;
            this.F2 = _local_7.F2;
            if (_arg_6 != 0)
            {
                this.PosX = int((((_arg_6 + 20) - _local_8) / 2));
                _local_8 = _arg_6;
            };
            this.Texte.width = (_local_8 + 20);
            this.F1.M.width = _local_8;
            this.F1.D.x = (_local_8 + 10);
            this.F2.M.width = _local_8;
            this.F2.D.x = (_local_8 + 10);
            if (_arg_1 > 1000)
            {
                x = int((((_arg_1 - 1000) - (_local_8 + 20)) / 2));
            }
            else
            {
                x = _arg_1;
            };
            y = _arg_2;
            addChild(this.F1);
            addChild(this.Texte);
            addEventListener(MouseEvent.MOUSE_OVER, this.Souris_Over);
            addEventListener(MouseEvent.MOUSE_OUT, this.Souris_Out);
            addEventListener(MouseEvent.MOUSE_DOWN, this.Souris_Clique1);
            useHandCursor = true;
            buttonMode = true;
        }

        public function Couleur_Primaire(_arg_1:uint):void
        {
            this.CouleurPrimaire = _arg_1;
            this.CouleurBase = _arg_1;
            this.Texte.textColor = _arg_1;
        }

        public function Activation(_arg_1:Boolean):void
        {
            if ((((_arg_1) && (!(this.Active))) || ((this.Active) && (!(_arg_1)))))
            {
                this.Active = _arg_1;
                if (this.Active)
                {
                    mouseEnabled = true;
                    if (this.Dessus)
                    {
                        this.Texte.textColor = this.CouleurSecondaire;
                    }
                    else
                    {
                        this.Texte.textColor = this.CouleurPrimaire;
                    };
                }
                else
                {
                    mouseEnabled = false;
                    this.Texte.textColor = 8948906;
                };
            };
        }

        public function Bloqué(_arg_1:Boolean):void
        {
            if (_arg_1)
            {
                this.CouleurBase = this.CouleurSecondaire;
                this.Texte.textColor = this.CouleurSecondaire;
            }
            else
            {
                this.CouleurBase = this.CouleurPrimaire;
                if (this.Active)
                {
                    if (this.Dessus)
                    {
                        this.Texte.textColor = this.CouleurSecondaire;
                    }
                    else
                    {
                        this.Texte.textColor = this.CouleurPrimaire;
                    };
                }
                else
                {
                    this.Texte.textColor = 6316176;
                };
            };
        }

        private function P1():void
        {
            stage.removeEventListener(MouseEvent.MOUSE_UP, this.Souris_Clique2);
            this.Texte.y = 2;
            removeChild(this.F2);
            addChildAt(this.F1, 0);
            if (this.Dessus)
            {
                if (this.Argument)
                {
                    this.Fonction(this.Arg);
                }
                else
                {
                    this.Fonction();
                };
            };
        }

        private function P2():void
        {
            this.Texte.y = 3;
            removeChild(this.F1);
            addChildAt(this.F2, 0);
            stage.addEventListener(MouseEvent.MOUSE_UP, this.Souris_Clique2);
        }

        private function Souris_Clique1(_arg_1:Event):void
        {
            if (this.Active)
            {
                this.P2();
            };
        }

        private function Souris_Clique2(_arg_1:Event):void
        {
            if (this.Active)
            {
                this.P1();
            };
        }

        private function Souris_Over(_arg_1:Event):void
        {
            this.Dessus = true;
            if (this.Active)
            {
                this.Texte.textColor = this.CouleurSecondaire;
            };
        }

        private function Souris_Out(_arg_1:Event):void
        {
            this.Dessus = false;
            if (this.Active)
            {
                this.Texte.textColor = this.CouleurBase;
            };
        }


    }
}//package elements

//------------------------------------------------------------
//elements.JadeListe

package elements
{
    import flash.display.Sprite;
    import flash.display.Shape;
    import flash.events.MouseEvent;
    import flash.events.Event;
    import flash.display.MovieClip;

    public class JadeListe extends Sprite 
    {

        private var Largeur:int;
        private var Hauteur:int;
        private var Fond:Shape;
        private var Masque:Shape;
        private var Liste:Array = new Array();
        private var Boite:Sprite = new Sprite();
        private var FonctionRendu:Function;
        private var RenduRestant:int;
        private var RenduEnCours:int;
        private var BaseY:int;
        private var Interval:int;
        private var AscenseurActif:Boolean = false;
        private var PuissanceMolette:int;
        private var ClipAscenseur:Sprite;
        private var ClipBarre:Sprite;
        private var HauteurAscenseur:int;
        private var AscenseurCF:uint;
        private var AscenseurCB:uint;
        private var LimiteY:int;
        private var LimiteBarreY:int;
        private var DécalageBarreY:int;
        private var FinEnCours:Boolean = false;
        private var HauteurFixe:Boolean;
        public var HauteurClip:int;
        public var VignetteTexte:String;
        public var VignetteFixe:int;
        public var VignetteFixeX:int;
        public var VignetteFixeY:int;
        public var VignetteLargeur:int;

        public function JadeListe(_arg_1:int, _arg_2:int, _arg_3:int=0, _arg_4:Boolean=true, _arg_5:int=0)
        {
            mouseEnabled = false;
            this.Boite.mouseEnabled = false;
            this.Interval = _arg_5;
            this.Largeur = _arg_1;
            this.Hauteur = _arg_2;
            this.HauteurAscenseur = (this.Hauteur - 20);
            if (_arg_3 == 0)
            {
                this.HauteurFixe = false;
            }
            else
            {
                this.HauteurFixe = true;
                this.HauteurClip = (_arg_3 + this.Interval);
            };
            this.Fond = new Shape();
            this.Masque = new Shape();
            if (_arg_4)
            {
                this.Fond.graphics.lineStyle(2, 0, 1, true);
                this.Fond.graphics.beginFill(3947605);
                this.Fond.graphics.drawRoundRect(0, 0, this.Largeur, this.Hauteur, 20);
                this.Fond.graphics.endFill();
                this.Masque.graphics.beginFill(0);
                this.Masque.graphics.drawRoundRect(1, 1, (this.Largeur - 2), (this.Hauteur - 2), 20);
                this.Masque.graphics.endFill();
            }
            else
            {
                this.Fond.graphics.beginFill(0, 0);
                this.Fond.graphics.drawRect(0, 0, this.Largeur, this.Hauteur);
                this.Fond.graphics.endFill();
                this.Masque.graphics.beginFill(0);
                this.Masque.graphics.drawRect(1, 1, this.Largeur, this.Hauteur);
                this.Masque.graphics.endFill();
            };
            this.Boite.mask = this.Masque;
            if (this.Fond)
            {
                addChild(this.Fond);
            };
            addChild(this.Boite);
            addChild(this.Masque);
        }

        public function Ascenseur(_arg_1:int=80, _arg_2:uint=2108213, _arg_3:uint=3952740):void
        {
            var _local_4:Shape;
            var _local_5:Shape;
            if (!this.AscenseurActif)
            {
                mouseEnabled = true;
                this.AscenseurActif = true;
                this.PuissanceMolette = _arg_1;
                this.ClipAscenseur = new Sprite();
                this.ClipAscenseur.x = (this.Largeur - 3);
                this.ClipAscenseur.y = 10;
                this.AscenseurCF = _arg_2;
                this.AscenseurCB = _arg_3;
                _local_4 = new Shape();
                _local_4.graphics.beginFill(0, 0);
                _local_4.graphics.drawRect(-5, 0, 13, this.HauteurAscenseur);
                _local_4.graphics.endFill();
                this.ClipAscenseur.addChild(_local_4);
                _local_5 = new Shape();
                _local_5.graphics.beginFill(this.AscenseurCF);
                _local_5.graphics.drawRoundRect(0, 0, 3, this.HauteurAscenseur, 4);
                _local_5.graphics.endFill();
                this.ClipAscenseur.addChild(_local_5);
                this.ClipBarre = new Sprite();
                this.ClipAscenseur.addChild(this.ClipBarre);
                addChild(this.ClipAscenseur);
                this.ClipAscenseur.mouseChildren = false;
                addEventListener(MouseEvent.MOUSE_WHEEL, this.Utilisation_Molette);
                this.ClipAscenseur.addEventListener(MouseEvent.MOUSE_DOWN, this.Clique_Ascenseur);
            };
        }

        public function Rendu_Ascenseur():void
        {
            var _local_2:int;
            var _local_1:Number = (this.Hauteur / this.BaseY);
            if (_local_1 >= 1)
            {
                this.Boite.y = 0;
                this.ClipAscenseur.visible = false;
                this.FinEnCours = false;
            }
            else
            {
                this.FinEnCours = (this.Boite.y == this.LimiteY);
                this.ClipAscenseur.visible = true;
                _local_2 = int((this.HauteurAscenseur * _local_1));
                if (_local_2 < 10)
                {
                    _local_2 = 10;
                };
                this.ClipBarre.graphics.clear();
                this.ClipBarre.graphics.beginFill(this.AscenseurCB);
                this.ClipBarre.graphics.drawRoundRect(0, 0, 3, _local_2, 4);
                this.ClipBarre.graphics.endFill();
                this.LimiteY = (this.Hauteur - this.BaseY);
                this.LimiteBarreY = (this.HauteurAscenseur - _local_2);
            };
        }

        public function Position(_arg_1:int=0):void
        {
            if (_arg_1 == 0)
            {
                this.Boite.y = 0;
                this.ClipBarre.y = 0;
            }
            else
            {
                if (_arg_1 == 1)
                {
                    if (this.FinEnCours)
                    {
                        this.Boite.y = this.LimiteY;
                        this.ClipBarre.y = this.LimiteBarreY;
                    };
                }
                else
                {
                    if (_arg_1 == 2)
                    {
                        this.Boite.y = this.LimiteY;
                        this.ClipBarre.y = this.LimiteBarreY;
                    };
                };
            };
        }

        public function Vider():void
        {
            if (this.RenduRestant != 0)
            {
                this.RenduRestant = 0;
                removeEventListener(Event.ENTER_FRAME, this.Boucle);
            };
            while (this.Boite.numChildren != 0)
            {
                this.Boite.removeChildAt(0);
            };
            this.Liste = new Array();
        }

        public function Ajout_Element(_arg_1:MovieClip, _arg_2:Boolean=false):void
        {
            _arg_1.visible = false;
            if (_arg_2)
            {
                this.Liste.unshift(_arg_1);
                this.Boite.addChildAt(_arg_1, 0);
            }
            else
            {
                this.Liste.push(_arg_1);
                this.Boite.addChild(_arg_1);
            };
        }

        public function Suppr_Element(_arg_1:MovieClip):void
        {
            var _local_2:int = this.Liste.length;
            var _local_3:int;
            while (_local_3 < _local_2)
            {
                if (this.Liste[_local_3] == _arg_1)
                {
                    this.Liste.splice(_local_3, 1);
                    this.Boite.removeChild(_arg_1);
                    return;
                };
                _local_3++;
            };
        }

        public function Classer(_arg_1:String, _arg_2:int=0):void
        {
            this.Liste.sortOn(_arg_1, _arg_2);
        }

        public function Rendu(_arg_1:String=null, _arg_2:int=0, _arg_3:Function=null):void
        {
            var _local_4:int;
            var _local_5:int;
            var _local_6:MovieClip;
            if (_arg_1)
            {
                this.Liste.sortOn(_arg_1, _arg_2);
            };
            this.BaseY = this.Interval;
            if (_arg_3 != null)
            {
                this.RenduRestant = this.Liste.length;
                this.RenduEnCours = 0;
                this.FonctionRendu = _arg_3;
                addEventListener(Event.ENTER_FRAME, this.Boucle);
            }
            else
            {
                _local_4 = this.Liste.length;
                _local_5 = 0;
                while (_local_5 < _local_4)
                {
                    _local_6 = this.Liste[_local_5];
                    _local_6.y = this.BaseY;
                    if (this.HauteurFixe)
                    {
                        this.BaseY = (this.BaseY + this.HauteurClip);
                    }
                    else
                    {
                        this.BaseY = (this.BaseY + (int(_local_6.height) + this.Interval));
                    };
                    _local_6.visible = true;
                    _local_5++;
                };
                if (this.AscenseurActif)
                {
                    this.Rendu_Ascenseur();
                };
            };
        }

        public function MAJ_Hauteur(_arg_1:int):void
        {
            this.BaseY = (this.Boite.height + (this.Interval * 2));
            if (this.AscenseurActif)
            {
                this.Rendu_Ascenseur();
                this.Position(_arg_1);
            };
        }

        private function Boucle(_arg_1:Event):void
        {
            var _local_2:MovieClip;
            if (this.RenduRestant == 0)
            {
                removeEventListener(Event.ENTER_FRAME, this.Boucle);
                if (this.AscenseurActif)
                {
                    this.Rendu_Ascenseur();
                };
            }
            else
            {
                _local_2 = this.Liste[this.RenduEnCours];
                _local_2 = this.FonctionRendu(_local_2);
                _local_2.y = this.BaseY;
                if (this.HauteurFixe)
                {
                    this.BaseY = (this.BaseY + this.HauteurClip);
                }
                else
                {
                    this.BaseY = (this.BaseY + (int(_local_2.height) + this.Interval));
                };
                _local_2.visible = true;
                this.RenduEnCours++;
                this.RenduRestant--;
            };
        }

        private function Utilisation_Molette(_arg_1:MouseEvent):void
        {
            var _local_2:int;
            var _local_3:Number;
            if (((this.AscenseurActif) && (this.ClipAscenseur.visible)))
            {
                if (_arg_1.delta < 0)
                {
                    _local_2 = -(this.PuissanceMolette);
                }
                else
                {
                    _local_2 = this.PuissanceMolette;
                };
                this.Boite.y = (this.Boite.y + _local_2);
                if (this.Boite.y > 0)
                {
                    this.Boite.y = 0;
                }
                else
                {
                    if (this.Boite.y < this.LimiteY)
                    {
                        this.Boite.y = this.LimiteY;
                    };
                };
                _local_3 = (this.Boite.y / this.LimiteY);
                this.ClipBarre.y = int((this.LimiteBarreY * _local_3));
            };
        }

        private function Clique_Ascenseur(_arg_1:Event):void
        {
            this.DécalageBarreY = this.ClipBarre.mouseY;
            stage.addEventListener(MouseEvent.MOUSE_MOVE, this.Boucle_Ascenseur);
            stage.addEventListener(MouseEvent.MOUSE_UP, this.Declique_Ascenseur);
        }

        private function Declique_Ascenseur(_arg_1:Event):void
        {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.Boucle_Ascenseur);
            stage.removeEventListener(MouseEvent.MOUSE_UP, this.Declique_Ascenseur);
        }

        private function Boucle_Ascenseur(_arg_1:MouseEvent):void
        {
            var _local_2:int = (this.ClipAscenseur.mouseY - this.DécalageBarreY);
            if (_local_2 < 0)
            {
                _local_2 = 0;
            }
            else
            {
                if (_local_2 > this.LimiteBarreY)
                {
                    _local_2 = this.LimiteBarreY;
                };
            };
            this.ClipBarre.y = _local_2;
            var _local_3:Number = (this.ClipBarre.y / this.LimiteBarreY);
            this.Boite.y = int((this.LimiteY * _local_3));
            _arg_1.updateAfterEvent();
        }


    }
}//package elements

//------------------------------------------------------------
//elements.JadeSouris

package elements
{
    import flash.external.ExternalInterface;
    import flash.display.Stage;
    import flash.events.Event;

    public class JadeSouris 
    {

        private static var _mouseWheelTrapped:Boolean;


        public static function Init(_arg_1:Stage):void
        {
            if (ExternalInterface.available)
            {
            };
        }

        public static function Activation(_arg_1:Event):void
        {
            allowBrowserScroll(false);
        }

        public static function Désactivation(_arg_1:Event):void
        {
            allowBrowserScroll(true);
        }

        private static function allowBrowserScroll(_arg_1:Boolean):void
        {
            createMouseWheelTrap();
            if (ExternalInterface.available)
            {
                ExternalInterface.call("allowBrowserScroll", _arg_1);
            };
        }

        private static function createMouseWheelTrap():void
        {
            if (_mouseWheelTrapped)
            {
                return;
            };
            _mouseWheelTrapped = true;
            if (ExternalInterface.available)
            {
                ExternalInterface.call("eval", "var browserScrolling;function allowBrowserScroll(value){browserScrolling=value;}function handle(delta){if(!browserScrolling){return false;}return true;}function wheel(event){var delta=0;if(!event){event=window.event;}if(event.wheelDelta){delta=event.wheelDelta/120;if(window.opera){delta=-delta;}}else if(event.detail){delta=-event.detail/3;}if(delta){handle(delta);}if(!browserScrolling){if(event.preventDefault){event.preventDefault();}event.returnValue=false;}}if(window.addEventListener){window.addEventListener('DOMMouseScroll',wheel,false);}window.onmousewheel=document.onmousewheel=wheel;allowBrowserScroll(true);");
            };
        }


    }
}//package elements

//------------------------------------------------------------
//interfaces.InterfaceConnexion

package interfaces
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.display.MovieClip;
    import elements.JadeAscenseur;
    import ressources.$Res;
    import textes.OutilsTexte;

    public final class InterfaceConnexion extends Sprite 
    {

        public static const MODE_IDENTIFICATION:String = "IDENTIFICATION";
        public static const MODE_CREATION_COMPTE:String = "CREATION COMPTE";
        public static const MODE_SERVEUR:String = "SERVEUR";
        private static var NouvellesOk:Boolean = false;

        private var NewsFR:Class = InterfaceConnexion_NewsFR;
        private var NewsEN:Class = InterfaceConnexion_NewsEN;
        public var _JC:TextField;
        public var _I:MovieClip;
        public var Version:TextField;
        public var clipBase:MovieClip;
        private var Texte:TextField;
        private var AscenseurTexte:JadeAscenseur;

        public function InterfaceConnexion(_arg_1:Transformice)
        {
            this.clipBase = $Res.Pouf("$InterfaceConnexion");
            addChild(this.clipBase);
            this.clipBase.I(_arg_1);
            this.clipBase._LS.I(_arg_1);
            this._I = this.clipBase._I;
            this._JC = this._I._JC;
            this.Version = this.clipBase.Version;
            this.Texte = this.clipBase.Texte;
            this.Texte.styleSheet = Transformice.Instance.StyleTexte;
            this.AscenseurTexte = new JadeAscenseur(this.Texte, 4);
            if (Transformice.Instance.SalonCible != "1")
            {
                this.clipBase._I._Salon.text = OutilsTexte.Texte("$Salon_Cible", Transformice.Instance.SalonCible);
            };
        }

        public function Chargement_Nouvelles():void
        {
            var _local_1:String = Transformice.Instance.Langue;
            var _local_2:* = "";
            if (_local_1 == "fr")
            {
                _local_2 = String(new this.NewsFR());
            }
            else
            {
                _local_2 = String(new this.NewsEN());
            };
            _local_2 = _local_2.split("\r").join("");
            this.Texte.htmlText = _local_2;
            this.AscenseurTexte.Rendu_Ascenseur(0);
        }

        public function Changement_Connexion(_arg_1:String):void
        {
            if (_arg_1 == MODE_IDENTIFICATION)
            {
                if (Transformice.Instance.ClipServeur.parent)
                {
                    Transformice.Instance.removeChild(Transformice.Instance.ClipServeur);
                    Transformice.Instance.ClipServeur._CC.visible = false;
                };
                Transformice.Instance.addChildAt(this, 0);
                if (!NouvellesOk)
                {
                    NouvellesOk = true;
                    this.Chargement_Nouvelles();
                };
            }
            else
            {
                if (_arg_1 == MODE_CREATION_COMPTE)
                {
                    if (parent)
                    {
                        parent.removeChild(this);
                    };
                    Transformice.Instance.ClipServeur._CC.visible = true;
                    Transformice.Instance.addChild(Transformice.Instance.ClipServeur);
                }
                else
                {
                    if (_arg_1 == MODE_SERVEUR)
                    {
                        if (parent)
                        {
                            parent.removeChild(this);
                        };
                        Transformice.Instance.addChildAt(Transformice.Instance.ClipServeur, 0);
                    };
                };
            };
        }


    }
}//package interfaces

//------------------------------------------------------------
//interfaces.InterfaceConnexion_NewsEN

package interfaces
{
    import mx.core.ByteArrayAsset;

    public class InterfaceConnexion_NewsEN extends ByteArrayAsset 
    {


    }
}//package interfaces

//------------------------------------------------------------
//interfaces.InterfaceConnexion_NewsFR

package interfaces
{
    import mx.core.ByteArrayAsset;

    public class InterfaceConnexion_NewsFR extends ByteArrayAsset 
    {


    }
}//package interfaces

//------------------------------------------------------------
//mx.core.ByteArrayAsset

package mx.core
{
    import flash.utils.ByteArray;

    public class ByteArrayAsset extends ByteArray implements IFlexAsset 
    {

        mx_internal static const VERSION:String = "4.1.0.16076";


    }
}//package mx.core

//------------------------------------------------------------
//mx.core.IFlexAsset

package mx.core
{
    public interface IFlexAsset 
    {

    }
}//package mx.core

//------------------------------------------------------------
//mx.core.mx_internal

package mx.core
{
    public namespace mx_internal = "http://www.adobe.com/2006/flex/mx/internal";
}//package mx.core

//------------------------------------------------------------
//pubs.CPMStar

package pubs
{
    import flash.display.Sprite;
    import elements.JadeClique;
    import flash.utils.Timer;
    import flash.display.Loader;
    import flash.display.Shape;
    import textes.OutilsTexte;
    import ressources.$Res;
    import flash.display.MovieClip;
    import flash.net.URLRequest;
    import flash.events.Event;
    import flash.events.TimerEvent;
    import flash.display.DisplayObjectContainer;

    public final class CPMStar 
    {

        private static const IDENTIFIANT_CMPStar:int = 17033;
        private static var IDENTIFIANT_JEU:int;
        private static const Arrondie:int = 20;
        private static const Largeur:int = 300;
        private static const Hauteur:int = 250;
        private static const PosX:int = 250;
        private static const PosY:int = 200;
        public static var PubCPMStarEnCours:Boolean = false;

        private var Clip:Sprite;
        private var Btn_Passer:JadeClique;
        private var TempsAffichage:Timer;
        private var TempsDestruction:Timer;
        private var Pub:Loader;
        private var DureeMin:int = 0;
        private var DureeMax:int = 2000;

        public function CPMStar(_arg_1:int, _arg_2:int, _arg_3:int)
        {
            var _local_5:Sprite;
            var _local_6:Shape;
            super();
            IDENTIFIANT_JEU = _arg_1;
            this.DureeMin = (_arg_2 * 1000);
            if (_arg_3)
            {
                this.DureeMax = (_arg_3 * 1000);
            };
            this.Clip = new Sprite();
            this.Clip.graphics.beginFill(6976661);
            this.Clip.graphics.drawRect(0, 0, 800, 600);
            this.Clip.graphics.endFill();
            this.Btn_Passer = new JadeClique(1800, 460, OutilsTexte.Texte("$Fermer"), this.Destruction, null, 280);
            this.Btn_Passer.visible = false;
            this.Clip.addChild(this.Btn_Passer);
            var _local_4:MovieClip = $Res.Pouf("$LogoTransformice");
            _local_4.x = 400;
            _local_4.y = 95;
            _local_4.cacheAsBitmap = true;
            _local_4.mouseChildren = false;
            _local_4.mouseEnabled = false;
            this.Clip.addChild(_local_4);
            this.Pub = new Loader();
            this.Pub.x = PosX;
            this.Pub.y = PosY;
            this.Clip.addChild(this.Pub);
            _local_5 = new Sprite();
            _local_5.x = PosX;
            _local_5.y = PosY;
            _local_5.graphics.beginFill(0xFF0000);
            _local_5.graphics.drawRoundRect(0, 0, Largeur, Hauteur, Arrondie);
            _local_5.graphics.endFill();
            this.Clip.addChild(_local_5);
            this.Pub.mask = _local_5;
            _local_6 = new Shape();
            _local_6.x = PosX;
            _local_6.y = PosY;
            _local_6.graphics.lineStyle(2, 0, 1, true);
            _local_6.graphics.drawRoundRect(0, 0, Largeur, Hauteur, Arrondie);
            this.Clip.addChild(_local_6);
        }

        public function Affichage(_arg_1:DisplayObjectContainer):void
        {
            if (PubCPMStarEnCours)
            {
                return;
            };
            PubCPMStarEnCours = true;
            this.Pub.load(new URLRequest(((("http://server.cpmstar.com/adviewas3.swf?poolid=" + IDENTIFIANT_CMPStar) + "&subpoolid=") + IDENTIFIANT_JEU)));
            this.Pub.contentLoaderInfo.addEventListener(Event.COMPLETE, this.Pub_Charge_Ok);
            _arg_1.addChild(this.Clip);
            if (this.TempsAffichage)
            {
                this.TempsAffichage.reset();
                this.TempsAffichage.removeEventListener(TimerEvent.TIMER, this.Passage_Possible);
            };
            this.TempsAffichage = new Timer(this.DureeMin, 1);
            this.TempsAffichage.addEventListener(TimerEvent.TIMER, this.Passage_Possible);
            this.TempsAffichage.start();
            if (this.TempsDestruction)
            {
                this.TempsDestruction.reset();
                this.TempsDestruction.removeEventListener(TimerEvent.TIMER, this.Destruction);
            };
            this.TempsDestruction = new Timer(this.DureeMax, 1);
            this.TempsDestruction.addEventListener(TimerEvent.TIMER, this.Destruction);
        }

        public function Pub_Charge_Ok(_arg_1:Event=null):void
        {
            this.TempsDestruction.start();
        }

        public function Destruction(_arg_1:Event=null):void
        {
            if (this.Clip.parent)
            {
                this.Clip.parent.removeChild(this.Clip);
            };
            this.Clip.removeChild(this.Pub);
            this.Pub.unload();
            this.Pub.unloadAndStop(true);
            if (this.TempsAffichage)
            {
                this.TempsAffichage.reset();
                this.TempsAffichage.removeEventListener(TimerEvent.TIMER, this.Passage_Possible);
                this.TempsAffichage = null;
            };
            if (this.TempsDestruction)
            {
                this.TempsDestruction.reset();
                this.TempsDestruction.removeEventListener(TimerEvent.TIMER, this.Destruction);
                this.TempsDestruction = null;
            };
            PubCPMStarEnCours = false;
        }

        private function Passage_Possible(_arg_1:Event=null):void
        {
            this.TempsAffichage.reset();
            this.TempsAffichage.removeEventListener(TimerEvent.TIMER, this.Passage_Possible);
            this.Btn_Passer.visible = true;
        }


    }
}//package pubs

//------------------------------------------------------------
//ressources.$Res

package ressources
{
    import __AS3__.vec.Vector;
    import flash.system.ApplicationDomain;
    import flash.utils.ByteArray;
    import flash.display.MovieClip;
    import __AS3__.vec.*;

    public class $Res 
    {

        private static var Ressources_Class:Class = $Res_Ressources_Class;
        public static var Ressources:Object;
        private static const ListeBibliotheque:Vector.<ApplicationDomain> = new Vector.<ApplicationDomain>();
        private static var NombreBibliotheque:int = 0;
        public static var FonctionErreur:Function;


        public static function New_Ressources_Class():ByteArray
        {
            return (new Ressources_Class() as ByteArray);
        }

        public static function Ajouter_Bibliotheque(_arg_1:ApplicationDomain):void
        {
            ListeBibliotheque.push(_arg_1);
            NombreBibliotheque = ListeBibliotheque.length;
        }

        public static function Classe(_arg_1:String):Class
        {
            var _local_3:ApplicationDomain;
            var _local_2:int = -1;
            while (++_local_2 < NombreBibliotheque)
            {
                _local_3 = ListeBibliotheque[_local_2];
                if (_local_3.hasDefinition(_arg_1))
                {
                    return (_local_3.getDefinition(_arg_1) as Class);
                };
            };
            return (null);
        }

        public static function Pouf(RESSOURCE:String, MUET:Boolean=false):MovieClip
        {
            var i:int;
            var bibliotheque:ApplicationDomain;
            try
            {
                i = -1;
                while (++i < NombreBibliotheque)
                {
                    bibliotheque = ListeBibliotheque[i];
                    if (bibliotheque.hasDefinition(RESSOURCE))
                    {
                        return (new ((bibliotheque.getDefinition(RESSOURCE) as Class))());
                    };
                };
                return (null);
            }
            catch(E:Error)
            {
                if (((!(MUET)) && (!(FonctionErreur == null))))
                {
                    FonctionErreur(RESSOURCE);
                };
                return (null);
            };
            return (null);
        }


    }
}//package ressources

//------------------------------------------------------------
//ressources.$Res_Ressources_Class

package ressources
{
    import mx.core.ByteArrayAsset;

    public class $Res_Ressources_Class extends ByteArrayAsset 
    {


    }
}//package ressources

//------------------------------------------------------------
//textes.$T

package textes
{
    public class $T 
    {

        public static const FR$Nom_Jeu:String = "Transformice";
        public static const EN$Nom_Jeu:String = "Transformice";
        public static const BR$Nom_Jeu:String = "Transformice";
        public static const RU$Nom_Jeu:String = "Transformice";
        public static const FR$Avatar:String = "Avatar";
        public static const EN$Avatar:String = "Avatar";
        public static const BR$Avatar:String = "Imagem";
        public static const RU$Avatar:String = "Avatar";
        public static const FR$Forum:String = "Forum (utilisez votre login Transformice)";
        public static const EN$Forum:String = "Forum (use your Transformice login)";
        public static const BR$Forum:String = "Forum (Utilize o seu login Transformice)";
        public static const RU$Forum:String = "Форум (Используйте ваши Transformice Войти)";
        public static const FR$SelectionAvatar:String = "Selectionner un avatar";
        public static const EN$SelectionAvatar:String = "Select an avatar";
        public static const BR$SelectionAvatar:String = "Selecione uma imagem";
        public static const RU$SelectionAvatar:String = "Выберите изображения";
        public static const FR$Valider:String = "Valider";
        public static const EN$Valider:String = "Submit";
        public static const BR$Valider:String = "Enviar";
        public static const RU$Valider:String = "Отправить";
        public static const FR$Annuler:String = "Annuler";
        public static const EN$Annuler:String = "Cancel";
        public static const BR$Annuler:String = "Cancelar";
        public static const RU$Annuler:String = "Отменить";
        public static const FR$Supprimer:String = "Supprimer";
        public static const EN$Supprimer:String = "Delete";
        public static const BR$Supprimer:String = "Excluir";
        public static const RU$Supprimer:String = "Удалить";
        public static const FR$EnvoyerMP:String = "Message privé";
        public static const EN$EnvoyerMP:String = "Private message";
        public static const BR$EnvoyerMP:String = "Mensagem privada";
        public static const RU$EnvoyerMP:String = "Личное сообщение";
        public static const FR$Aide:String = "Aide";
        public static const EN$Aide:String = "Help/Rules";
        public static const BR$Aide:String = "Ajuda/Regras";
        public static const RU$Aide:String = "Помощь";
        public static const FR$Fermer:String = "Fermer cette fenêtre";
        public static const EN$Fermer:String = "Close";
        public static const BR$Fermer:String = "Fechar";
        public static const RU$Fermer:String = "Закрыть";
        public static const FR$Intructions:String = "Instructions";
        public static const EN$Intructions:String = "Instructions";
        public static const BR$Intructions:String = "Instruções";
        public static const RU$Intructions:String = "Instructions";
        public static const FR$AvatarErreur1:String = "Vous ne pouvez utiliser que des images JPG ou JPEG.";
        public static const EN$AvatarErreur1:String = "You can only use JPG or JPEG images.";
        public static const BR$AvatarErreur1:String = "Você só pode usar JPG ou JPEG.";
        public static const RU$AvatarErreur1:String = "Вы можете использовать только JPG или JPEG изображений.";
        public static const FR$AvatarErreur2:String = "Cette image est invalide, son poids est de %1 ko alors qu'il ne devrait pas dépasser 5 ko.";
        public static const EN$AvatarErreur2:String = "This image is invalid, its weight is %1 kb so it should not exceed 5 kb.";
        public static const BR$AvatarErreur2:String = "Esta imagem é inválido, seu peso é %1 kb por isso não deve exceder 5 kb.";
        public static const RU$AvatarErreur2:String = "Это изображение является недействительным, его вес составляет %1 Кб поэтому оно не должно превышать 5 кб.";
        public static const FR$InfoAvatar:String = "<V>Pour être valide votre avatar doit :\n<N>- être de format jpg ou jpeg.\n- faire moins de 5 ko.\n- faire exactement 40 pixels de large et de hauteur.";
        public static const EN$InfoAvatar:String = "<V>To validate your avatar, it must :\n<N>- Be either jpg or jpeg.\n- be less than 5kb.\n- exactly 40px width and height.";
        public static const FR$FermerCourt:String = "Fermer";
        public static const EN$FermerCourt:String = "Close";
        public static const BR$FermerCourt:String = "Fechar";
        public static const RU$FermerCourt:String = "Закрыть";
        public static const FR$Menu:String = "Menu";
        public static const EN$Menu:String = "Menu";
        public static const BR$Menu:String = "Menu";
        public static const RU$Menu:String = "Меню";
        public static const FR$Mot_Souris:String = "Souris";
        public static const EN$Mot_Souris:String = "Mouse";
        public static const BR$Mot_Souris:String = "Rato";
        public static const RU$Mot_Souris:String = "Мышь";
        public static const FR$TitreVote:String = "Aimez vous cette carte ?";
        public static const EN$TitreVote:String = "Do you like this map?";
        public static const BR$TitreVote:String = "Você gostou deste mapa?";
        public static const RU$TitreVote:String = "Вам понравилась эта карта?";
        public static const FR$Oui:String = "Oui";
        public static const EN$Oui:String = "Yes";
        public static const BR$Oui:String = "Sim";
        public static const RU$Oui:String = "Да";
        public static const FR$Non:String = "Non";
        public static const EN$Non:String = "No";
        public static const BR$Non:String = "Não";
        public static const RU$Non:String = "Нет";
        public static const FR$PasVoter:String = "Ne pas voter";
        public static const EN$PasVoter:String = "Dont vote";
        public static const BR$PasVoter:String = "Não votar";
        public static const RU$PasVoter:String = "Не голосовать";
        public static const FR$StatVote:String = "Auteur : <V>%1\n<N>Nombre de votes : <BL>%2\n<N>Note actuelle : <BL>%3";
        public static const EN$StatVote:String = "Author : <V>%1\n<N>Votes : <BL>%2\n<N>Current rating : <BL>%3";
        public static const BR$StatVote:String = "Autor: <V>%1\n<N>Votos: <BL>%2\n<N>Avaliação atual: <BL>%3";
        public static const RU$StatVote:String = "Автор : <V>%1\n<N>Голосов : <BL>%2\n<N>Текущий рейтинг: <BL>%3";
        public static const FR$InfoVote:String = "(Les cartes ayant une note inférieure à 50% sont supprimées automatiquement)";
        public static const EN$InfoVote:String = "(The maps with a rate below 50% are deleted automatically)";
        public static const BR$InfoVote:String = "(Os mapas com avaliação inferior a 50% serão automaticamente excluídos)";
        public static const RU$InfoVote:String = "(Карты с рейтингом ниже 50% будут автоматически удалены.)";
        public static const FR$InfoExp:String = "Voici le code de votre carte.\nIl vous servira à modifier votre carte ultérieurement, ne le perdez pas !";
        public static const EN$InfoExp:String = "Here is the code of your map. It is used to edit your map later, do not lose it !";
        public static const BR$InfoExp:String = "Este é o código do seu mapa, que será usado para editá-lo depois. Não o perca !";
        public static const RU$InfoExp:String = "Вот код Вашей карты. Его можно использовать, чтобы подправить Вашу карту в дальнейшем, не потеряйте его!";
        public static const FR$Exp:String = "Exportation terminée !";
        public static const EN$Exp:String = "Map saved !";
        public static const BR$Exp:String = "Mapa salvo !";
        public static const RU$Exp:String = "Карта сохранена.";
        public static const FR$CompteForumPret:String = "<J><font size='12'>Vous pouvez maintenant vous rendre sur le forum de Transformice : <a href='http://forum.transformice.com' target='_blank'><u>http://forum.transformice.com</u></a></font>";
        public static const EN$CompteForumPret:String = "<J><font size='12'>You can now access to the Transformice forums : <a href='http://forum.transformice.com' target='_blank'><u>http://forum.transformice.com</u></a></font>";
        public static const BR$CompteForumPret:String = "<J><font size='12'>Agora você pode acessar o fórum do Transformice: <a href='http://forum.transformice.com' target='_blank'><u>http://forum.transformice.com</u></a></font>";
        public static const RU$CompteForumPret:String = "<J><font size='12'>Вы можете посетить форумы Transformice : <a href='http://forum.transformice.com' target='_blank'><u>http://forum.transformice.com</u></a></font>";
        public static const FR$Editeur:String = "Editeur de carte";
        public static const EN$Editeur:String = "Map editor";
        public static const BR$Editeur:String = "Editor de mapas";
        public static const RU$Editeur:String = "Редактор карт";
        public static const FR$E_OUF:String = "Votre carte a été sauvegardée ci-dessous.";
        public static const EN$E_OUF:String = "Your map has been stored below.";
        public static const BR$E_OUF:String = "O seu mapa foi armazenado no código abaixo.";
        public static const RU$E_OUF:String = "Ваша карта сохранена, код ниже.";
        public static const FR$Selection:String = "Sélection";
        public static const EN$Selection:String = "Selector";
        public static const BR$Selection:String = "Selecionar";
        public static const RU$Selection:String = "Выбрать объект";
        public static const FR$Sol:String = "Sols";
        public static const EN$Sol:String = "Grounds";
        public static const BR$Sol:String = "Pisos";
        public static const RU$Sol:String = "Поверхности";
        public static const FR$E_SolClassique:String = "Sol normal";
        public static const EN$E_SolClassique:String = "Normal ground";
        public static const BR$E_SolClassique:String = "Piso normal";
        public static const RU$E_SolClassique:String = "Обычная поверхность";
        public static const FR$E_SolGlace:String = "Sol de glace";
        public static const EN$E_SolGlace:String = "Ice ground";
        public static const BR$E_SolGlace:String = "Gelo";
        public static const RU$E_SolGlace:String = "Лёд";
        public static const FR$E_SolTramp:String = "Sol trampoline";
        public static const EN$E_SolTramp:String = "Trampoline ground";
        public static const BR$E_SolTramp:String = "Trampolim";
        public static const RU$E_SolTramp:String = "Трамплин";
        public static const FR$E_SolLave:String = "Sol de Lave";
        public static const EN$E_SolLave:String = "Lava ground";
        public static const BR$E_SolLave:String = "Lava";
        public static const RU$E_SolLave:String = "Лава";
        public static const FR$E_SolDur:String = "Sol chocolat";
        public static const EN$E_SolDur:String = "Chocolate ground";
        public static const BR$E_SolDur:String = "Piso de chocolate";
        public static const RU$E_SolDur:String = "Шоколад";
        public static const FR$E_ObjetSouris:String = "Objets pour souris";
        public static const EN$E_ObjetSouris:String = "Mice stuff";
        public static const BR$E_ObjetSouris:String = "Objetos do mapa";
        public static const RU$E_ObjetSouris:String = "Мышиные вещи";
        public static const FR$E_OS_Trou:String = "Trou de souris";
        public static const EN$E_OS_Trou:String = "Mouse hole";
        public static const BR$E_OS_Trou:String = "Toca";
        public static const RU$E_OS_Trou:String = "Нора";
        public static const FR$E_OS_Fromage:String = "Fromage";
        public static const EN$E_OS_Fromage:String = "Cheese";
        public static const BR$E_OS_Fromage:String = "Queijos";
        public static const RU$E_OS_Fromage:String = "Сыр";
        public static const FR$E_OS_SpawnS:String = "Départ souris";
        public static const EN$E_OS_SpawnS:String = "Mice spawn";
        public static const BR$E_OS_SpawnS:String = "Ratos (origem)";
        public static const RU$E_OS_SpawnS:String = "Место появления мышей";
        public static const FR$E_OS_SpawnC:String = "Départ chamane";
        public static const EN$E_OS_SpawnC:String = "Shaman spawn";
        public static const BR$E_OS_SpawnC:String = "PoShaman (origem)";
        public static const RU$E_OS_SpawnC:String = "Место появления шамана";
        public static const FR$E_Validation:String = "Sauver / Charger / Tester";
        public static const EN$E_Validation:String = "Save / Load / Test";
        public static const BR$E_Validation:String = "Salvar/ Carregar / Testar";
        public static const RU$E_Validation:String = "Управление картой";
        public static const FR$E_TesterCarte:String = "Valider cette carte";
        public static const EN$E_TesterCarte:String = "Validate this map";
        public static const BR$E_TesterCarte:String = "Validar este mapa";
        public static const RU$E_TesterCarte:String = "Проверка карты";
        public static const FR$E_CarteValide:String = "Cette carte a été validée. Vous pouvez maintenant retourner sur l'éditeur pour exporter votre carte sur le serveur.";
        public static const EN$E_CarteValide:String = "This map has been validated. You can now return to the editor to export your map to the server.";
        public static const BR$E_CarteValide:String = "Este mapa foi validado. Agora você pode voltar ao editor para exportá-lo para o servidor.";
        public static const RU$E_CarteValide:String = "Карта была проверена. Теперь Вы можете вернуться в редактор и отправить ее на сервер.";
        public static const FR$E_CarteInvalide:String = "Cette carte doit être validée.";
        public static const EN$E_CarteInvalide:String = "This map must be validated.";
        public static const BR$E_CarteInvalide:String = "Este mapa precisa ser validado.";
        public static const RU$E_CarteInvalide:String = "Карта должна быть проверена.";
        public static const FR$E_Retour:String = "Retour éditeur";
        public static const EN$E_Retour:String = "Back to editor";
        public static const BR$E_Retour:String = "Voltar ao editor";
        public static const RU$E_Retour:String = "Вернуться в редактор";
        public static const FR$E_Reset:String = "Reset";
        public static const EN$E_Reset:String = "Reset";
        public static const BR$E_Reset:String = "Reset";
        public static const RU$E_Reset:String = "Сброс";
        public static const FR$E_Quitter:String = "Quitter";
        public static const EN$E_Quitter:String = "Exit";
        public static const BR$E_Quitter:String = "Sair";
        public static const RU$E_Quitter:String = "Выход";
        public static const FR$E_SolDynamique:String = "Sol dynamique";
        public static const EN$E_SolDynamique:String = "Dynamic ground";
        public static const BR$E_SolDynamique:String = "Piso dinâmico";
        public static const RU$E_SolDynamique:String = "Подвижная поверхность";
        public static const FR$E_Masse:String = "Masse (0=auto)";
        public static const EN$E_Masse:String = "Mass (0=auto)";
        public static const BR$E_Masse:String = "Massa (0=auto)";
        public static const RU$E_Masse:String = "Масса (0=по умолчанию)";
        public static const FR$E_Friction:String = "Frottement";
        public static const EN$E_Friction:String = "Friction";
        public static const BR$E_Friction:String = "Fricção";
        public static const RU$E_Friction:String = "Трение";
        public static const FR$E_Restitution:String = "Restitution";
        public static const EN$E_Restitution:String = "Restitution";
        public static const BR$E_Restitution:String = "Restituição";
        public static const RU$E_Restitution:String = "Прыгучесть";
        public static const FR$E_Angle:String = "Angle";
        public static const EN$E_Angle:String = "Rotation";
        public static const BR$E_Angle:String = "Ângulo";
        public static const RU$E_Angle:String = "Угол поворота";
        public static const FR$E_AngleFixe:String = "Angle fixe (1=oui)";
        public static const EN$E_AngleFixe:String = "Fixed rotation (1=oui)";
        public static const BR$E_AngleFixe:String = "Ângulo fixo (1=sim) ";
        public static const RU$E_AngleFixe:String = "Фиксированый угол (1=да)";
        public static const FR$E_A_Linéaire:String = "Amortissement linéaire";
        public static const EN$E_A_Linéaire:String = "Linear damping";
        public static const BR$E_A_Linéaire:String = "Amortecimento linear";
        public static const RU$E_A_Linéaire:String = "Линейная амортизация";
        public static const FR$E_A_Angulaire:String = "Amortissement angulaire";
        public static const EN$E_A_Angulaire:String = "Angular damping";
        public static const BR$E_A_Angulaire:String = "Amortecimento angular";
        public static const RU$E_A_Angulaire:String = "Угловая амортизация";
        public static const FR$E_CopierCarte:String = "Copier la carte dans le presse-papier";
        public static const EN$E_CopierCarte:String = "Copy map to clipboard";
        public static const BR$E_CopierCarte:String = "Copiar o mapa para a área de transferência";
        public static const RU$E_CopierCarte:String = "Копировать карту в буфер обмена";
        public static const FR$E_ObjetsChamane:String = "Objets chamane";
        public static const EN$E_ObjetsChamane:String = "Shaman objects";
        public static const BR$E_ObjetsChamane:String = "Itens do shaman";
        public static const RU$E_ObjetsChamane:String = "Вещи шамана";
        public static const FR$E_ExporterCarte:String = "Exporter la carte (40 fromages)";
        public static const EN$E_ExporterCarte:String = "Export the map (40 cheese)";
        public static const BR$E_ExporterCarte:String = "Exportar o mapa (40 queijos)";
        public static const RU$E_ExporterCarte:String = "Отправить карту на сервер (40 сыра)";
        public static const FR$E_InfoSauver:String = 'Entrez un code ci-dessous pour charger une carte.\n("@1234" ou "&lt;C&gt;&lt;P /&gt;&lt;...")';
        public static const EN$E_InfoSauver:String = 'Enter code below to load a map.\n("@1234" or "&lt;C&gt;&lt;P /&gt;&lt;...")';
        public static const BR$E_InfoSauver:String = 'Digite o código abaixo para carregar um mapa.\n("@1234" ou "&lt;C&gt;&lt;P /&gt;&lt;...")';
        public static const RU$E_InfoSauver:String = 'Введите код ниже, чтобы загрузить карту.\n("@1234" или "&lt;C&gt;&lt;P /&gt;&lt;...")';
        public static const FR$E_Charger:String = "Charger";
        public static const EN$E_Charger:String = "Load";
        public static const BR$E_Charger:String = "Carregar";
        public static const RU$E_Charger:String = "Загрузить";
        public static const FR$E_ErreurChargement:String = "<R>Cette carte n'existe pas, ou n'existe plus.";
        public static const EN$E_ErreurChargement:String = "<R>This map does not exist or no longer exists.";
        public static const BR$E_ErreurChargement:String = "<R>Este mapa não existe, ou não existe mais.";
        public static const RU$E_ErreurChargement:String = "<R>Эта карта не существует или удалена.";
        public static const FR$E_ErreurFormatage:String = "<R>Cette carte est invalide.";
        public static const EN$E_ErreurFormatage:String = "<R>This map is invalid.";
        public static const BR$E_ErreurFormatage:String = "<R>Este mapa é inválido.";
        public static const RU$E_ErreurFormatage:String = "<R>Карта неверна.";
        public static const FR$E_ErreurPerma:String = "<R>Cette carte est validé, elle ne peut plus être modifiée.";
        public static const EN$E_ErreurPerma:String = "<R>This map is validated, it can not be changed.";
        public static const BR$E_ErreurPerma:String = "<R>Este mapa está validado e não pode ser alterado. ";
        public static const RU$E_ErreurPerma:String = "<R>Карта уже проверена, теперь её не изменить.";
        public static const FR$E_TexteEdition:String = "Auteur : <V>%1<N> - Nombre de votes : <BL>%2<N> - Note actuelle : <BL>%3";
        public static const EN$E_TexteEdition:String = "Autor : <V>%1<N> - Votes : <BL>%2<N> - Current rating : <BL>%3";
        public static const BR$E_TexteEdition:String = "Autor: <V>%1<N> - Votos: <BL>%2<N> - Avaliação atual: <BL>%3";
        public static const RU$E_TexteEdition:String = "Автор : <V>%1<N> - Голосов : <BL>%2<N> - Текущий рейтинг : <BL>%3";
        public static const FR$E_Limite:String = "Sols : <V>%1 <N>- Objets : <V>%2";
        public static const EN$E_Limite:String = "Grounds : <V>%1 <N>- Objects : <V>%2";
        public static const BR$E_Limite:String = "Pisos: <V>%1 <N>- Objetos : <V>%2";
        public static const RU$E_Limite:String = "Поверхностей : <V>%1 <N>- Объектов : <V>%2";
        public static const FR$E_PasAssezFromage:String = "<ROSE>Exporter une carte coûte 20 fromages. Vous n'en avez pas assez.";
        public static const EN$E_PasAssezFromage:String = "<ROSE>Export a map costs 20 cheese. You do not have enough.";
        public static const BR$E_PasAssezFromage:String = "<ROSE>Exportar um mapa custa 20 queijos. Você não tem o suficiente.";
        public static const RU$E_PasAssezFromage:String = "<ROSE>Отправка карты на сервер стоит 20 сыра. У Вас его недостаточно.";
        public static const FR$E_PasAssezFromage2:String = "<ROSE>Vous devez avoir récupéré au moins 1000 fromages au total pour pouvoir exporter une map.";
        public static const EN$E_PasAssezFromage2:String = "<ROSE>You need to get at least 1000 cheeses in order to be able to export a map.";
        public static const FR$E_ObjetFantome:String = "Objet fantôme";
        public static const EN$E_ObjetFantome:String = "Ghost object";
        public static const BR$E_ObjetFantome:String = "Objeto fantasma";
        public static const RU$E_ObjetFantome:String = "Проницаемый для мышей объект";
        public static const FR$E_Param:String = "Paramètres de carte";
        public static const EN$E_Param:String = "Map settings";
        public static const BR$E_Param:String = "Configurações do mapa";
        public static const RU$E_Param:String = "Настройки карты";
        public static const FR$E_Gravité:String = "Gravité";
        public static const EN$E_Gravité:String = "Gravity";
        public static const BR$E_Gravité:String = "Gravidade";
        public static const RU$E_Gravité:String = "Гравитация";
        public static const FR$E_Vent:String = "Vent";
        public static const EN$E_Vent:String = "Wind";
        public static const BR$E_Vent:String = "Vento";
        public static const RU$E_Vent:String = "Ветер";
        public static const FR$E_Nuit:String = "Nuit";
        public static const EN$E_Nuit:String = "Night";
        public static const BR$E_Nuit:String = "Noite";
        public static const RU$E_Nuit:String = "Ночь";
        public static const FR$E_Collision:String = "Collision";
        public static const EN$E_Collision:String = "Collision";
        public static const BR$E_Collision:String = "Colisão";
        public static const RU$E_Collision:String = "Столкновения мышей";
        public static const FR$E_Ame:String = "Âme soeur";
        public static const EN$E_Ame:String = "Soul mate";
        public static const BR$E_Ame:String = "Alma gêmea";
        public static const RU$E_Ame:String = "Игра с напарником";
        public static const FR$Carte_Perma:String = "Cette carte est maintenant permanente.";
        public static const EN$Carte_Perma:String = "This map is now permanent.";
        public static const BR$Carte_Perma:String = "Este mapa agora é permanente.";
        public static const RU$Carte_Perma:String = "Теперь карта постоянна.";
        public static const FR$Connexion_Serveur:String = "\n\nTentative de connexion avec le serveur...";
        public static const EN$Connexion_Serveur:String = "\n\nTrying to connect to the server...";
        public static const BR$Connexion_Serveur:String = "\n\nTentando conectar-se ao servidor...";
        public static const RU$Connexion_Serveur:String = "\n\nПытаюсь подключиться к серверу...";
        public static const FR$AFK:String = "\n\nVous êtes afk depuis trop longtemps :'(";
        public static const EN$AFK:String = "\n\nYou are AFK for too long :'(";
        public static const BR$AFK:String = "\n\nVocê ficou ausente por muito tempo :'(";
        public static const RU$AFK:String = "\n\nВы слишком долго бездействовали :'(";
        public static const FR$Connexion_Impossible:String = "\n\nImpossible d'établir une connexion avec le serveur :'(";
        public static const EN$Connexion_Impossible:String = "\n\nUnable to connect to the server :'(";
        public static const BR$Connexion_Impossible:String = "\n\nNão foi possível conectar-se ao servidor :'(";
        public static const RU$Connexion_Impossible:String = "\n\nНе могу подключиться к серверу :'(";
        public static const FR$Connexion_Interrompue:String = "\n\nLa connexion avec le serveur vient d'être interrompue :'(";
        public static const EN$Connexion_Interrompue:String = "\n\nThe connection to the server has been interrupted :'(";
        public static const BR$Connexion_Interrompue:String = "\n\nA conexão com o servidor foi interrompida :'(";
        public static const RU$Connexion_Interrompue:String = "\n\nСоединение с сервером было прервано :'(";
        public static const FR$Version_Incorrecte:String = "\n\nVotre version du jeu est incorrecte :'(";
        public static const EN$Version_Incorrecte:String = "\n\nYour game version is incorrect :'(";
        public static const BR$Version_Incorrecte:String = "\n\nA versão do seu jogo é incorreta :'(";
        public static const RU$Version_Incorrecte:String = "\n\nНеверная версия игры :'(";
        public static const FR$Chargement_En_Cours:String = "\nChargement en cours.";
        public static const EN$Chargement_En_Cours:String = "\nLoading.";
        public static const BR$Chargement_En_Cours:String = "\nCarregando.";
        public static const RU$Chargement_En_Cours:String = "\nЗагрузка.";
        public static const FR$Chargement_1:String = "\nChargement.";
        public static const EN$Chargement_1:String = "\nLoading.";
        public static const BR$Chargement_1:String = "\nCarregando.";
        public static const FR$Chargement_2:String = "\nChargement..";
        public static const EN$Chargement_2:String = "\nLoading..";
        public static const BR$Chargement_2:String = "\nCarregando..";
        public static const RU$Chargement_2:String = "\nЗагрузка..";
        public static const FR$Version_Chargeur_OLD:String = "\n\nCette version est incorrecte, vous devez télécharger une nouvelle version exécutable ou vider le cache de votre navigateur.";
        public static const EN$Version_Chargeur_OLD:String = "\n\nThis version is incorrect, you must empty the cache of your browser.";
        public static const BR$Version_Chargeur_OLD:String = "\n\nEsta versão é incorreta, você deve limpar o cache do seu navegador.";
        public static const RU$Version_Chargeur_OLD:String = "\n\nВерсия игры неверна, очистите кэш браузера.";
        public static const FR$Version_Chargeur:String = "\nChargement..";
        public static const EN$Version_Chargeur:String = "\nLoading..";
        public static const BR$Version_Chargeur:String = "\nCarregando..";
        public static const RU$Version_Chargeur:String = "\nЗагрузка..";
        public static const FR$Pseudo:String = "Pseudo";
        public static const EN$Pseudo:String = "Nickname";
        public static const BR$Pseudo:String = "Apelido";
        public static const RU$Pseudo:String = "Никнейм";
        public static const FR$Mot_De_Passe:String = "Mot de passe";
        public static const EN$Mot_De_Passe:String = "Password";
        public static const BR$Mot_De_Passe:String = "Senha";
        public static const RU$Mot_De_Passe:String = "Пароль";
        public static const FR$Confirmation:String = "Confirmation";
        public static const EN$Confirmation:String = "Confirmation";
        public static const BR$Confirmation:String = "Confirmação";
        public static const RU$Confirmation:String = "Подтверждение";
        public static const FR$Version:String = "Version %1";
        public static const EN$Version:String = "Version %1";
        public static const BR$Version:String = "Versão %1";
        public static const RU$Version:String = "Версия %1";
        public static const FR$Nombre_Joueur:String = "Joueurs : %1";
        public static const EN$Nombre_Joueur:String = "Players : %1";
        public static const BR$Nombre_Joueur:String = "Jogadores: %1";
        public static const RU$Nombre_Joueur:String = "Игроков : %1";
        public static const FR$Identification:String = "S'identifier";
        public static const EN$Identification:String = "Login";
        public static const BR$Identification:String = "Login";
        public static const RU$Identification:String = "Логин";
        public static const FR$Créer_Un_Compte:String = "Créer un compte";
        public static const EN$Créer_Un_Compte:String = "Create account";
        public static const BR$Créer_Un_Compte:String = "Criar uma conta";
        public static const RU$Créer_Un_Compte:String = "Создать профиль";
        public static const FR$Salon_Cible:String = "Salon : %1";
        public static const EN$Salon_Cible:String = "Room : %1";
        public static const BR$Salon_Cible:String = "Sala : %1";
        public static const RU$Salon_Cible:String = "Комната : %1";
        public static const FR$Pseudo_3caract:String = "Votre pseudo doit contenir au moins 3 caractères.";
        public static const EN$Pseudo_3caract:String = "Your nickname must contain at least 3 characters.";
        public static const BR$Pseudo_3caract:String = "Seu apelido precisa ter no mínimo 3 caracteres.";
        public static const RU$Pseudo_3caract:String = "Ваш ник должен содержать как минимум 3 символа.";
        public static const FR$MDP_Identique:String = "Vos deux mots de passe doivent être identiques.";
        public static const EN$MDP_Identique:String = "Both your passwords must be identical.";
        public static const BR$MDP_Identique:String = "As duas senhas devem ser idênticas.";
        public static const RU$MDP_Identique:String = "Оба пароля должны быть одинаковыми.";
        public static const FR$MDP_8caract:String = "Votre mot de passe doit contenir au moins 8 caractères.";
        public static const EN$MDP_8caract:String = "Your password must contain at least 8 characters.";
        public static const BR$MDP_8caract:String = "Sua senha precisa ter no mínimo 8 caracteres.";
        public static const RU$MDP_8caract:String = "Длина пароля должна быть как минимум 8 символов.";
        public static const FR$MDP_Dif_Pseudo:String = "Votre mot de passe ne doit pas être identique à votre pseudo.";
        public static const EN$MDP_Dif_Pseudo:String = "Your password must not be identical to your nickname.";
        public static const BR$MDP_Dif_Pseudo:String = "Sua senha não pode ser igual ao seu apelido.";
        public static const RU$MDP_Dif_Pseudo:String = "Ваш пароль НЕ должен быть идентичным Вашему никнейму.";
        public static const FR$MDP_Contient_Pseudo:String = "Votre mot de passe ne doit pas contenir votre pseudo.";
        public static const EN$MDP_Contient_Pseudo:String = "Your password must not contain your nickname.";
        public static const BR$MDP_Contient_Pseudo:String = "Sua senha não deve conter o seu apelido.";
        public static const RU$MDP_Contient_Pseudo:String = "Ваш пароль НЕ должен содержать в себе Ваш никнейм.";
        public static const FR$Intro_Création_Compte:String = "En créant un compte, vous pourrez accéder à toutes les fonctionnalités du jeu. Comme faire progresser votre souris, débloquer des objets, utiliser le chat, etc ^_^";
        public static const EN$Intro_Création_Compte:String = "By creating an account, you can access all the features of the game, like progressing your mouse, unlock items, use chat, etc ^_^";
        public static const BR$Intro_Création_Compte:String = "Ao criar uma conta, você poderá acessar todos os recursos do jogo,  como desbloquear títulos, acumular queijo, vestir seu rato, utilizar o  bate-papo, etc ^_^";
        public static const RU$Intro_Création_Compte:String = "Создавая профиль, Вы открываете доступ ко всем возможностям игры, например: учет статистики, покупка вещей, использование чата и т.д. ^_^";
        public static const FR$Pseudo_Utilisé:String = "Ce pseudo est déjà utilisé, choisissez en un autre.";
        public static const EN$Pseudo_Utilisé:String = "This nickname is already taken, choose another.";
        public static const BR$Pseudo_Utilisé:String = "Este apelido já está em uso, escolha outro.";
        public static const RU$Pseudo_Utilisé:String = "Никнейм уже занят, придумайте другой.";
        public static const FR$Invalide:String = "*Invalide*";
        public static const EN$Invalide:String = "*Invalid*";
        public static const BR$Invalide:String = "*Inválido*";
        public static const RU$Invalide:String = "*Неверно*";
        public static const FR$Déjà_Connecté:String = "Déjà connecté";
        public static const EN$Déjà_Connecté:String = "Already connected";
        public static const BR$Déjà_Connecté:String = "Já conectado";
        public static const RU$Déjà_Connecté:String = "Уже соединен";
        public static const FR$Partenaire:String = "<ROSE>%1 est maintenant votre âme soeur !";
        public static const EN$Partenaire:String = "<ROSE>%1 is now your soulmate !";
        public static const BR$Partenaire:String = "<ROSE>%1 é sua alma gêmea !";
        public static const RU$Partenaire:String = "<ROSE>%1 теперь Ваш напарник !";
        public static const FR$Monde:String = "Monde :";
        public static const EN$Monde:String = "Map :";
        public static const BR$Monde:String = "Mapa :";
        public static const RU$Monde:String = "Карта :";
        public static const FR$Temps_Restant:String = "Temps restant :";
        public static const EN$Temps_Restant:String = "Time left :";
        public static const BR$Temps_Restant:String = "Tempo restante :";
        public static const RU$Temps_Restant:String = "Осталось времени :";
        public static const FR$Souris:String = "Souris :";
        public static const EN$Souris:String = "Mice :";
        public static const BR$Souris:String = "Rato :";
        public static const RU$Souris:String = "Мышей: ";
        public static const FR$Chamane:String = "Chamane :";
        public static const EN$Chamane:String = "Shaman :";
        public static const BR$Chamane:String = "Shaman :";
        public static const RU$Chamane:String = "Шаман: ";
        public static const FR$Flèche:String = "Flèche indicative";
        public static const EN$Flèche:String = "Arrow";
        public static const BR$Flèche:String = "Seta";
        public static const RU$Flèche:String = "Стрелка";
        public static const FR$Petite_Caisse:String = "Petite caisse";
        public static const EN$Petite_Caisse:String = "Little box";
        public static const BR$Petite_Caisse:String = "Caixa pequena";
        public static const RU$Petite_Caisse:String = "Маленький ящик";
        public static const FR$Grosse_Caisse:String = "Grosse caisse";
        public static const EN$Grosse_Caisse:String = "Big box";
        public static const BR$Grosse_Caisse:String = "Caixa grande";
        public static const RU$Grosse_Caisse:String = "Большой ящик";
        public static const FR$Petite_Planche:String = "Petite planche";
        public static const EN$Petite_Planche:String = "Little board";
        public static const BR$Petite_Planche:String = "Tábua pequena";
        public static const RU$Petite_Planche:String = "Маленькая палка";
        public static const FR$Grande_Planche:String = "Grande planche";
        public static const EN$Grande_Planche:String = "Big board";
        public static const BR$Grande_Planche:String = "Tábua grande";
        public static const RU$Grande_Planche:String = "Большая палка";
        public static const FR$Balle:String = "Balle ^_^";
        public static const EN$Balle:String = "Ball ^_^";
        public static const BR$Balle:String = "Bola ^_^";
        public static const RU$Balle:String = "Шарик ^_^";
        public static const FR$Balle_Lourde:String = "Balle lourde";
        public static const EN$Balle_Lourde:String = "Heavy ball";
        public static const BR$Balle_Lourde:String = "Bola pesada";
        public static const RU$Balle_Lourde:String = "Тяжелый шар";
        public static const FR$Trampoline:String = "Trampoline";
        public static const EN$Trampoline:String = "Trampoline";
        public static const BR$Trampoline:String = "Trampolim";
        public static const RU$Trampoline:String = "Батут";
        public static const FR$Enclume:String = "Enclume";
        public static const EN$Enclume:String = "Anvil";
        public static const BR$Enclume:String = "Bigorna";
        public static const RU$Enclume:String = "Наковальня";
        public static const FR$Boulet:String = "Boulet";
        public static const EN$Boulet:String = "Cannon ball";
        public static const BR$Boulet:String = "Bola de canhão";
        public static const RU$Boulet:String = "Ядро";
        public static const FR$Esprit:String = "Esprit";
        public static const EN$Esprit:String = "Spirit";
        public static const BR$Esprit:String = "Espírito";
        public static const RU$Esprit:String = "Взрыв";
        public static const FR$Appât:String = "Appât";
        public static const EN$Appât:String = "Bait";
        public static const BR$Appât:String = "Isca";
        public static const RU$Appât:String = "Приманка";
        public static const FR$TP_0:String = "Téléporteur (entrée)";
        public static const EN$TP_0:String = "Warp (in)";
        public static const BR$TP_0:String = "Portal (entrada)";
        public static const RU$TP_0:String = "Портал (1)";
        public static const FR$TP_1:String = "Téléporteur (sortie)";
        public static const EN$TP_1:String = "Warp (out)";
        public static const BR$TP_1:String = "Portal (saída)";
        public static const RU$TP_1:String = "Портал (2)";
        public static const FR$Ballon:String = "Ballon";
        public static const EN$Ballon:String = "Balloon";
        public static const BR$Ballon:String = "Balão";
        public static const RU$Ballon:String = "Воздушный шар";
        public static const FR$Rune:String = "Rune";
        public static const EN$Rune:String = "Rune";
        public static const BR$Rune:String = "Runa";
        public static const RU$Rune:String = "Руна";
        public static const FR$OC_ClouRouge:String = "Clou rouge";
        public static const EN$OC_ClouRouge:String = "Red nail";
        public static const BR$OC_ClouRouge:String = "Prego vermelho";
        public static const RU$OC_ClouRouge:String = "Красная ось";
        public static const FR$OC_MoteurRouge1:String = "Moteur rouge (droite)";
        public static const EN$OC_MoteurRouge1:String = "Red motor (right)";
        public static const BR$OC_MoteurRouge1:String = "Motor vermelho (direita)";
        public static const RU$OC_MoteurRouge1:String = "Красный мотор (по часовой)";
        public static const FR$OC_MoteurRouge2:String = "Moteur rouge (gauche)";
        public static const EN$OC_MoteurRouge2:String = "Red motor (left)";
        public static const BR$OC_MoteurRouge2:String = "Motor vermelho (esquerda)";
        public static const RU$OC_MoteurRouge2:String = "Красный мотор (против часовой)";
        public static const FR$OC_ClouVert:String = "Clou vert";
        public static const EN$OC_ClouVert:String = "Green nail";
        public static const BR$OC_ClouVert:String = "Prego verde";
        public static const RU$OC_ClouVert:String = "Синяя ось ";
        public static const FR$OC_MoteurVert1:String = "Moteur vert (droite)";
        public static const EN$OC_MoteurVert1:String = "Green motor (right)";
        public static const BR$OC_MoteurVert1:String = "Motor verde (direita)";
        public static const RU$OC_MoteurVert1:String = "Синий мотор (по часовой)";
        public static const FR$OC_MoteurVert2:String = "Moteur vert (gauche)";
        public static const EN$OC_MoteurVert2:String = "Green motor (left)";
        public static const BR$OC_MoteurVert2:String = "Motor verde (esquerda)";
        public static const RU$OC_MoteurVert2:String = "Синий мотор (против часовой)";
        public static const FR$OC_ClouJaune:String = "Clou jaune";
        public static const EN$OC_ClouJaune:String = "Yellow nail";
        public static const BR$OC_ClouJaune:String = "Prego amarelo";
        public static const RU$OC_ClouJaune:String = "Желтая ось";
        public static const FR$OC_Concentration:String = "Conjuration";
        public static const EN$OC_Concentration:String = "Conjuration";
        public static const BR$OC_Concentration:String = "Conjuração";
        public static const RU$OC_Concentration:String = "Волшебный грунт";
        public static const FR$Message_Voleuse:String = "%1 vient de voler le fromage ! ATTRAPEZ-LA !";
        public static const EN$Message_Voleuse:String = "%1 just stole the cheese! CATCH HER!";
        public static const BR$Message_Voleuse:String = "%1 roubou o queijo ! PEGUE-O !";
        public static const RU$Message_Voleuse:String = "%1 украла Ваш сыр ! ПОЙМАЙТЕ ЕЁ !";
        public static const FR$Message_Salon:String = "Vous venez d'entrer dans le salon [%1]. Tapez <V>/salon NomSalon<BL> pour créer ou rejoindre un salon.";
        public static const EN$Message_Salon:String = "You just entered room [%1]. Type <V>/room RoomName<BL> to create or join an existing room.";
        public static const BR$Message_Salon:String = "Você entrou na sala [%1]. Digite <V>/sala NomeDaSala<BL> para criar ou entrar numa sala já existente.";
        public static const RU$Message_Salon:String = "Вы вошли в комнату [%1]. Напечатайте <V>/room НазваниеКомнаты<BL> чтобы создать новую или присоединиться к существующей комнате.";
        public static const FR$Joueur_Existe_Pas:String = "Ce joueur n'existe pas.";
        public static const EN$Joueur_Existe_Pas:String = "This player does not exist.";
        public static const BR$Joueur_Existe_Pas:String = "Este jogador não existe.";
        public static const RU$Joueur_Existe_Pas:String = "Игрок не существует.";
        public static const FR$Nouveau_Titre:String = "Votre nouveau titre sera «%1» après la fin de cette partie.";
        public static const EN$Nouveau_Titre:String = "Your new title will be «%1» after the end of this turn.";
        public static const BR$Nouveau_Titre:String = "Seu novo título será «%1» depois do fim deste turno.";
        public static const RU$Nouveau_Titre:String = "Ваш новый титул «%1» будет применен в следующем раунде.";
        public static const FR$Gain_Titre:String = "<J>%1 vient de débloquer le titre «%2»";
        public static const EN$Gain_Titre:String = "<J>%1 had just unlocked the «%2» title.";
        public static const BR$Gain_Titre:String = "<J>%1 Desbloqueou o título «%2»";
        public static const RU$Gain_Titre:String = "<J>%1 только что открыл титул «%2»";
        public static const FR$Info_Titre:String = "<ROSE>Tapez /titre pour choisir un titre.";
        public static const EN$Info_Titre:String = "<ROSE>Type /title to choose a title.";
        public static const BR$Info_Titre:String = "<ROSE>Digite /title para escolher um título.";
        public static const RU$Info_Titre:String = "<ROSE>Напечатайте /title чтобы выбрать титул.";
        public static const FR$Info_Fin_Chamane:String = "<J>Vous devez sauver toutes vos souris avant de pouvoir rentrer.";
        public static const EN$Info_Fin_Chamane:String = "<J>You must save all the remaining mice before you can enter the hole.";
        public static const BR$Info_Fin_Chamane:String = "<J>Você deve salvar todos os ratos restantes antes de entrar na toca.";
        public static const RU$Info_Fin_Chamane:String = "<J>Вы должны спасти всех оставшихся мышей, чтобы войти в нору.";
        public static const FR$Info_Mute:String = "<J>Vous ne recevrez plus les messages de [%1].";
        public static const EN$Info_Mute:String = "<J>You will no longer receive messages from [%1].";
        public static const BR$Info_Mute:String = "<J>Você não receberá mais mensagens de [%1].";
        public static const RU$Info_Mute:String = "<J>Вы больше не получите сообщений от [%1].";
        public static const FR$Info_Fromage_Chamane:String = "Grâce à <V>%1<BL> nous avons récupéré %2 morceau(x) de fromage !";
        public static const EN$Info_Fromage_Chamane:String = "Thanks to <V>%1<BL>, we gathered %2 cheese !";
        public static const BR$Info_Fromage_Chamane:String = "Graças a <V>%1<BL>, recuperamos %2 queijos !";
        public static const RU$Info_Fromage_Chamane:String = "Благодаря <V>%1<BL>,мы собрали %2 сыра !";
        public static const FR$Demande_Ban:String = "Votre demande a été prise en compte.";
        public static const EN$Demande_Ban:String = "Your demand has been taken in consideration.";
        public static const BR$Demande_Ban:String = "Seu pedido foi levado em consideração.";
        public static const RU$Demande_Ban:String = "Ваша жалоба принята во внимание.";
        public static const FR$Pas_De_Fromage:String = "Pas de fromage pour vous ! ^_^";
        public static const EN$Pas_De_Fromage:String = "No cheese for you! ^_^";
        public static const BR$Pas_De_Fromage:String = "Sem queijo para você ! ^_^";
        public static const RU$Pas_De_Fromage:String = "Ты остался без сыра! ^_^";
        public static const FR$Fromaaaage:String = "Fromaaaage *-*";
        public static const EN$Fromaaaage:String = "Cheeeeeese *-*";
        public static const BR$Fromaaaage:String = "Queeeeeijo *-*";
        public static const RU$Fromaaaage:String = "Сыыыыыыр *-*";
        public static const FR$Joueur_Chamane:String = "<J>Vous êtes la chamane ! Aidez vos adeptes à récupérer du fromage !";
        public static const EN$Joueur_Chamane:String = "<J>You're the shaman! Help your disciples to get the cheese!";
        public static const BR$Joueur_Chamane:String = "<J>Você é o shaman ! Ajude seus discípulos a pegarem o queijo !";
        public static const RU$Joueur_Chamane:String = "<J>Вы шаман ! Помогите Вашим последователям взять сыр!";
        public static const FR$Nouvelle_Chamane:String = "<CH>%1<BL> est maintenant votre chamane, suivez la !";
        public static const EN$Nouvelle_Chamane:String = "<CH>%1<BL> is now your shaman, follow her!";
        public static const BR$Nouvelle_Chamane:String = "<CH>%1<BL> é seu shaman, siga-o !";
        public static const RU$Nouvelle_Chamane:String = "<CH>%1<BL> теперь Ваш шаман, следуйте за ним !";
        public static const FR$Doucement:String = "Doucement, merci.";
        public static const EN$Doucement:String = "Quiet, thank you.";
        public static const BR$Doucement:String = "Silêncio, obrigado.";
        public static const RU$Doucement:String = "Потише, пожалуйста.";
        public static const FR$Créer_Compte_Parler:String = "Vous devez créez un compte pour pouvoir parler.";
        public static const EN$Créer_Compte_Parler:String = "You must create an account to talk.";
        public static const BR$Créer_Compte_Parler:String = "Você precisa criar uma conta para conversar.";
        public static const RU$Créer_Compte_Parler:String = "Вы должны создать профиль, чтобы говорить.";
        public static const FR$Message_Identique:String = "Votre dernier message est identique.";
        public static const EN$Message_Identique:String = "Your last message is the same.";
        public static const BR$Message_Identique:String = "Sua última mensagem é igual.";
        public static const RU$Message_Identique:String = "Ваше предыдущее сообщение было таким же.";
        public static const FR$Commande_Titre:String = "Tapez /titre X pour choisir un titre dans la liste ci-dessous :";
        public static const EN$Commande_Titre:String = "Type /title X to choose a title in the list below :";
        public static const BR$Commande_Titre:String = "Digite /título X para escolher um título na lista abaixo :";
        public static const RU$Commande_Titre:String = "Напечатайте /title X чтобы выбрать один из этих титулов:";
        public static const FR$Liste_Titre:String = "\n/titre %1 -> «%2»";
        public static const EN$Liste_Titre:String = "\n/title %1 -> «%2»";
        public static const FR$Mot_Chamane:String = "Chamane";
        public static const EN$Mot_Chamane:String = "Shaman";
        public static const BR$Mot_Chamane:String = "Shaman";
        public static const RU$Mot_Chamane:String = "Шаман";
        public static const FR$Mot_À:String = "À";
        public static const EN$Mot_À:String = "to";
        public static const BR$Mot_À:String = "Para";
        public static const RU$Mot_À:String = "для";
        public static const FR$Mot_De:String = "De";
        public static const EN$Mot_De:String = "from";
        public static const BR$Mot_De:String = "De";
        public static const RU$Mot_De:String = "от";
        public static const FR$Chuchoter:String = "Chuchoter";
        public static const EN$Chuchoter:String = "Whisper";
        public static const BR$Chuchoter:String = "Cochichar";
        public static const RU$Chuchoter:String = "Шепнуть";
        public static const FR$Profil:String = "Profil";
        public static const EN$Profil:String = "Profile";
        public static const BR$Profil:String = "Perfil";
        public static const RU$Profil:String = "Профиль";
        public static const FR$Modération:String = "Modération";
        public static const EN$Modération:String = "Tools";
        public static const BR$Modération:String = "Ferramentas";
        public static const RU$Modération:String = "Инструменты";
        public static const FR$Ignorer_Temporairement:String = "Ignorer temporairement";
        public static const EN$Ignorer_Temporairement:String = "Ignore";
        public static const BR$Ignorer_Temporairement:String = "Ignorar";
        public static const RU$Ignorer_Temporairement:String = "Игнорировать";
        public static const FR$MP_Forum:String = "<J>Vous avez %1 message(s) non lu(s) sur le forum <a href='http://forum.transformice.com' target='_blank'><u>http://forum.transformice.com</u></a>";
        public static const EN$MP_Forum:String = "<J>You have %1 unread message(s) in your forum's inbox <a href='http://forum.transformice.com' target='_blank'><u>http://forum.transformice.com</u></a>";
        public static const BR$MP_Forum:String = "<J>Você tem %1 mensagem não lida (s) na sua caixa de entrada do fórum <a href='http://forum.transformice.com' target='_blank'><u>http://forum.transformice.com</u></a> ";
        public static const RU$MP_Forum:String = "<J>У вас %1 непрочитанных сообщений в вашей почте на форуме <a href='http://forum.transformice.com' target='_blank'><u>http://forum.transformice.com</u></a>";
        public static const FR$Souris_Grise:String = "Souris Grise";
        public static const EN$Souris_Grise:String = "Little Mouse";
        public static const BR$Souris_Grise:String = "Ratinho";
        public static const FR$Disciple_Chamane:String = "Disciple Chamane";
        public static const EN$Disciple_Chamane:String = "Shaman Disciple";
        public static const BR$Disciple_Chamane:String = "Aprendiz de Shaman";
        public static const FR$Chamane_Accomplie:String = "Chamane Accomplie";
        public static const EN$Chamane_Accomplie:String = "Accomplished Shaman";
        public static const BR$Chamane_Accomplie:String = "Shaman Graduado";
        public static const FR$Titre_Chamane:String = "Chamane";
        public static const EN$Titre_Chamane:String = "Shaman";
        public static const FR$Maîtresse_Chamane:String = "Maîtresse Chamane";
        public static const EN$Maîtresse_Chamane:String = "Shaman Master";
        public static const BR$Maîtresse_Chamane:String = "Mestre Shaman";
        public static const FR$Chamane_Inspirée:String = "Chamane Inspirée";
        public static const EN$Chamane_Inspirée:String = "Inspired Shaman";
        public static const BR$Chamane_Inspirée:String = "Shaman Inspirado";
        public static const FR$Championne_Chamane:String = "Championne Chamane";
        public static const EN$Championne_Chamane:String = "Shaman Champion";
        public static const BR$Championne_Chamane:String = "Shaman Campeão";
        public static const FR$Chamane_Glorieuse:String = "Chamane Glorieuse";
        public static const EN$Chamane_Glorieuse:String = "Glorious Shaman";
        public static const BR$Chamane_Glorieuse:String = "Shaman Glorioso";
        public static const FR$Duchesse_Chamane:String = "Duchesse Chamane";
        public static const EN$Duchesse_Chamane:String = "Shaman Duchess";
        public static const BR$Duchesse_Chamane:String = "Duquesa Shaman";
        public static const FR$Princesse_Chamane:String = "Princesse Chamane";
        public static const EN$Princesse_Chamane:String = "Shaman Princess";
        public static const BR$Princesse_Chamane:String = "Princesa Shaman";
        public static const FR$Impératrice_Chamane:String = "Impératrice Chamane";
        public static const EN$Impératrice_Chamane:String = "Shaman Empress";
        public static const BR$Impératrice_Chamane:String = "Imperatriz Shaman";
        public static const FR$Chamane_Légendaire:String = "Chamane Légendaire";
        public static const EN$Chamane_Légendaire:String = "Legendary Shaman";
        public static const BR$Chamane_Légendaire:String = "Shaman Lendário";
        public static const FR$Chamane_Immortelle:String = "Chamane Immortelle";
        public static const EN$Chamane_Immortelle:String = "Immortal Shaman";
        public static const BR$Chamane_Immortelle:String = "Shaman Imortal";
        public static const FR$Chamane_Élue:String = "Chamane Élue";
        public static const EN$Chamane_Élue:String = "The Chosen Shaman";
        public static const BR$Chamane_Élue:String = "O Shaman Escolhido";
        public static const FR$Chamane_Sacrée:String = "Chamane Sacrée";
        public static const EN$Chamane_Sacrée:String = "Holy Shaman";
        public static const BR$Chamane_Sacrée:String = "Shaman Sagrado";
        public static const FR$Oracle_Chamane:String = "Oracle Chamane";
        public static const EN$Oracle_Chamane:String = "Shaman Oracle";
        public static const BR$Oracle_Chamane:String = "Shaman Oráculo";
        public static const FR$Prophète_Chamane:String = "Prophète Chamane";
        public static const EN$Prophète_Chamane:String = "Shaman Prophet";
        public static const BR$Prophète_Chamane:String = "Shaman Profeta";
        public static const FR$Chamanifique:String = "Chamanifique";
        public static const EN$Chamanifique:String = "Shamarvelous";
        public static const BR$Chamanifique:String = "Shaman Supremo";
        public static const FR$Souris_Gourmande:String = "Souris Gourmande";
        public static const EN$Souris_Gourmande:String = "Greedy Mouse";
        public static const BR$Souris_Gourmande:String = "Rato Ambicioso";
        public static const FR$La_Fromage:String = "Là ! Fromage !";
        public static const EN$La_Fromage:String = "Here ! Cheese !";
        public static const BR$La_Fromage:String = "Olha ! Queijo !";
        public static const FR$Owi_Fromage:String = "Owi Fromage ^^";
        public static const EN$Owi_Fromage:String = "Yeeeeah Cheese ^^";
        public static const BR$Owi_Fromage:String = "Obaaaaa Queijo ^^";
        public static const FR$Souris_Militante:String = "Souris Militante";
        public static const EN$Souris_Militante:String = "Activist Mouse";
        public static const BR$Souris_Militante:String = "Rato Militante";
        public static const FR$Souris_Syndiquée:String = "Souris Syndiquée";
        public static const EN$Souris_Syndiquée:String = "Unionized Mouse";
        public static const BR$Souris_Syndiquée:String = "Rato Sindicalista";
        public static const FR$Souris_en_Grève:String = "Souris en Grève";
        public static const EN$Souris_en_Grève:String = "Mouse on Strike";
        public static const BR$Souris_en_Grève:String = "Rato em Greve";
        public static const FR$Souris_Gloutonne:String = "Souris Gloutonne";
        public static const EN$Souris_Gloutonne:String = "Glutton Mouse";
        public static const BR$Souris_Gloutonne:String = "Rato Guloso";
        public static const FR$Grapilleuse:String = "Grapilleuse";
        public static const EN$Grapilleuse:String = "Gleany";
        public static const BR$Grapilleuse:String = "Apanhador de Queijos";
        public static const FR$Souris_Dodue:String = "Souris Dodue";
        public static const EN$Souris_Dodue:String = "Plumpy Mouse";
        public static const BR$Souris_Dodue:String = "Rato Fofinho";
        public static const FR$Souris_Ventrue:String = "Souris Ventrue";
        public static const EN$Souris_Ventrue:String = "Paunchy Mouse";
        public static const BR$Souris_Ventrue:String = "Sr. Barriga";
        public static const FR$Souris_Joufflue:String = "Souris Joufflue";
        public static const EN$Souris_Joufflue:String = "Chubby Mouse";
        public static const BR$Souris_Joufflue:String = "Gorducho";
        public static const FR$Bouboule:String = "Bouboule";
        public static const EN$Bouboule:String = "Fluffy Mouse";
        public static const BR$Bouboule:String = "Rato Peludinho";
        public static const FR$Patapouffe:String = "Patapouffe";
        public static const EN$Patapouffe:String = "Tubby Mouse";
        public static const BR$Patapouffe:String = "Rato Obeso";
        public static const FR$La_Rondouillarde:String = "La Rondouillarde";
        public static const EN$La_Rondouillarde:String = "The Chubby'";
        public static const BR$La_Rondouillarde:String = "O Fofão";
        public static const FR$La_Boursoufflée:String = "La Boursoufflée";
        public static const EN$La_Boursoufflée:String = "The Puffy";
        public static const BR$La_Boursoufflée:String = "O Sedentário";
        public static const FR$Initiée_du_Fromage:String = "Initiée du Fromage";
        public static const EN$Initiée_du_Fromage:String = "The Cheese Initiated";
        public static const BR$Initiée_du_Fromage:String = "O Recruta do Queijo";
        public static const FR$Adepte_du_Fromage:String = "Adepte du Fromage";
        public static const EN$Adepte_du_Fromage:String = "The Cheese Adept";
        public static const BR$Adepte_du_Fromage:String = "O Viciado em Queijo";
        public static const FR$Prêtresse_du_Fromage:String = "Prêtresse du Fromage";
        public static const EN$Prêtresse_du_Fromage:String = "The Cheese Priest";
        public static const BR$Prêtresse_du_Fromage:String = "O Guardião do Queijo";
        public static const FR$La_Moissonneuse:String = "La Moissonneuse";
        public static const EN$La_Moissonneuse:String = "The Reaper";
        public static const BR$La_Moissonneuse:String = "Mestre do Queijo";
        public static const FR$Souris_Rapide:String = "Souris Rapide";
        public static const EN$Souris_Rapide:String = "Fast Mouse";
        public static const BR$Souris_Rapide:String = "Rato Veloz";
        public static const FR$Souris_Agile:String = "Souris Agile";
        public static const EN$Souris_Agile:String = "Agile Mouse";
        public static const BR$Souris_Agile:String = "Ligeirinho";
        public static const FR$Souris_Pirate:String = "Souris Pirate";
        public static const EN$Souris_Pirate:String = "Pirate Mouse";
        public static const BR$Souris_Pirate:String = "Rato Pirata";
        public static const FR$Souris_Ninja:String = "Souris Ninja";
        public static const EN$Souris_Ninja:String = "Ninja Mouse";
        public static const BR$Souris_Ninja:String = "Rato Ninja";
        public static const FR$Souris_Fripponne:String = "Souris Fripponne";
        public static const EN$Souris_Fripponne:String = "Rogue Mouse";
        public static const BR$Souris_Fripponne:String = "Rato Fanfarrão";
        public static const FR$Pilleuse:String = "Pilleuse";
        public static const EN$Pilleuse:String = "Looter";
        public static const BR$Pilleuse:String = "Ladrão";
        public static const FR$Traqueuse:String = "Traqueuse";
        public static const EN$Traqueuse:String = "Stalker";
        public static const BR$Traqueuse:String = "Perseguidor";
        public static const FR$Écumeuse:String = "Écumeuse";
        public static const EN$Écumeuse:String = "Frothy Mouse";
        public static const BR$Écumeuse:String = "Rato Fútil";
        public static const FR$La_Silencieuse:String = "La Silencieuse";
        public static const EN$La_Silencieuse:String = "The Silent";
        public static const BR$La_Silencieuse:String = "O Silencioso";
        public static const FR$Souris_Faucon:String = "Souris Faucon";
        public static const EN$Souris_Faucon:String = "Hawk Mouse";
        public static const BR$Souris_Faucon:String = "Rato Falcão";
        public static const FR$Souris_Cobra:String = "Souris Cobra";
        public static const EN$Souris_Cobra:String = "Cobra Mouse";
        public static const BR$Souris_Cobra:String = "Rato Cobra";
        public static const FR$Spidersouris:String = "Spidersouris";
        public static const EN$Spidersouris:String = "Spidermouse";
        public static const BR$Spidersouris:String = "Rato-aranha";
        public static const FR$Vif_Argent:String = "Vif Argent";
        public static const EN$Vif_Argent:String = "Quick Silver";
        public static const BR$Vif_Argent:String = "O Mito";
        public static const FR$Ancienne_Chamane:String = "Ancienne Chamane";
        public static const EN$Ancienne_Chamane:String = "Ancient Shaman";
        public static const BR$Ancienne_Chamane:String = "Shaman Ancião";
        public static const FR$Chamane_Sans_Peur:String = "Chamane Sans Peur";
        public static const EN$Chamane_Sans_Peur:String = "Fearless Shaman";
        public static const BR$Chamane_Sans_Peur:String = "Shaman Destemido";
        public static const FR$ToutePuissante_Chamane:String = "Toute-Puissante Chamane";
        public static const EN$ToutePuissante_Chamane:String = "Almight Shamane";
        public static const BR$ToutePuissante_Chamane:String = "Shaman Divino";
        public static const FR$Chamane_Architecte:String = "Chamane Architecte";
        public static const EN$Chamane_Architecte:String = "Architect Shaman";
        public static const BR$Chamane_Architecte:String = "Shaman Arquiteto";
        public static const FR$Mademoiselle:String = "Mademoiselle";
        public static const EN$Mademoiselle:String = "Mademoiselle";
        public static const FR$Lady_Chamane:String = "Lady Chamane";
        public static const EN$Lady_Chamane:String = "Lady Chamane";
        public static const BR$Lady_Chamane:String = "Madame Shaman";
        public static const FR$Aimée:String = "Aimée";
        public static const EN$Aimée:String = "Loved";
        public static const BR$Aimée:String = "Amado";
        public static const FR$Magicienne:String = "Magicienne";
        public static const EN$Magicienne:String = "Magician";
        public static const BR$Magicienne:String = "Mago";
        public static const FR$Héroïne_Des_Souris:String = "Héroïne Des Souris";
        public static const EN$Héroïne_Des_Souris:String = "Hero of Mice";
        public static const BR$Héroïne_Des_Souris:String = "Herói dos Ratos";
        public static const FR$Ange_Chamane:String = "Ange Chamane";
        public static const EN$Ange_Chamane:String = "Angel Shaman";
        public static const BR$Ange_Chamane:String = "Shaman Anjo";
        public static const FR$La_Créatrice:String = "La Créatrice";
        public static const EN$La_Créatrice:String = "The Creator";
        public static const BR$La_Créatrice:String = "O Criador";
        public static const FR$Chamane_Absolue:String = "Chamane Absolue";
        public static const EN$Chamane_Absolue:String = "Absolute Shaman";
        public static const BR$Chamane_Absolue:String = "Shaman Absoluto";
        public static const FR$Chamane_Miraculeuse:String = "Chamane Miraculeuse";
        public static const EN$Chamane_Miraculeuse:String = "Miraculous Shaman";
        public static const BR$Chamane_Miraculeuse:String = "Shaman Milagroso";
        public static const FR$Libératrice:String = "Libératrice";
        public static const EN$Libératrice:String = "Liberator";
        public static const BR$Libératrice:String = "Libertador";
        public static const FR$CDM:String = "CDM";
        public static const EN$CDM:String = "Troll Shaman";
        public static const FR$Chamane_Fantôme:String = "Chamane Fantôme";
        public static const EN$Chamane_Fantôme:String = "Ghost Shaman";
        public static const BR$Chamane_Fantôme:String = "Shaman Fantasma";
        public static const FR$Titre_Esprit:String = "Esprit";
        public static const EN$Titre_Esprit:String = "Spirit";
        public static const BR$Titre_Esprit:String = "Espírito";
        public static const FR$DemiDéesse_Chamane:String = "Demi-Déesse Chamane";
        public static const EN$DemiDéesse_Chamane:String = "Demigodess Shaman";
        public static const BR$DemiDéesse_Chamane:String = "Shaman Semideus";
        public static const FR$Dernier_Espoir:String = "Dernier Espoir";
        public static const EN$Dernier_Espoir:String = "Last Hope";
        public static const BR$Dernier_Espoir:String = "Última Esperança";
        public static const FR$Rédemptrice:String = "Rédemptrice";
        public static const EN$Rédemptrice:String = "Redeemer";
        public static const BR$Rédemptrice:String = "Redentor";
        public static const EN$Alpha_Omega:String = "Alpha & Omega";
        public static const FR$Chercheuse_De_Fromage:String = "Chercheuse De Fromage";
        public static const EN$Chercheuse_De_Fromage:String = "Cheese Finder";
        public static const BR$Chercheuse_De_Fromage:String = "Rato Sherlock ";
        public static const FR$Chevalier_Fromage:String = "Chevalier Fromage";
        public static const EN$Chevalier_Fromage:String = "Cheese Knight";
        public static const BR$Chevalier_Fromage:String = "Cavaleiro do Queijo";
        public static const EN$Cheesegrubber:String = "Cheesegrubber";
        public static const FR$Grassouillette:String = "Grassouillette";
        public static const EN$Grassouillette:String = "Fatty";
        public static const BR$Grassouillette:String = "Seboso";
        public static const FR$Souris_Robuste:String = "Souris Robuste";
        public static const EN$Souris_Robuste:String = "Stout Mouse";
        public static const BR$Souris_Robuste:String = "Rato Robusto";
        public static const FR$Amoureuse_Du_Fromage:String = "Amoureuse Du Fromage";
        public static const EN$Amoureuse_Du_Fromage:String = "Cheese Lover";
        public static const BR$Amoureuse_Du_Fromage:String = "Amante de Queijo";
        public static const EN$Camembert:String = "Camembert";
        public static const EN$PontLeveque:String = "Pont-L'Évêque";
        public static const FR$L_Attrape_Fromage:String = "L'Attrape Fromage";
        public static const EN$L_Attrape_Fromage:String = "Cheese Catcher";
        public static const BR$L_Attrape_Fromage:String = "Pega-Queijo";
        public static const EN$Its_Over_9000:String = "It's Over 9000";
        public static const FR$Collectionneuse:String = "Collectionneuse";
        public static const EN$Collectionneuse:String = "Collector";
        public static const BR$Collectionneuse:String = "Colecionador";
        public static const EN$Cheeseleader:String = "Cheeseleader";
        public static const FR$Voleuse_De_Fromage:String = "Voleuse De Fromage";
        public static const EN$Voleuse_De_Fromage:String = "Cheese Thief";
        public static const BR$Voleuse_De_Fromage:String = "Ladrão de Queijos";
        public static const FR$Fromagère:String = "Fromagère";
        public static const EN$Fromagère:String = "Cheese Creator";
        public static const BR$Fromagère:String = "Criador do Queijo";
        public static const FR$Pizza_Fromage:String = "Pizza Fromage";
        public static const EN$Pizza_Fromage:String = "Cheese Pizza";
        public static const BR$Pizza_Fromage:String = "Pizza de Queijo";
        public static const FR$Ministre_Du_Fromage:String = "Ministre Du Fromage";
        public static const EN$Ministre_Du_Fromage:String = "Cheese Minister";
        public static const BR$Ministre_Du_Fromage:String = "Ministro do Queijo";
        public static const FR$Souris_Prodigieuse:String = "Souris Prodigieuse";
        public static const EN$Souris_Prodigieuse:String = "Prodigy Mouse";
        public static const BR$Souris_Prodigieuse:String = "Rato Prodígio";
        public static const FR$Princesse_De_Transformice:String = "Princesse De Transformice";
        public static const EN$Princesse_De_Transformice:String = "Princess Of Transformice";
        public static const BR$Princesse_De_Transformice:String = "Princesa do Transformice";
        public static const FR$Fromalcoolique:String = "Fromalcoolique";
        public static const EN$Fromalcoolique:String = "Cheesoholic";
        public static const BR$Fromalcoolique:String = "Queijólatra";
        public static const EN$The_Cheesen_One:String = "The Cheesen One";
        public static const EN$Sailor_Mouse:String = "Sailor Mouse";
        public static const FR$MON_FROMAGE:String = "MON FROMAGE !";
        public static const EN$MON_FROMAGE:String = "MAH CHEESE!";
        public static const BR$MON_FROMAGE:String = "MEU QUEIJO!";
        public static const FR$Souris_Athlétique:String = "Souris Athlétique";
        public static const EN$Souris_Athlétique:String = "Athletic Mouse";
        public static const BR$Souris_Athlétique:String = "Rato Atlético";
        public static const FR$Souris_Hâtive:String = "Souris Hâtive";
        public static const EN$Souris_Hâtive:String = "Hasty Mouse";
        public static const BR$Souris_Hâtive:String = "Rato Apressado";
        public static const FR$Le_Missile:String = "Le Missile";
        public static const EN$Le_Missile:String = "Rocket Mouse";
        public static const BR$Le_Missile:String = "O Míssil";
        public static const FR$Sonic_La_Souris:String = "Sonic La Souris";
        public static const EN$Sonic_La_Souris:String = "Sonic The Mouse";
        public static const FR$Meilleur_Ping:String = "Meilleur Ping";
        public static const EN$Meilleur_Ping:String = "Pingless";
        public static const EN$Kamikaze:String = "Kamikaze";
        public static const FR$Souris_Guerrière:String = "Souris Guerrière";
        public static const EN$Souris_Guerrière:String = "Warrior Mouse";
        public static const BR$Souris_Guerrière:String = "Rato Guerreiro";
        public static const EN$Mach_1:String = "Mach 1";
        public static const FR$Chasseresse:String = "Chasseresse";
        public static const EN$Chasseresse:String = "Hunter";
        public static const BR$Chasseresse:String = "Caçador";
        public static const FR$Prem_s:String = "Prem's !";
        public static const EN$Prem_s:String = "First!";
        public static const BR$Prem_s:String = "Primeiro!";
        public static const EN$Sniper:String = "Sniper";
        public static const EN$Flash:String = "Flash";
        public static const EN$Supermouse:String = "Supermouse";
        public static const FR$Vitesse_Lumière:String = "Vitesse Lumière";
        public static const EN$Vitesse_Lumière:String = "Light Speed";
        public static const BR$Vitesse_Lumière:String = "Velocidade da Luz";
        public static const FR$Voyageuse_Du_Temps:String = "Voyageuse Du Temps";
        public static const EN$Voyageuse_Du_Temps:String = "Time Traveler";
        public static const BR$Voyageuse_Du_Temps:String = "Viajante do Tempo";
        public static const FR$Vent_Rapide:String = "Vent Rapide";
        public static const EN$Vent_Rapide:String = "Fast Wind";
        public static const BR$Vent_Rapide:String = "Tornado";
        public static const EN$EMC2:String = "E=MouseC²";
        public static const FR$La_Sauteuse:String = "La Sauteuse";
        public static const EN$La_Sauteuse:String = "Jumper";
        public static const BR$La_Sauteuse:String = "Canguru";
        public static const FR$L_Intouchable:String = "L'Intouchable";
        public static const EN$L_Intouchable:String = "The Untouchable";
        public static const BR$L_Intouchable:String = "O Intocável";
        public static const EN$WallJumper:String = "Wall-Jumper";
        public static const FR$FOUDRE:String = "FOUDRE";
        public static const EN$FOUDRE:String = "LIGHTNING";
        public static const BR$FOUDRE:String = "RELÂMPAGO";
        public static const FR$Jolie_Souris:String = "Jolie Souris";
        public static const EN$Jolie_Souris:String = "Nice Mouse";
        public static const BR$Jolie_Souris:String = "Rato Descolado";
        public static const FR$Souris_Adorable:String = "Souris Adorable";
        public static const EN$Souris_Adorable:String = "Adorable Mouse";
        public static const BR$Souris_Adorable:String = "Rato Adorável";
        public static const FR$Souris_Charmante:String = "Souris Charmante";
        public static const EN$Souris_Charmante:String = "Charming Mouse";
        public static const BR$Souris_Charmante:String = "Rato Charmoso";
        public static const FR$Souris_Coquette:String = "Souris Coquette";
        public static const EN$Souris_Coquette:String = "Pretty Mouse";
        public static const BR$Souris_Coquette:String = "Rato Atraente";
        public static const FR$Souris_Mignonne:String = "Souris Mignonne";
        public static const EN$Souris_Mignonne:String = "Cute Mouse";
        public static const BR$Souris_Mignonne:String = "Rato Bonitinho";
        public static const FR$Souris_Frivole:String = "Souris Frivole";
        public static const EN$Souris_Frivole:String = "Frivolous Mouse";
        public static const BR$Souris_Frivole:String = "Rato Galã";
        public static const FR$Souris_Snob:String = "Souris Snob";
        public static const EN$Souris_Snob:String = "Snob Mouse";
        public static const BR$Souris_Snob:String = "Rato Esnobe";
        public static const FR$Souris_A_La_Mode:String = "Souris à la Mode";
        public static const EN$Souris_A_La_Mode:String = "Stylish Mouse";
        public static const BR$Souris_A_La_Mode:String = "Rato Estiloso";
        public static const FR$Souris_Actrice:String = "Souris Actrice";
        public static const EN$Souris_Actrice:String = "Actress Mouse";
        public static const BR$Souris_Actrice:String = "Diva";
        public static const FR$Souris_Fashion:String = "Souris Fashion";
        public static const EN$Souris_Fashion:String = "Fashion Mouse";
        public static const BR$Souris_Fashion:String = "Rato Fashion";
        public static const EN$Sexy:String = "Sexy";
        public static const EN$SuperStar:String = "SuperStar";
        public static const FR$Déesse_Chamane:String = "Déesse Chamane";
        public static const EN$Déesse_Chamane:String = "Goddess Shaman";
        public static const BR$Déesse_Chamane:String = "Deusa Shaman";
        public static const FR$Gardienne_des_Fromages:String = "<font color='#98E2EB'>Gardienne des Fromages</font>";
        public static const EN$Gardienne_des_Fromages:String = "<font color='#98E2EB'>The Cheese Guardian</font>";
        public static const FR$Maîtresse_du_Vent:String = "Maîtresse du Vent";
        public static const EN$Maîtresse_du_Vent:String = "The Wind Master";
        public static const FR$C_SourisSauvées:String = "Souris avec fromage sauvées";
        public static const EN$C_SourisSauvées:String = "Mice with cheese saved";
        public static const BR$C_SourisSauvées:String = "Ratos salvos com sucesso";
        public static const RU$C_SourisSauvées:String = "Спасено мышей";
        public static const FR$C_Fromage:String = "Fromages récupérés personnellement";
        public static const EN$C_Fromage:String = "Cheese personnally gathered";
        public static const BR$C_Fromage:String = "Queijos coletados pessoalmente";
        public static const RU$C_Fromage:String = "Сыра собрано шаманом";
        public static const FR$S_Prems:String = "Fromages rapportés en première";
        public static const EN$S_Prems:String = "Cheese gathered first";
        public static const BR$S_Prems:String = "Queijos coletados em primeiro";
        public static const RU$S_Prems:String = "Сыра собрано первым";
        public static const FR$S_Fromage:String = "Fromages récupérés";
        public static const EN$S_Fromage:String = "Gathered cheese";
        public static const BR$S_Fromage:String = "Queijos coletados";
        public static const RU$S_Fromage:String = "Сыра собрано";
        public static const FR$Titres_Débloqués:String = "Titres débloqués";
        public static const EN$Titres_Débloqués:String = "Unlocked titles";
        public static const BR$Titres_Débloqués:String = "Títulos desbloqueados";
        public static const RU$Titres_Débloqués:String = "Открытые титулы";
        public static const FR$Titre_En_Cours:String = "Titre en cours";
        public static const EN$Titre_En_Cours:String = "Current title";
        public static const BR$Titre_En_Cours:String = "Título atual";
        public static const RU$Titre_En_Cours:String = "Текущий титул";
        public static const FR$Amis:String = "Amis";
        public static const EN$Amis:String = "Friends";
        public static const BR$Amis:String = "Amigos";
        public static const RU$Amis:String = "Друзья";
        public static const FR$Connexion_Ami:String = "%1 vient de se connecter.";
        public static const EN$Connexion_Ami:String = "%1 just connected.";
        public static const BR$Connexion_Ami:String = "%1 acabou de se conectar.";
        public static const RU$Connexion_Ami:String = "%1 подключился.";
        public static const FR$Suppr_Ami:String = "%1 ne fait plus partie de votre liste d'amis.";
        public static const EN$Suppr_Ami:String = "%1 isn't part of your friend list anymore.";
        public static const BR$Suppr_Ami:String = "%1 não faz mais parte da sua lista de amigos.";
        public static const RU$Suppr_Ami:String = "%1 теперь не в списке ваших друзей.";
        public static const FR$Max_Amis:String = "Vous ne pouvez pas avoir plus de 100 amis.";
        public static const EN$Max_Amis:String = "You cannot have more than 100 friends.";
        public static const BR$Max_Amis:String = "Você não pode ter mais de 100 amigos.";
        public static const RU$Max_Amis:String = "100 друзей-максимум.";
        public static const FR$Nouveau_Ami:String = "%1 est maintenant votre ami(e).";
        public static const EN$Nouveau_Ami:String = "You're now friends with %1.";
        public static const BR$Nouveau_Ami:String = "Você adicionou %1 na sua lista de amigos.";
        public static const RU$Nouveau_Ami:String = "Теперь Вы дружите с %1.";
        public static const FR$Deja_Ami:String = "%1 fait déjà partie de vos amis.";
        public static const EN$Deja_Ami:String = "%1 is already part of your friend list.";
        public static const BR$Deja_Ami:String = "%1 já está na sua lista de amigos.";
        public static const RU$Deja_Ami:String = "%1 уже Ваш друг.";
        public static const FR$Déconnecté:String = "déconnecté";
        public static const EN$Déconnecté:String = "disconnected";
        public static const BR$Déconnecté:String = "desconectado";
        public static const RU$Déconnecté:String = "отключился";
        public static const FR$Commande_Ami:String = "Tapez /ami NomJoueur pour ajouter un joueur à votre liste d'amis.";
        public static const EN$Commande_Ami:String = "Type /friend PlayerName to add a player to your friend list.";
        public static const BR$Commande_Ami:String = "Digite /amigo NomeDoJogador para adicioná-lo na sua lista de amigos.";
        public static const RU$Commande_Ami:String = "Напечатайте /friend ИмяИгрока чтобы добавить этого игрока в друзья.";
        public static const FR$Magasin:String = "Magasin";
        public static const EN$Magasin:String = "Shop";
        public static const BR$Magasin:String = "Loja";
        public static const RU$Magasin:String = "Магазин";
        public static const FR$Fromages:String = "Fromages";
        public static const EN$Fromages:String = "Cheese";
        public static const BR$Fromages:String = "Queijos";
        public static const FR$Pas_Assez_Fromage:String = "Vous n'avez pas assez de fromages pour acheter cet objet.";
        public static const EN$Pas_Assez_Fromage:String = "You don't have enough cheese for this item.";
        public static const BR$Pas_Assez_Fromage:String = "Você não tem queijos suficientes para comprar este item.";
        public static const RU$Pas_Assez_Fromage:String = "У Вас не хватает сыра для покупки.";
        public static const FR$Equiper:String = "Équiper";
        public static const EN$Equiper:String = "Equip";
        public static const BR$Equiper:String = "Usar";
        public static const RU$Equiper:String = "Одеть";
        public static const FR$Enlever:String = "Enlever";
        public static const EN$Enlever:String = "Take off";
        public static const BR$Enlever:String = "Tirar";
        public static const RU$Enlever:String = "Снять";
        public static const FR$File_Info:String = "Le serveur est plein :'(\nVotre position dans la file d'attente :";
        public static const EN$File_Info:String = "Server is full :'(\nYour position in the queue :";
        public static const BR$File_Info:String = "O servidor está lotado :'(\nSua posição na fila :";
        public static const RU$File_Info:String = "Сервер полон :'(\nВаш номер в очереди :";
        public static const FR$File_Adresse:String = "Vous pouvez aussi rejoindre le serveur secondaire :";
        public static const EN$File_Adresse:String = "You can also reach the secondary server :";
        public static const BR$File_Adresse:String = "Você também pode conectar-se ao servidor secundário : ";
        public static const RU$File_Adresse:String = 'Вы также можете подключиться к другому серверу :"';
        public static const FR$Tribu:String = "Tribu";
        public static const EN$Tribu:String = "Tribe";
        public static const BR$Tribu:String = "Tribo";
        public static const FR$Nouvelle_Tribu:String = "Nouvelle tribu";
        public static const EN$Nouvelle_Tribu:String = "New tribe";
        public static const BR$Nouvelle_Tribu:String = "Nova Tribo";
        public static const FR$Deco_Joueur_Tribu:String = "%1 vient de se déconnecter.";
        public static const EN$Deco_Joueur_Tribu:String = "%1 has left.";
        public static const BR$Deco_Joueur_Tribu:String = "%1 saiu.";
        public static const FR$Modifier_Message_Tribu:String = "Modifier le message d'accueil";
        public static const EN$Modifier_Message_Tribu:String = "Change the greeting message";
        public static const BR$Modifier_Message_Tribu:String = "Alterar a mensagem de boas-vindas";
        public static const FR$Valider_Message_Tribu:String = "Valider le message d'accueil";
        public static const EN$Valider_Message_Tribu:String = "Validate the greeting message";
        public static const BR$Valider_Message_Tribu:String = "Salvar a mensagem de boas-vindas";
        public static const FR$Erreur_Droit:String = "Vous n'avez pas les droits suffisants pour effectuer cette action.";
        public static const EN$Erreur_Droit:String = "You don't have enough permission to perform this action.";
        public static const FR$Recruter_Tribu:String = "Recruter";
        public static const EN$Recruter_Tribu:String = "Recruit";
        public static const BR$Recruter_Tribu:String = "Recrutar";
        public static const FR$Deja_Dans_Une_Tribu:String = "Ce joueur fait déjà partie d'une tribu.";
        public static const EN$Deja_Dans_Une_Tribu:String = "This player is already part of a tribe.";
        public static const FR$Demande_Envoyée:String = "Votre invitation a été envoyée.";
        public static const EN$Demande_Envoyée:String = "Your invitation has been sent.";
        public static const BR$Demande_Envoyée:String = "Seu convite foi enviado.";
        public static const EN$Invitation:String = "Invitation";
        public static const FR$Texte_Invitation:String = "<V>%1 <N>vous invite à rejoindre la tribu <BL>%2<N>. Acceptez-vous ?";
        public static const EN$Texte_Invitation:String = "<V>%1 <N>invites you to join the tribe <BL>%2<N>. Accept?";
        public static const BR$Texte_Invitation:String = "<V>%1 <N>está te convidando para participar da tribo '%2'. Você aceita?";
        public static const FR$NePlusAfficher:String = "Ne plus afficher";
        public static const EN$NePlusAfficher:String = "Don't show anymore";
        public static const BR$NePlusAfficher:String = "Não mostrar mais";
        public static const FR$Rejoindre_Tribu:String = "%1 fait maintenant partie de la tribu '%2' !";
        public static const EN$Rejoindre_Tribu:String = "%1 is now part of the tribe '%2'!";
        public static const BR$Rejoindre_Tribu:String = "%1 agora faz parte da tribo '%2'!";
        public static const FR$Choisir_Nom_Tribu:String = "Choisissez un nom de tribu";
        public static const EN$Choisir_Nom_Tribu:String = "Choose a name for the tribe";
        public static const BR$Choisir_Nom_Tribu:String = "Escolha um nome para a tribo";
        public static const FR$Cout_Tribu:String = "La création d'une tribu coûte 500 fromages.";
        public static const EN$Cout_Tribu:String = "The creation of a tribe costs 500 cheese.";
        public static const BR$Cout_Tribu:String = "A criação de uma tribo custa 500 queijos.";
        public static const FR$Creation_Deja_Tribu:String = "Vous faites déjà partie d'une tribu.";
        public static const EN$Creation_Deja_Tribu:String = "You're already part of a tribe.";
        public static const FR$Tribu_Utilisée:String = "Ce nom de tribu est déjà utilisé, choisissez en un autre.";
        public static const EN$Tribu_Utilisée:String = "This tribe name is already taken, please choose another.";
        public static const FR$Tribu_Créée:String = "Vous venez de créer la tribu '%1' !";
        public static const EN$Tribu_Créée:String = "You just created the tribe '%1'!";
        public static const BR$Tribu_Créée:String = "Você criou a tribo '%1'!";
        public static const FR$Exclure:String = "Exclure %1";
        public static const EN$Exclure:String = "Exclude %1";
        public static const BR$Exclure:String = "Expulsar %1";
        public static const FR$Quitter_Tribu:String = "Quitter la tribu";
        public static const EN$Quitter_Tribu:String = "Leave the tribe";
        public static const FR$Exclusion_Tribu:String = "%1 ne fait plus partie de la tribu !";
        public static const EN$Exclusion_Tribu:String = "%1 is no longer part of the tribe!";
        public static const BR$Exclusion_Tribu:String = "%1 não faz mais parte da tribo!";
        public static const FR$Exclusion_Tribu_Soit:String = "Vous ne faites plus partie de la tribu '%1' !";
        public static const EN$Exclusion_Tribu_Soit:String = "You're no longer part of the tribe '%1'!";
        public static const BR$Exclusion_Tribu_Soit:String = "Você não faz mais parte da tribo '%1'!";
        public static const FR$Changer_Grade:String = "Changer le grade de %1";
        public static const EN$Changer_Grade:String = "Change the rank of %1";
        public static const BR$Changer_Grade:String = "Alterar o cargo de %1";
        public static const FR$Grade:String = "Grade";
        public static const EN$Grade:String = "Rank";
        public static const BR$Grade:String = "cargo";
        public static const FR$Sur:String = "Êtes-vous sûr(e) ?";
        public static const EN$Sur:String = "Are you sure ?";
        public static const FR$Nouveau_Grade:String = "%1 est maintenant de grade %2.";
        public static const EN$Nouveau_Grade:String = "%1 is now rank %2.";
        public static const BR$Nouveau_Grade:String = "%1 foi nomeado %2.";
        public static const FR$Dm:String = "Peut changer le message d'accueil.";
        public static const EN$Dm:String = "Can change the greeting message.";
        public static const BR$Dm:String = "Pode alterar a mensagem de boas-vindas.";
        public static const FR$DD:String = "Peut changer les droits des membres.";
        public static const EN$DD:String = "Can change the member's permissions.";
        public static const BR$DD:String = "Pode alterar as permissões dos membros.";
        public static const FR$DI:String = "Peut inviter de nouveaux membres.";
        public static const EN$DI:String = "Can invite new members.";
        public static const BR$DI:String = "Pode convidar novos membros.";
        public static const FR$DE:String = "Peut exclure des membres.";
        public static const EN$DE:String = "Can exclude members.";
        public static const BR$DE:String = "Pode expulsar membros.";
        public static const FR$Changer_Les_Droits:String = "Modifier les droits des membres";
        public static const EN$Changer_Les_Droits:String = "Modify the member's rights.";
        public static const BR$Changer_Les_Droits:String = "Alterar as permissões dos membros.";
        public static const FR$TG_0:String = "Bobonne";
        public static const EN$TG_0:String = "Stooge";
        public static const BR$TG_0:String = "Peão";
        public static const FR$TG_1:String = "Cantinière";
        public static const EN$TG_1:String = "Cooker";
        public static const BR$TG_1:String = "Cozinheiro";
        public static const FR$TG_2:String = "Soldat";
        public static const EN$TG_2:String = "Soldier";
        public static const BR$TG_2:String = "Soldado";
        public static const FR$TG_3:String = "Trésorière";
        public static const EN$TG_3:String = "Treasurer";
        public static const BR$TG_3:String = "Tesoureiro";
        public static const FR$TG_4:String = "Recruteur";
        public static const EN$TG_4:String = "Recruiter";
        public static const BR$TG_4:String = "Recrutador";
        public static const FR$TG_5:String = "Chasseresse ";
        public static const EN$TG_5:String = "Hunteress";
        public static const BR$TG_5:String = "Caçador";
        public static const FR$TG_6:String = "Initié";
        public static const EN$TG_6:String = "Initiated";
        public static const BR$TG_6:String = "Estagiário";
        public static const FR$TG_7:String = "Apprentie Chamane";
        public static const EN$TG_7:String = "Shaman Apprentice";
        public static const BR$TG_7:String = "Aprendiz de Shaman";
        public static const FR$TG_8:String = "Chaman de la tribu";
        public static const EN$TG_8:String = "Tribe's Shaman";
        public static const BR$TG_8:String = "Shaman da Tribo";
        public static const FR$TG_9:String = "Chef Spirituel";
        public static const EN$TG_9:String = "Spiritual Chief";
        public static const BR$TG_9:String = "Líder Espiritual";
        public static const FR$Canal_Actif_1:String = "%1 a réactivé le canal de la tribu.";
        public static const EN$Canal_Actif_1:String = "%1 has reactivated tribe chat.";
        public static const BR$Canal_Actif_1:String = "%1 reativou o chat da tribo.";
        public static const FR$Canal_Actif_0:String = "%1 a désactivé le canal de la tribu.";
        public static const EN$Canal_Actif_0:String = "%1 has deactivated tribe chat.";
        public static const BR$Canal_Actif_0:String = "%1 desativou o chat da tribo.";
        public static const FR$Silence_0:String = "Vous ne recevrez plus de chuchotements.";
        public static const EN$Silence_0:String = "You will not receive any more whispers.";
        public static const BR$Silence_0:String = "Você não receberá mais cochichos.";
        public static const FR$Silence_1:String = "Vous pouvez à nouveau recevoir des chuchotements.";
        public static const EN$Silence_1:String = "You can now recieve whispers.";
        public static const BR$Silence_1:String = "Agora você pode receber cochichos.";
        public static const FR$Silence:String = "%1 refuse les chuchotements.";
        public static const EN$Silence:String = "%1 disabled the whispers.";
        public static const BR$Silence:String = "%1 desativou os cochichos.";
        public static const FR$Message_Ban:String = " [~Modération] %1 a été banni pendant %2 heures. Raison : %3";
        public static const EN$Message_Ban:String = " [~Moderator] %1 was banned for %2 hours. Reason: %3";
        public static const BR$Message_Ban:String = " [~Moderador] %1 foi banido por %2 horas. Motivo: %3";
        public static const FR$Message_Ban_2:String = "<ROSE>ATTENTION, vous avez déjà été banni pendant %1 heures. Si jamais vous êtes banni plus de 24 heures au total, votre compte et votre souris seront SUPPRIMÉS AUTOMATIQUEMENT ET DÉFINITIVEMENT !";
        public static const EN$Message_Ban_2:String = "<ROSE>CAUTION, you have already been banned for %1 hours. If you are banned for more than 24 hours in total, your account and your mouse will be DELETED AUTOMATICALLY AND FOREVER!";
        public static const BR$Message_Ban_2:String = "<ROSE>CUIDADO, você já foi banido por %1 horas. Caso seja banido por mais de 24 horas no total, sua conta e seu rato serão AUTOMATICAMENTE DELETADOS PARA SEMPRE!";
        public static const FR$Message_Ban_3:String = "\nVous êtes banni pendant %1 heures, pour la raison suivante : %2";
        public static const EN$Message_Ban_3:String = "\nYou have been banned for %1 hour for the following reason: %2";
        public static const BR$Message_Ban_3:String = "\nVocê foi banido por %1 horas pelo seguinte motivo: %2";
        public static const FR$Message_Ban_4:String = "\n\nCe compte a été banni définitivement.";
        public static const EN$Message_Ban_4:String = "\n\nThis account has been permanently banned.";
        public static const BR$Message_Ban_4:String = "\n\nEsta conta está banida permanentemente.";
        public static const FR$CadeauJoueur:String = "%1 vient de vous offrir un cadeau !";
        public static const EN$CadeauJoueur:String = "%1 just gave you a present !";
        public static const BR$CadeauJoueur:String = "%1 acaba de lhe dar um presente !";
        public static const FR$Deballer:String = "Déballer son cadeau (niveau %1)";
        public static const EN$Deballer:String = "Unwarp your gift (level %1)";
        public static const BR$Deballer:String = "Abra seu presente (nivel %1)";
        public static const FR$Offrir:String = "Offrir son cadeau à %1 (niveau %2)";
        public static const EN$Offrir:String = "Give away your gift to %1 (level %2)";
        public static const BR$Offrir:String = "Dar seu presente para %1 (nivel %2)";
        public static const FR$Petit_Flocon:String = "Petit Flocon";
        public static const EN$Petit_Flocon:String = "Little Snowflake";
        public static const BR$Petit_Flocon:String = "Floquinho de Neve";
        public static const FR$Esprit_Noel:String = "Esprit de Noël";
        public static const EN$Esprit_Noel:String = "Christmas Spirit";
        public static const BR$Esprit_Noel:String = "Espírito Natalino";
        public static const FR$Petit_Lutin:String = "Petit Lutin";
        public static const EN$Petit_Lutin:String = "Little Pixie";
        public static const BR$Petit_Lutin:String = "Duende";
        public static const FR$Papa_Noel:String = "Papa Noël";
        public static const EN$Papa_Noel:String = "Santa Claus";
        public static const BR$Papa_Noel:String = "Papai Noel";
        public static const FR$GainFromage:String = "<J>Vous venez de gagner %1 fromages !";
        public static const EN$GainFromage:String = "<J>You just won %1 cheeses!";


    }
}//package textes

//------------------------------------------------------------
//textes.OutilsTexte

package textes
{
    public final class OutilsTexte 
    {


        public static function Texte(_arg_1:String, ... _args):String
        {
            _args.unshift(_arg_1);
            return (Transformice.Instance.$Texte.apply(null, _args));
        }


    }
}//package textes

//------------------------------------------------------------
//transformice.chat.OutilsChat

package transformice.chat
{
    public final class OutilsChat 
    {


        public static function Formatage_Texte_Chat(_arg_1:String):String
        {
            var _local_2:String = _arg_1;
            while (_local_2.substr(0, 1) == " ")
            {
                _local_2 = _local_2.substr(1);
            };
            while (_local_2.charAt((_local_2.length - 1)) == " ")
            {
                _local_2 = _local_2.substr(0, -1);
            };
            while (_local_2.indexOf("  ") != -1)
            {
                _local_2 = _local_2.split("  ").join(" ");
            };
            _local_2 = _local_2.split("\r").join("");
            return (_local_2.split("\n").join(""));
        }


    }
}//package transformice.chat

//------------------------------------------------------------
//transformice.evenements.noel.Noel

package transformice.evenements.noel
{
    import transformice.joueur.$Joueur;
    import transformice.reseau.X;
    import Box2D.Dynamics.b2Body;

    public final class Noel 
    {

        public static var BouleDeNeige:Boolean = false;
        public static var MapNoel:Boolean = false;
        public static var ParticuleNeige:$ParticuleZero;
        public static var ParticuleNeige2:$ParticuleZero;
        public static var TempeteActive:Boolean = false;


        public static function Lancement_Boule_De_Neige(_arg_1:$Joueur):void
        {
            _arg_1.Animation_Neige();
        }

        public static function Activation_Lancement_Neige(_arg_1:$Joueur):void
        {
            var _local_2:int = int(_arg_1.x);
            var _local_3:int = (int(_arg_1.y) - 3);
            if (_arg_1.AnimDroite)
            {
                _local_2 = (_local_2 + 30);
            }
            else
            {
                _local_2 = (_local_2 - 30);
            };
            Transformice.Instance.Envoie_Serveur((((((((X.$4 + X.$16) + X.$1) + _local_2) + X.$1) + _local_3) + X.$1) + ((_arg_1.AnimDroite) ? "1" : "0")));
            Transformice.Instance.Creation_Objet(34, _local_2, _local_3, 0, ((_arg_1.AnimDroite) ? 10 : -10), -4, true, -1, false);
        }

        public static function Explosion_Neige(_arg_1:b2Body):void
        {
            var _local_2:int = Transformice.Instance.ListeMobile.indexOf(_arg_1);
            if (((!(_local_2 == -1)) && (Transformice.Instance.ObjetsGicle.indexOf(_local_2) == -1)))
            {
                Transformice.Instance.Demande_Explosion(int((_arg_1.m_xf.position.x * 30)), int((_arg_1.m_xf.position.y * 30)), 10, 50, true, 1);
                Transformice.Instance.Demande_Giclage(_local_2);
            };
        }

        public static function Tempete_Neige(_arg_1:Boolean):void
        {
            if (_arg_1)
            {
                if (TempeteActive)
                {
                    return;
                };
                BouleDeNeige = true;
                TempeteActive = true;
            }
            else
            {
                if (!TempeteActive)
                {
                    return;
                };
                TempeteActive = false;
                BouleDeNeige = false;
            };
        }

        public static function Creation_Neige():$Particule
        {
            var _local_1:$Particule = new $Particule(((Math.random() < 0.5) ? ParticuleNeige : ParticuleNeige2), false);
            _local_1.y = -10;
            _local_1.Vx = ((Math.random() * 1) - 0.5);
            _local_1.Vy = ((Math.random() * 1) + 0.4);
            _local_1.x = int((Math.random() * 800));
            _local_1.Gravité = false;
            _local_1.Stop(0);
            return (_local_1);
        }

        public static function Activer_Cadeau():void
        {
            Transformice.Instance.Envoie_Serveur((X.$19 + X.$22));
        }

        public static function Offrir_Cadeau(_arg_1:String):void
        {
            Transformice.Instance.Envoie_Serveur((((X.$19 + X.$23) + X.$1) + _arg_1));
        }


    }
}//package transformice.evenements.noel

//------------------------------------------------------------
//transformice.joueur.$Joueur

package transformice.joueur
{
    import flash.display.Sprite;
    import __AS3__.vec.Vector;
    import flash.utils.Dictionary;
    import flash.display.MovieClip;
    import Box2D.Dynamics.b2Body;
    import flash.text.TextField;
    import ressources.$Res;
    import flash.display.StageQuality;
    import flash.geom.Rectangle;
    import transformice.evenements.noel.Noel;
    import __AS3__.vec.*;

    public class $Joueur extends Sprite 
    {

        public static const ChargementSouris:Vector.<$Joueur> = new Vector.<$Joueur>();
        private static var ListeLook:Array = new Array();
        private static var LookEnCache:Dictionary = new Dictionary();
        public static var _root:MovieClip;
        public static var Anim_Statique_Base:$ParticuleZero;
        public static var Anim_Course_Base:$ParticuleZero;
        public static var Anim_Invoc_Base:$ParticuleZero;
        public static var Anim_Statique_BaseC:$ParticuleZero;
        public static var Anim_Course_BaseC:$ParticuleZero;
        public static var Anim_Invoc_BaseC:$ParticuleZero;
        public static var Anim_Statique_Base_G:$ParticuleZero;
        public static var Anim_Course_Base_G:$ParticuleZero;
        public static var Anim_Invoc_Base_G:$ParticuleZero;
        public static var Anim_Statique_Base_GC:$ParticuleZero;
        public static var Anim_Course_Base_GC:$ParticuleZero;
        public static var Anim_Invoc_Base_GC:$ParticuleZero;
        private static const DecalageX:int = 47;
        private static const DecalageY:int = 47;
        private static var AnimRecup:int = 0;

        public var Physique:b2Body;
        public var Mort:Boolean = true;
        public var ClipJoueur:Boolean = false;
        public var CodeJoueur:int;
        public var NomJoueur:String;
        public var Score:int;
        public var NomTexte:TextField;
        public var BulleDialogue:MovieClip;
        public var BarreDinvoc:MovieClip;
        public var Grosse:Boolean = false;
        public var AnimDroite:Boolean = true;
        public var DernierMouvement:int;
        public var Guide:Boolean = false;
        public var Guide2:Boolean = false;
        public var TitreEnCours:String = "";
        public var CodeTitre:int;
        public var Avatar:String = "0";
        public var LookJoueur:String = "0";
        public var LookChamane:Boolean = false;
        public var CodeForum:int = 0;
        public var HautEnCours:Boolean = false;
        public var BasEnCours:Boolean = false;
        public var Halloween:Boolean = false;
        private var LookBase:String;
        public var ActionPNJ:int = 0;
        public var AnimationNeigeEnCours:Boolean = false;
        public var Saute:Boolean = false;
        public var ImageSaut:int;
        public var AnimAprèsSaut:int = 0;
        public var Vide:Boolean = true;
        public var ParticuleZone:$ParticuleZone;
        public var Anim_Statique:$Particule;
        public var Anim_Course:$Particule;
        public var Anim_Invoc:$Particule;
        public var Anim_Boule:$Particule;
        public var Anim_Statique_G:$Particule;
        public var Anim_Course_G:$Particule;
        public var Anim_Invoc_G:$Particule;
        public var Anim_Boule_G:$Particule;
        public var Anim_Bisous:MovieClip;
        public var Anim_Bisous_G:MovieClip;
        public var Anim_Rire:MovieClip;
        public var Anim_Rire_G:MovieClip;
        public var Anim_Danse:MovieClip;
        public var Anim_Danse_G:MovieClip;
        public var Anim_Cry:MovieClip;
        public var Anim_Cry_G:MovieClip;
        public var Anim_Neige:MovieClip;
        public var Anim_Neige_G:MovieClip;
        public var Anim_Cadeau:MovieClip;
        public var Anim_Cadeau_G:MovieClip;
        public var Anim_Zelda:MovieClip;
        public var Anim_Zelda_G:MovieClip;
        public var AnimVecto:MovieClip;
        public var ModeVecto:Boolean = false;
        public var DroiteEnCours:Boolean;
        public var GaucheEnCours:Boolean;

        public function $Joueur(_arg_1:String, _arg_2:String="Souris Grise", _arg_3:String="0", _arg_4:Boolean=false, _arg_5:Boolean=false, _arg_6:Boolean=false):void
        {
            mouseEnabled = false;
            mouseChildren = false;
            this.Halloween = _arg_6;
            this.LookBase = _arg_3;
            this.NomJoueur = _arg_1;
            this.Mort = _arg_5;
            if (_arg_4)
            {
                if (LookEnCache[this.LookBase])
                {
                    _arg_4 = false;
                };
            };
            this.Initialisation(_arg_1, _arg_2, _arg_3, _arg_4);
        }

        public static function Récupération_Liste_Animation(_arg_1:$Joueur, _arg_2:Boolean, _arg_3:String, _arg_4:Boolean):void
        {
            if (_arg_4)
            {
                _arg_1.Anim_Statique = new $Particule(Récupération_Animation("AnimStatiqueBalai", false, false, _arg_3, _arg_2));
                _arg_1.Anim_Statique.x = DecalageX;
                _arg_1.Anim_Statique.y = DecalageY;
                _arg_1.Anim_Course = new $Particule(Récupération_Animation("AnimCourseBalai", false, false, _arg_3, _arg_2));
                _arg_1.Anim_Course.x = DecalageX;
                _arg_1.Anim_Course.y = DecalageY;
            }
            else
            {
                _arg_1.Anim_Statique = new $Particule(Récupération_Animation("AnimStatique", _arg_2, false, _arg_3, _arg_2));
                _arg_1.Anim_Statique.x = DecalageX;
                _arg_1.Anim_Statique.y = DecalageY;
                _arg_1.Anim_Course = new $Particule(Récupération_Animation("AnimCourse", _arg_2, false, _arg_3, _arg_2));
                _arg_1.Anim_Course.x = DecalageX;
                _arg_1.Anim_Course.y = DecalageY;
                _arg_1.Anim_Invoc = new $Particule(Récupération_Animation("AnimInvoc", _arg_2, false, _arg_3, _arg_2));
                _arg_1.Anim_Invoc.x = DecalageX;
                _arg_1.Anim_Invoc.y = DecalageY;
                _arg_1.Anim_Boule = new $Particule(Récupération_Animation("AnimDuck", _arg_2, false, _arg_3, true));
                _arg_1.Anim_Boule.x = DecalageX;
                _arg_1.Anim_Boule.y = DecalageY;
                _arg_1.Anim_Cadeau = Récupération_Animation_Clip("AnimCadeau", _arg_2, false, _arg_3);
                _arg_1.Anim_Zelda = Récupération_Animation_Clip("AnimZelda", _arg_2, false, _arg_3);
                _arg_1.Anim_Neige = Récupération_Animation_Clip("AnimNeige", _arg_2, false, _arg_3);
                _arg_1.Anim_Danse = Récupération_Animation_Clip("AnimDanse", _arg_2, false, _arg_3);
                _arg_1.Anim_Rire = Récupération_Animation_Clip("AnimLaugh", _arg_2, false, _arg_3);
                _arg_1.Anim_Cry = Récupération_Animation_Clip("AnimCry", _arg_2, false, _arg_3);
                _arg_1.Anim_Bisous = Récupération_Animation_Clip("AnimKiss", _arg_2, false, _arg_3);
                _arg_1.Anim_Bisous.y = -2;
            };
            if (_arg_4)
            {
                _arg_1.Anim_Statique_G = new $Particule(Récupération_Animation("AnimStatiqueBalai", false, true, _arg_3, _arg_2));
                _arg_1.Anim_Statique_G.x = DecalageX;
                _arg_1.Anim_Statique_G.y = DecalageY;
                _arg_1.Anim_Course_G = new $Particule(Récupération_Animation("AnimCourseBalai", false, true, _arg_3, _arg_2));
                _arg_1.Anim_Course_G.x = DecalageX;
                _arg_1.Anim_Course_G.y = DecalageY;
            }
            else
            {
                _arg_1.Anim_Statique_G = new $Particule(Récupération_Animation("AnimStatique", _arg_2, true, _arg_3, _arg_2));
                _arg_1.Anim_Statique_G.x = DecalageX;
                _arg_1.Anim_Statique_G.y = DecalageY;
                _arg_1.Anim_Course_G = new $Particule(Récupération_Animation("AnimCourse", _arg_2, true, _arg_3, _arg_2));
                _arg_1.Anim_Course_G.x = DecalageX;
                _arg_1.Anim_Course_G.y = DecalageY;
                _arg_1.Anim_Invoc_G = new $Particule(Récupération_Animation("AnimInvoc", _arg_2, true, _arg_3, _arg_2));
                _arg_1.Anim_Invoc_G.x = DecalageX;
                _arg_1.Anim_Invoc_G.y = DecalageY;
                _arg_1.Anim_Boule_G = new $Particule(Récupération_Animation("AnimDuck", _arg_2, true, _arg_3, true));
                _arg_1.Anim_Boule_G.x = DecalageX;
                _arg_1.Anim_Boule_G.y = DecalageY;
                _arg_1.Anim_Cadeau_G = Récupération_Animation_Clip("AnimCadeau", _arg_2, true, _arg_3);
                _arg_1.Anim_Zelda_G = Récupération_Animation_Clip("AnimZelda", _arg_2, true, _arg_3);
                _arg_1.Anim_Neige_G = Récupération_Animation_Clip("AnimNeige", _arg_2, true, _arg_3);
                _arg_1.Anim_Danse_G = Récupération_Animation_Clip("AnimDanse", _arg_2, true, _arg_3);
                _arg_1.Anim_Rire_G = Récupération_Animation_Clip("AnimLaugh", _arg_2, true, _arg_3);
                _arg_1.Anim_Cry_G = Récupération_Animation_Clip("AnimCry", _arg_2, true, _arg_3);
                _arg_1.Anim_Bisous_G = Récupération_Animation_Clip("AnimKiss", _arg_2, true, _arg_3);
            };
        }

        public static function Récupération_Animation(_arg_1:String, _arg_2:Boolean, _arg_3:Boolean, _arg_4:String, _arg_5:Boolean=false):$ParticuleZero
        {
            var _local_7:Array;
            var _local_8:MovieClip;
            var _local_9:int;
            var _local_10:int;
            var _local_11:String;
            var _local_12:$ParticuleZero;
            if (_arg_2)
            {
                _arg_1 = (_arg_1 + "C");
            };
            var _local_6:$ParticuleZero = ListeLook[((_arg_1 + ((_arg_3) ? "G#" : "#")) + _arg_4)];
            if (_local_6)
            {
                return (_local_6);
            };
            AnimRecup++;
            _local_7 = _arg_4.split(",");
            _local_8 = $Res.Pouf(_arg_1);
            if (_arg_3)
            {
                Attacher_Fromage(_local_8);
            };
            _local_9 = _local_7.length;
            _local_10 = 0;
            while (_local_10 < _local_9)
            {
                Attacher_Costume(_local_8, _local_10, _local_7[_local_10]);
                _local_10++;
            };
            if (_arg_2)
            {
                _local_8.scaleX = 1.1;
                _local_8.scaleY = 1.1;
            };
            _local_11 = Transformice.Qualite();
            Transformice.Qualite(StageQuality.HIGH);
            _local_12 = new $ParticuleZero(_local_8, 0, 0);
            if (_local_11 == "LOW")
            {
                Transformice.Qualite(StageQuality.LOW);
            }
            else
            {
                Transformice.Qualite(StageQuality.MEDIUM);
            };
            ListeLook[((_arg_1 + ((_arg_3) ? "G#" : "#")) + _arg_4)] = _local_12;
            return (_local_12);
        }

        public static function Récupération_Animation_Clip(_arg_1:String, _arg_2:Boolean, _arg_3:Boolean, _arg_4:String):MovieClip
        {
            if (_arg_2)
            {
                _arg_1 = (_arg_1 + "C");
            };
            var _local_5:Array = _arg_4.split(",");
            var _local_6:MovieClip = $Res.Pouf(_arg_1);
            if (_arg_3)
            {
                Attacher_Fromage(_local_6);
            };
            var _local_7:int = _local_5.length;
            var _local_8:int;
            while (_local_8 < _local_7)
            {
                Attacher_Costume(_local_6, _local_8, _local_5[_local_8]);
                _local_8++;
            };
            if (_arg_2)
            {
                _local_6.scaleX = 1.1;
                _local_6.scaleY = 1.1;
            };
            _local_6.gotoAndStop(1);
            _local_6.y = -1;
            return (_local_6);
        }

        private static function Attacher_Costume(_arg_1:MovieClip, _arg_2:int, _arg_3:int):void
        {
            var _local_4:MovieClip;
            var _local_8:MovieClip;
            var _local_9:MovieClip;
            if (!_arg_3)
            {
                return;
            };
            var _local_5:String = ("C" + _arg_2);
            var _local_6:int = _arg_1.numChildren;
            var _local_7:int;
            while (_local_7 < _local_6)
            {
                _local_8 = (_arg_1.getChildAt(_local_7) as MovieClip);
                if (((_local_8) && (!(_local_8.name.indexOf(_local_5) == -1))))
                {
                    _local_4 = _local_8;
                    break;
                };
                _local_7++;
            };
            if (_local_4)
            {
                _local_9 = $Res.Pouf(((("$Costume_" + _arg_2) + "_") + _arg_3));
                if (_local_9)
                {
                    _local_4.addChild(_local_9);
                };
            };
        }

        private static function Attacher_Fromage(_arg_1:MovieClip):void
        {
            if (_arg_1.ClipGrosse)
            {
                _arg_1.ClipGrosse.addChild($Res.Pouf("FromageSouris"));
            };
        }


        public function Possède(_arg_1:int, _arg_2:int):Boolean
        {
            var _local_3:Array = this.LookJoueur.split(",");
            return (_local_3[_arg_1] == _arg_2);
        }

        public function Chaman():void
        {
            this.LookChamane = true;
            if (!this.Vide)
            {
                Récupération_Liste_Animation(this, true, this.LookJoueur, this.Halloween);
                this.Animation_Statique(this.AnimDroite);
            };
        }

        public function Initialisation(_arg_1:String, _arg_2:String, _arg_3:String, _arg_4:Boolean):void
        {
            this.LookJoueur = _arg_3;
            if (((!(_arg_4)) && (!(this.Mort))))
            {
                this.Vide = false;
                Récupération_Liste_Animation(this, false, this.LookJoueur, this.Halloween);
            };
            this.ParticuleZone = new $ParticuleZone(-50, -50, 100, 70);
            addChildAt(this.ParticuleZone, 0);
            var _local_5:MovieClip = $Res.Pouf("$NomSprite");
            this.NomTexte = _local_5._N;
            this.TitreEnCours = _arg_2;
            this.NomTexte.htmlText = (((this.NomJoueur + "\n<font color='#8F97AF'>«") + this.TitreEnCours) + "»");
            addChild(this.NomTexte);
            var _local_6:int = (Math.ceil(this.NomTexte.textWidth) + 4);
            this.NomTexte.width = _local_6;
            this.NomTexte.x = -(int((_local_6 / 2)));
            this.NomTexte.y = -62;
            this.Animation_Statique(true);
            this.BulleDialogue = $Res.Pouf("$BulleDialogue");
            this.BulleDialogue._T.styleSheet = _root.StyleTexte;
            this.BulleDialogue.mouseEnabled = false;
            this.BulleDialogue.mouseChildren = false;
            this.BarreDinvoc = $Res.Pouf("$BarreDinvoc");
            this.BarreDinvoc.mouseEnabled = false;
            this.BarreDinvoc.mouseChildren = false;
            this.BarreDinvoc.x = -30;
            this.BarreDinvoc.y = 10;
            if (((_arg_4) && (!(this.Mort))))
            {
                ChargementSouris.push(this);
            };
        }

        public function Fin_Chargement():void
        {
            AnimRecup = 0;
            Récupération_Liste_Animation(this, this.LookChamane, this.LookJoueur, this.Halloween);
            LookEnCache[this.LookBase] = 1;
            this.Vide = false;
            if (this.DroiteEnCours)
            {
                this.Animation_Course(true);
            }
            else
            {
                if (this.GaucheEnCours)
                {
                    this.Animation_Course(false);
                }
                else
                {
                    this.Animation_Statique(this.AnimDroite);
                };
            };
            if (((AnimRecup == 0) && (ChargementSouris.length)))
            {
                ChargementSouris.shift().Fin_Chargement();
            };
        }

        public function Passage_Vecto(_arg_1:Boolean):void
        {
            if (_arg_1)
            {
                if (this.ParticuleZone.parent)
                {
                    removeChild(this.ParticuleZone);
                };
                addChildAt(this.AnimVecto, 0);
            }
            else
            {
                if (this.AnimVecto)
                {
                    this.AnimVecto.stop();
                    if (this.AnimVecto.parent)
                    {
                        removeChild(this.AnimVecto);
                    };
                };
                addChildAt(this.ParticuleZone, 0);
            };
            this.ModeVecto = _arg_1;
        }

        public function Animation_Bisous():void
        {
            if (this.Halloween)
            {
                return;
            };
            if (this.AnimVecto)
            {
                this.AnimVecto.stop();
                if (this.AnimVecto.parent)
                {
                    removeChild(this.AnimVecto);
                };
            };
            if (this.Vide)
            {
                return;
            };
            if (this.Grosse)
            {
                this.AnimVecto = this.Anim_Bisous_G;
            }
            else
            {
                this.AnimVecto = this.Anim_Bisous;
            };
            this.AnimVecto.gotoAndPlay(1);
            if (this.LookChamane)
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1.1 : -1.1);
            }
            else
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1 : -1);
            };
            this.Passage_Vecto(true);
        }

        public function Animation_Zelda(_arg_1:int, _arg_2:int):void
        {
            var _local_3:MovieClip;
            if (this.AnimVecto)
            {
                this.AnimVecto.stop();
                if (this.AnimVecto.parent)
                {
                    removeChild(this.AnimVecto);
                };
            };
            if (this.Vide)
            {
                return;
            };
            if (this.Grosse)
            {
                this.AnimVecto = this.Anim_Zelda_G;
            }
            else
            {
                this.AnimVecto = this.Anim_Zelda;
            };
            if (_arg_1 == -1)
            {
                _local_3 = $Res.Pouf("$Fromage");
            }
            else
            {
                _local_3 = $Res.Pouf(((("$Costume_" + _arg_1) + "_") + _arg_2));
            };
            _local_3.mouseEnabled = false;
            _local_3.mouseChildren = false;
            var _local_4:Rectangle = _local_3.getRect(_local_3);
            _local_3.x = int((-(_local_3.width / 2) - _local_4.x));
            _local_3.y = int((-(_local_3.height / 2) - _local_4.y));
            while (this.AnimVecto.ClipZelda.numChildren)
            {
                this.AnimVecto.ClipZelda.removeChildAt(0);
            };
            this.AnimVecto.ClipZelda.addChild(_local_3);
            this.AnimVecto.gotoAndPlay(1);
            if (this.LookChamane)
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1.1 : -1.1);
            }
            else
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1 : -1);
            };
            this.Passage_Vecto(true);
        }

        public function Animation_Cadeau():void
        {
            if (this.AnimVecto)
            {
                this.AnimVecto.stop();
                if (this.AnimVecto.parent)
                {
                    removeChild(this.AnimVecto);
                };
            };
            if (this.Vide)
            {
                return;
            };
            if (this.Grosse)
            {
                this.AnimVecto = this.Anim_Cadeau_G;
            }
            else
            {
                this.AnimVecto = this.Anim_Cadeau;
            };
            this.AnimVecto.gotoAndPlay(1);
            if (this.LookChamane)
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1.1 : -1.1);
            }
            else
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1 : -1);
            };
            this.Passage_Vecto(true);
        }

        public function Animation_Neige():void
        {
            if (!Noel.BouleDeNeige)
            {
                return;
            };
            if (this.AnimVecto)
            {
                this.AnimVecto.stop();
                if (this.AnimVecto.parent)
                {
                    removeChild(this.AnimVecto);
                };
            };
            if (this.Vide)
            {
                return;
            };
            this.AnimationNeigeEnCours = true;
            if (this.Grosse)
            {
                this.AnimVecto = this.Anim_Neige_G;
            }
            else
            {
                this.AnimVecto = this.Anim_Neige;
            };
            this.AnimVecto.gotoAndPlay(1);
            if (this.LookChamane)
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1.1 : -1.1);
            }
            else
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1 : -1);
            };
            this.Passage_Vecto(true);
        }

        public function Fin_Anim_Neige():void
        {
            this.Animation_Statique(this.AnimDroite);
            if (((Noel.BouleDeNeige) && (this.ClipJoueur)))
            {
                Noel.Activation_Lancement_Neige(this);
            };
        }

        public function MAJ_Saut(_arg_1:Boolean, _arg_2:int=0):void
        {
            var _local_3:$Particule;
            if (this.Vide)
            {
                return;
            };
            this.Passage_Vecto(false);
            if (_arg_1)
            {
                if (!this.Saute)
                {
                    this.AnimAprèsSaut = 0;
                    _local_3 = this.ParticuleZone.ListeParticule[0];
                    if (((_local_3 == this.Anim_Statique) || (_local_3 == this.Anim_Statique_G)))
                    {
                        this.Animation_Course(this.AnimDroite);
                        _local_3 = this.ParticuleZone.ListeParticule[0];
                        _local_3.Stop(((_arg_2) ? _arg_2 : int(int((_local_3.NombreImage * Math.random())))));
                        this.AnimAprèsSaut = 1;
                    }
                    else
                    {
                        _local_3.Stop(((_arg_2) ? _arg_2 : int(int((_local_3.NombreImage * Math.random())))));
                    };
                    this.Saute = true;
                    this.ImageSaut = this.ParticuleZone.ListeParticule[0].ImageEnCours;
                };
            }
            else
            {
                if (this.Saute)
                {
                    this.Saute = false;
                    _local_3 = this.ParticuleZone.ListeParticule[0];
                    if (((((!(_local_3 == this.Anim_Invoc)) && (!(_local_3 == this.Anim_Invoc_G))) && (!(_local_3 == this.Anim_Boule_G))) && (!(_local_3 == this.Anim_Boule))))
                    {
                        if (((this.DroiteEnCours) || (this.GaucheEnCours)))
                        {
                            this.Animation_Course(this.AnimDroite);
                        }
                        else
                        {
                            if (this.AnimAprèsSaut == 1)
                            {
                                this.Animation_Statique(this.AnimDroite);
                            }
                            else
                            {
                                _local_3.Lecture(_local_3.ImageEnCours);
                            };
                        };
                    };
                };
            };
        }

        public function MAJ_Grosse():void
        {
            if (this.Vide)
            {
                return;
            };
            this.Passage_Vecto(false);
            var _local_1:$Particule = this.ParticuleZone.ListeParticule[0];
            if (_local_1)
            {
                if (this.Grosse)
                {
                    if (_local_1 == this.Anim_Statique)
                    {
                        this.ParticuleZone.ListeParticule[0] = this.Anim_Statique_G;
                    }
                    else
                    {
                        if (_local_1 == this.Anim_Course)
                        {
                            this.ParticuleZone.ListeParticule[0] = this.Anim_Course_G;
                        }
                        else
                        {
                            if (_local_1 == this.Anim_Invoc)
                            {
                                this.ParticuleZone.ListeParticule[0] = this.Anim_Invoc_G;
                            };
                        };
                    };
                }
                else
                {
                    if (_local_1 == this.Anim_Statique_G)
                    {
                        this.ParticuleZone.ListeParticule[0] = this.Anim_Statique;
                    }
                    else
                    {
                        if (_local_1 == this.Anim_Course_G)
                        {
                            this.ParticuleZone.ListeParticule[0] = this.Anim_Course;
                        }
                        else
                        {
                            if (_local_1 == this.Anim_Invoc_G)
                            {
                                this.ParticuleZone.ListeParticule[0] = this.Anim_Invoc;
                            };
                        };
                    };
                };
            };
        }

        public function Animation_Statique(_arg_1:Boolean):void
        {
            var _local_2:$Particule;
            this.AnimationNeigeEnCours = false;
            if (((this.Vide) || (this.Mort)))
            {
                return;
            };
            this.Passage_Vecto(false);
            if (((this.ParticuleZone.ListeParticule.length) && ((this.ParticuleZone.ListeParticule[0] == this.Anim_Boule_G) || (this.ParticuleZone.ListeParticule[0] == this.Anim_Boule))))
            {
                if (this.ParticuleZone.ListeParticule[0].ImageEnCours < 8)
                {
                    return;
                };
            };
            if ((((this.Saute) && (!(this.ParticuleZone.ListeParticule[0] == this.Anim_Invoc))) && (!(this.ParticuleZone.ListeParticule[0] == this.Anim_Invoc_G))))
            {
                this.AnimAprèsSaut = 1;
            }
            else
            {
                _local_2 = ((this.Grosse) ? this.Anim_Statique_G : this.Anim_Statique);
                this.ParticuleZone.ListeParticule[0] = _local_2;
                _local_2.Lecture(0);
                this.ParticuleZone.DemandeRendu = true;
            };
            if (_arg_1)
            {
                this.AnimDroite = true;
                this.ParticuleZone.scaleX = 1;
                this.ParticuleZone.x = -50;
            }
            else
            {
                this.AnimDroite = false;
                this.ParticuleZone.scaleX = -1;
                this.ParticuleZone.x = 50;
            };
        }

        public function Animation_Boule(_arg_1:Boolean):void
        {
            var _local_2:$Particule;
            if (this.Halloween)
            {
                return;
            };
            if (((this.Vide) || (this.Mort)))
            {
                return;
            };
            this.Passage_Vecto(false);
            if (((!(this.ParticuleZone.ListeParticule[0] == this.Anim_Boule_G)) && (!(this.ParticuleZone.ListeParticule[0] == this.Anim_Boule))))
            {
                _local_2 = ((this.Grosse) ? this.Anim_Boule_G : this.Anim_Boule);
                this.ParticuleZone.ListeParticule[0] = _local_2;
                _local_2.Lecture(0, 7);
                if (_arg_1)
                {
                    this.AnimDroite = true;
                    this.ParticuleZone.scaleX = 1;
                    this.ParticuleZone.x = -50;
                }
                else
                {
                    this.AnimDroite = false;
                    this.ParticuleZone.scaleX = -1;
                    this.ParticuleZone.x = 50;
                };
            };
        }

        public function Fin_Animation_Boule(_arg_1:Boolean):void
        {
            var _local_2:$Particule;
            if (this.Halloween)
            {
                return;
            };
            if (((this.Vide) || (this.Mort)))
            {
                return;
            };
            this.Passage_Vecto(false);
            if (((this.ParticuleZone.ListeParticule[0] == this.Anim_Boule_G) || (this.ParticuleZone.ListeParticule[0] == this.Anim_Boule)))
            {
                _local_2 = ((this.Grosse) ? this.Anim_Boule_G : this.Anim_Boule);
                this.ParticuleZone.ListeParticule[0] = _local_2;
                _local_2.Lecture(7, 10, this.Animation_Statique, _arg_1);
                if (_arg_1)
                {
                    this.AnimDroite = true;
                    this.ParticuleZone.scaleX = 1;
                    this.ParticuleZone.x = -50;
                }
                else
                {
                    this.AnimDroite = false;
                    this.ParticuleZone.scaleX = -1;
                    this.ParticuleZone.x = 50;
                };
            };
        }

        public function Animation_Danse(_arg_1:Boolean):void
        {
            if (this.Halloween)
            {
                return;
            };
            if (this.AnimVecto)
            {
                this.AnimVecto.stop();
                if (this.AnimVecto.parent)
                {
                    removeChild(this.AnimVecto);
                };
            };
            if (((this.Vide) || (this.Mort)))
            {
                return;
            };
            if (this.Grosse)
            {
                this.AnimVecto = this.Anim_Danse_G;
            }
            else
            {
                this.AnimVecto = this.Anim_Danse;
            };
            this.AnimVecto.gotoAndPlay(1);
            if (this.LookChamane)
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1.1 : -1.1);
            }
            else
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1 : -1);
            };
            this.Passage_Vecto(true);
        }

        public function Animation_Rire(_arg_1:Boolean):void
        {
            if (this.Halloween)
            {
                return;
            };
            if (this.AnimVecto)
            {
                this.AnimVecto.stop();
                if (this.AnimVecto.parent)
                {
                    removeChild(this.AnimVecto);
                };
            };
            if (((this.Vide) || (this.Mort)))
            {
                return;
            };
            if (this.Grosse)
            {
                this.AnimVecto = this.Anim_Rire_G;
            }
            else
            {
                this.AnimVecto = this.Anim_Rire;
            };
            this.AnimVecto.gotoAndPlay(1);
            if (this.LookChamane)
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1.1 : -1.1);
            }
            else
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1 : -1);
            };
            this.Passage_Vecto(true);
        }

        public function Animation_Cry(_arg_1:Boolean):void
        {
            if (this.Halloween)
            {
                return;
            };
            if (this.AnimVecto)
            {
                this.AnimVecto.stop();
                if (this.AnimVecto.parent)
                {
                    removeChild(this.AnimVecto);
                };
            };
            if (((this.Vide) || (this.Mort)))
            {
                return;
            };
            if (this.Grosse)
            {
                this.AnimVecto = this.Anim_Cry_G;
            }
            else
            {
                this.AnimVecto = this.Anim_Cry;
            };
            this.AnimVecto.gotoAndPlay(1);
            if (this.LookChamane)
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1.1 : -1.1);
            }
            else
            {
                this.AnimVecto.scaleX = ((this.AnimDroite) ? 1 : -1);
            };
            this.Passage_Vecto(true);
        }

        public function Animation_Course(_arg_1:Boolean):void
        {
            var _local_2:$Particule;
            if (((this.Vide) || (this.Mort)))
            {
                return;
            };
            this.Passage_Vecto(false);
            if (this.Saute)
            {
                this.AnimAprèsSaut = 2;
            }
            else
            {
                _local_2 = ((this.Grosse) ? this.Anim_Course_G : this.Anim_Course);
                this.ParticuleZone.ListeParticule[0] = _local_2;
                _local_2.Lecture(0);
                this.ParticuleZone.DemandeRendu = true;
            };
            if (_arg_1)
            {
                this.AnimDroite = true;
                this.ParticuleZone.scaleX = 1;
                this.ParticuleZone.x = -50;
            }
            else
            {
                this.AnimDroite = false;
                this.ParticuleZone.scaleX = -1;
                this.ParticuleZone.x = 50;
            };
        }

        public function Animation_Invocation(_arg_1:Boolean):void
        {
            if (this.Halloween)
            {
                return;
            };
            if (((this.Vide) || (this.Mort)))
            {
                return;
            };
            this.Passage_Vecto(false);
            var _local_2:$Particule = ((this.Grosse) ? this.Anim_Invoc_G : this.Anim_Invoc);
            this.ParticuleZone.ListeParticule[0] = _local_2;
            _local_2.Lecture(0);
            this.ParticuleZone.DemandeRendu = true;
            if (_arg_1)
            {
                this.AnimDroite = true;
                this.ParticuleZone.scaleX = 1;
                this.ParticuleZone.x = -50;
            }
            else
            {
                this.AnimDroite = false;
                this.ParticuleZone.scaleX = -1;
                this.ParticuleZone.x = 50;
            };
        }

        public function Vers_La_Droite(_arg_1:Boolean):Boolean
        {
            this.AnimDroite = _arg_1;
            if (_arg_1)
            {
                if (this.ParticuleZone.scaleX == -1)
                {
                    this.ParticuleZone.scaleX = 1;
                    this.ParticuleZone.x = -50;
                    return (true);
                };
            }
            else
            {
                if (this.ParticuleZone.scaleX == 1)
                {
                    this.ParticuleZone.scaleX = -1;
                    this.ParticuleZone.x = 50;
                    return (true);
                };
            };
            return (false);
        }


    }
}//package transformice.joueur

//------------------------------------------------------------
//transformice.reseau.X

package transformice.reseau
{
    public class X 
    {

        public static const $1:String = String.fromCharCode(1);
        public static const $2:String = String.fromCharCode(2);
        public static const $3:String = String.fromCharCode(3);
        public static const $4:String = String.fromCharCode(4);
        public static const $5:String = String.fromCharCode(5);
        public static const $6:String = String.fromCharCode(6);
        public static const $7:String = String.fromCharCode(7);
        public static const $8:String = String.fromCharCode(8);
        public static const $9:String = String.fromCharCode(9);
        public static const $10:String = String.fromCharCode(10);
        public static const $11:String = String.fromCharCode(11);
        public static const $12:String = String.fromCharCode(12);
        public static const $13:String = String.fromCharCode(13);
        public static const $14:String = String.fromCharCode(14);
        public static const $15:String = String.fromCharCode(15);
        public static const $16:String = String.fromCharCode(16);
        public static const $17:String = String.fromCharCode(17);
        public static const $18:String = String.fromCharCode(18);
        public static const $19:String = String.fromCharCode(19);
        public static const $20:String = String.fromCharCode(20);
        public static const $21:String = String.fromCharCode(21);
        public static const $22:String = String.fromCharCode(22);
        public static const $23:String = String.fromCharCode(23);
        public static const $24:String = String.fromCharCode(24);
        public static const $25:String = String.fromCharCode(25);
        public static const $26:String = String.fromCharCode(26);
        public static const $27:String = String.fromCharCode(27);


    }
}//package transformice.reseau

//------------------------------------------------------------
//transformice.tribus.$Tribu

package transformice.tribus
{
    import flash.xml.XMLNode;

    public class $Tribu 
    {

        public static var Code:int = 0;
        public static var Nom:String = "";
        public static var Fromages:int = 0;
        public static var Message:String = "";
        public static var Informations:XMLNode;
        public static var GradeJoueur:int = 0;
        public static var ListeGrade:Array = "#########".split("#");


        public static function Init():void
        {
            ListeGrade = Informations.attributes.G.split("#");
        }

        public static function Peut_Modifier_Message_Tribu():Boolean
        {
            return (!(ListeGrade[GradeJoueur].indexOf("m") == -1));
        }

        public static function Peut_Recruter():Boolean
        {
            return (!(ListeGrade[GradeJoueur].indexOf("I") == -1));
        }

        public static function Peut_Changer_Les_Droits():Boolean
        {
            return (!(ListeGrade[GradeJoueur].indexOf("D") == -1));
        }

        public static function Peut_Exclure():Boolean
        {
            return (!(ListeGrade[GradeJoueur].indexOf("E") == -1));
        }


    }
}//package transformice.tribus

//------------------------------------------------------------
//$Base64

package 
{
    import flash.utils.ByteArray;

    public class $Base64 
    {

        private static const BASE64_CHARS:String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        public static const version:String = "1.1.0";


        public static function encode(_arg_1:String):String
        {
            var _local_2:ByteArray = new ByteArray();
            _local_2.writeUTFBytes(_arg_1);
            return (encodeByteArray(_local_2));
        }

        public static function encodeByteArray(_arg_1:ByteArray):String
        {
            var _local_3:Array;
            var _local_5:uint;
            var _local_6:uint;
            var _local_7:uint;
            var _local_2:* = "";
            var _local_4:Array = new Array(4);
            _arg_1.position = 0;
            while (_arg_1.bytesAvailable > 0)
            {
                _local_3 = new Array();
                _local_5 = 0;
                while (((_local_5 < 3) && (_arg_1.bytesAvailable > 0)))
                {
                    _local_3[_local_5] = _arg_1.readUnsignedByte();
                    _local_5++;
                };
                _local_4[0] = ((_local_3[0] & 0xFC) >> 2);
                _local_4[1] = (((_local_3[0] & 0x03) << 4) | (_local_3[1] >> 4));
                _local_4[2] = (((_local_3[1] & 0x0F) << 2) | (_local_3[2] >> 6));
                _local_4[3] = (_local_3[2] & 0x3F);
                _local_6 = _local_3.length;
                while (_local_6 < 3)
                {
                    _local_4[(_local_6 + 1)] = 64;
                    _local_6++;
                };
                _local_7 = 0;
                while (_local_7 < _local_4.length)
                {
                    _local_2 = (_local_2 + BASE64_CHARS.charAt(_local_4[_local_7]));
                    _local_7++;
                };
            };
            return (_local_2);
        }

        public static function decode(_arg_1:String):String
        {
            var _local_2:ByteArray = decodeToByteArray(_arg_1);
            return (_local_2.readUTFBytes(_local_2.length));
        }

        public static function decodeToByteArray(_arg_1:String):ByteArray
        {
            var _local_6:uint;
            var _local_7:uint;
            var _local_2:ByteArray = new ByteArray();
            var _local_3:Array = new Array(4);
            var _local_4:Array = new Array(3);
            var _local_5:uint;
            while (_local_5 < _arg_1.length)
            {
                _local_6 = 0;
                while (((_local_6 < 4) && ((_local_5 + _local_6) < _arg_1.length)))
                {
                    _local_3[_local_6] = BASE64_CHARS.indexOf(_arg_1.charAt((_local_5 + _local_6)));
                    _local_6++;
                };
                _local_4[0] = ((_local_3[0] << 2) + ((_local_3[1] & 0x30) >> 4));
                _local_4[1] = (((_local_3[1] & 0x0F) << 4) + ((_local_3[2] & 0x3C) >> 2));
                _local_4[2] = (((_local_3[2] & 0x03) << 6) + _local_3[3]);
                _local_7 = 0;
                while (_local_7 < _local_4.length)
                {
                    if (_local_3[(_local_7 + 1)] == 64) break;
                    _local_2.writeByte(_local_4[_local_7]);
                    _local_7++;
                };
                _local_5 = (_local_5 + 4);
            };
            _local_2.position = 0;
            return (_local_2);
        }


    }
}//package 

//------------------------------------------------------------
//$Hash

package 
{
    public class $Hash 
    {

        public function $Hash()
        {
            trace(((((('Test with str "test":\n[SHA256]\n' + SHA256("test")) + "\n\n[SHA1]\n") + SHA1("test")) + "\n\n[MD5]\n") + MD5("test")));
        }

        public static function SHA256(plainStr:*):*
        {
            var cs:* = undefined;
            var a:* = undefined;
            var b:* = undefined;
            var c:* = undefined;
            var d:* = undefined;
            var e:* = undefined;
            var f:* = undefined;
            var g:* = undefined;
            var h:* = undefined;
            var i:* = undefined;
            var j:* = undefined;
            var T1:* = undefined;
            var T2:* = undefined;
            var core_j:uint;
            var safe_add:Function = function (_arg_1:*, _arg_2:*):*
            {
                var _local_3:* = ((_arg_1 & 0xFFFF) + (_arg_2 & 0xFFFF));
                var _local_4:* = (((_arg_1 >> 16) + (_arg_2 >> 16)) + (_local_3 >> 16));
                return ((_local_4 << 16) | (_local_3 & 0xFFFF));
            };
            var S:Function = function (_arg_1:*, _arg_2:*):*
            {
                return ((_arg_1 >>> _arg_2) | (_arg_1 << (32 - _arg_2)));
            };
            var R:Function = function (_arg_1:*, _arg_2:*):*
            {
                return (_arg_1 >>> _arg_2);
            };
            var Ch:Function = function (_arg_1:*, _arg_2:*, _arg_3:*):*
            {
                return ((_arg_1 & _arg_2) ^ ((~(_arg_1)) & _arg_3));
            };
            var Maj:Function = function (_arg_1:*, _arg_2:*, _arg_3:*):*
            {
                return (((_arg_1 & _arg_2) ^ (_arg_1 & _arg_3)) ^ (_arg_2 & _arg_3));
            };
            var sig0256:Function = function (_arg_1:*):*
            {
                return ((S(_arg_1, 2) ^ S(_arg_1, 13)) ^ S(_arg_1, 22));
            };
            var sig1256:Function = function (_arg_1:*):*
            {
                return ((S(_arg_1, 6) ^ S(_arg_1, 11)) ^ S(_arg_1, 25));
            };
            var gam0256:Function = function (_arg_1:*):*
            {
                return ((S(_arg_1, 7) ^ S(_arg_1, 18)) ^ R(_arg_1, 3));
            };
            var gam1256:Function = function (_arg_1:*):*
            {
                return ((S(_arg_1, 17) ^ S(_arg_1, 19)) ^ R(_arg_1, 10));
            };
            var convString:Function = function (_arg_1:*):*
            {
                var _local_2:* = new Array();
                var _local_3:* = ((1 << cs) - 1);
                var _local_4:* = 0;
                while (_local_4 < (_arg_1.length * cs))
                {
                    _local_2[(_local_4 >> 5)] = (_local_2[(_local_4 >> 5)] | ((_arg_1.charCodeAt((_local_4 / cs)) & _local_3) << (24 - (_local_4 % 32))));
                    _local_4 = (_local_4 + cs);
                };
                return (_local_2);
            };
            var binb2hex:Function = function (_arg_1:*):*
            {
                var _local_2:* = "0123456789abcdef";
                var _local_3:* = "";
                var _local_4:uint;
                while (_local_4 < (_arg_1.length * 4))
                {
                    _local_3 = (_local_3 + (_local_2.charAt(((_arg_1[(_local_4 >> 2)] >> (((3 - (_local_4 % 4)) * 8) + 4)) & 0x0F)) + _local_2.charAt(((_arg_1[(_local_4 >> 2)] >> ((3 - (_local_4 % 4)) * 8)) & 0x0F))));
                    _local_4++;
                };
                return (_local_3);
            };
            cs = 8;
            plainStr = enc_utf8(String(plainStr));
            var m:* = convString(plainStr);
            var l:* = (plainStr.length * cs);
            var K:Array = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298);
            var h_arr:Array = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225);
            var W:Array = new Array(64);
            m[(l >> 5)] = (m[(l >> 5)] | (128 << (24 - (l % 32))));
            m[((((l + 64) >> 9) << 4) + 15)] = l;
            var core_i:uint;
            while (core_i < m.length)
            {
                a = h_arr[0];
                b = h_arr[1];
                c = h_arr[2];
                d = h_arr[3];
                e = h_arr[4];
                f = h_arr[5];
                g = h_arr[6];
                h = h_arr[7];
                core_j = 0;
                while (core_j < 64)
                {
                    if (core_j < 16)
                    {
                        W[core_j] = m[(core_j + core_i)];
                    }
                    else
                    {
                        W[core_j] = safe_add(safe_add(safe_add(gam1256(W[(core_j - 2)]), W[(core_j - 7)]), gam0256(W[(core_j - 15)])), W[(core_j - 16)]);
                    };
                    T1 = safe_add(safe_add(safe_add(safe_add(h, sig1256(e)), Ch(e, f, g)), K[core_j]), W[core_j]);
                    T2 = safe_add(sig0256(a), Maj(a, b, c));
                    h = g;
                    g = f;
                    f = e;
                    e = safe_add(d, T1);
                    d = c;
                    c = b;
                    b = a;
                    a = safe_add(T1, T2);
                    core_j++;
                };
                h_arr[0] = safe_add(a, h_arr[0]);
                h_arr[1] = safe_add(b, h_arr[1]);
                h_arr[2] = safe_add(c, h_arr[2]);
                h_arr[3] = safe_add(d, h_arr[3]);
                h_arr[4] = safe_add(e, h_arr[4]);
                h_arr[5] = safe_add(f, h_arr[5]);
                h_arr[6] = safe_add(g, h_arr[6]);
                h_arr[7] = safe_add(h, h_arr[7]);
                core_i = (core_i + 16);
            };
            return (binb2hex(h_arr));
        }

        public static function SHA1(plainStr:String):*
        {
            var blockstart:* = undefined;
            var i:uint;
            var j:* = undefined;
            var A:* = undefined;
            var B:* = undefined;
            var C:* = undefined;
            var D:* = undefined;
            var E:* = undefined;
            var temp:* = undefined;
            var lsb_hex:Function = function (_arg_1:*):*
            {
                var _local_3:*;
                var _local_4:*;
                var _local_5:*;
                var _local_2:* = "";
                _local_3 = 0;
                while (_local_3 <= 6)
                {
                    _local_4 = ((_arg_1 >>> ((_local_3 * 4) + 4)) & 0x0F);
                    _local_5 = ((_arg_1 >>> (_local_3 * 4)) & 0x0F);
                    _local_2 = (_local_2 + (_local_4.toString(16) + _local_5.toString(16)));
                    _local_3 = (_local_3 + 2);
                };
                return (_local_2);
            };
            var cvt_hex:Function = function (_arg_1:*):*
            {
                var _local_3:*;
                var _local_4:*;
                var _local_2:* = "";
                _local_3 = 7;
                while (_local_3 >= 0)
                {
                    _local_4 = ((_arg_1 >>> (_local_3 * 4)) & 0x0F);
                    _local_2 = (_local_2 + _local_4.toString(16));
                    _local_3--;
                };
                return (_local_2);
            };
            var W:* = new Array(80);
            var H0:* = 1732584193;
            var H1:* = 4023233417;
            var H2:* = 2562383102;
            var H3:* = 271733878;
            var H4:* = 3285377520;
            plainStr = enc_utf8(plainStr);
            var plainStr_len:* = plainStr.length;
            var word_array:* = new Array();
            i = 0;
            while (i < (plainStr_len - 3))
            {
                j = ((((plainStr.charCodeAt(i) << 24) | (plainStr.charCodeAt((i + 1)) << 16)) | (plainStr.charCodeAt((i + 2)) << 8)) | plainStr.charCodeAt((i + 3)));
                word_array.push(j);
                i = (i + 4);
            };
            switch ((plainStr_len % 4))
            {
                case 0:
                    i = 0x80000000;
                    break;
                case 1:
                    i = ((plainStr.charCodeAt((plainStr_len - 1)) << 24) | 0x800000);
                    break;
                case 2:
                    i = (((plainStr.charCodeAt((plainStr_len - 2)) << 24) | (plainStr.charCodeAt((plainStr_len - 1)) << 16)) | 0x8000);
                    break;
                case 3:
                    i = ((((plainStr.charCodeAt((plainStr_len - 3)) << 24) | (plainStr.charCodeAt((plainStr_len - 2)) << 16)) | (plainStr.charCodeAt((plainStr_len - 1)) << 8)) | 0x80);
                    break;
            };
            word_array.push(i);
            while ((word_array.length % 16) != 14)
            {
                word_array.push(0);
            };
            word_array.push((plainStr_len >>> 29));
            word_array.push(((plainStr_len << 3) & 0xFFFFFFFF));
            blockstart = 0;
            while (blockstart < word_array.length)
            {
                i = 0;
                while (i < 16)
                {
                    W[i] = word_array[(blockstart + i)];
                    i++;
                };
                i = 16;
                while (i <= 79)
                {
                    W[i] = rol((((W[(i - 3)] ^ W[(i - 8)]) ^ W[(i - 14)]) ^ W[(i - 16)]), 1);
                    i++;
                };
                A = H0;
                B = H1;
                C = H2;
                D = H3;
                E = H4;
                i = 0;
                while (i <= 19)
                {
                    temp = (((((rol(A, 5) + ((B & C) | ((~(B)) & D))) + E) + W[i]) + 1518500249) & 0xFFFFFFFF);
                    E = D;
                    D = C;
                    C = rol(B, 30);
                    B = A;
                    A = temp;
                    i++;
                };
                i = 20;
                while (i <= 39)
                {
                    temp = (((((rol(A, 5) + ((B ^ C) ^ D)) + E) + W[i]) + 1859775393) & 0xFFFFFFFF);
                    E = D;
                    D = C;
                    C = rol(B, 30);
                    B = A;
                    A = temp;
                    i++;
                };
                i = 40;
                while (i <= 59)
                {
                    temp = (((((rol(A, 5) + (((B & C) | (B & D)) | (C & D))) + E) + W[i]) + 2400959708) & 0xFFFFFFFF);
                    E = D;
                    D = C;
                    C = rol(B, 30);
                    B = A;
                    A = temp;
                    i++;
                };
                i = 60;
                while (i <= 79)
                {
                    temp = (((((rol(A, 5) + ((B ^ C) ^ D)) + E) + W[i]) + 3395469782) & 0xFFFFFFFF);
                    E = D;
                    D = C;
                    C = rol(B, 30);
                    B = A;
                    A = temp;
                    i++;
                };
                H0 = ((H0 + A) & 0xFFFFFFFF);
                H1 = ((H1 + B) & 0xFFFFFFFF);
                H2 = ((H2 + C) & 0xFFFFFFFF);
                H3 = ((H3 + D) & 0xFFFFFFFF);
                H4 = ((H4 + E) & 0xFFFFFFFF);
                blockstart = (blockstart + 16);
            };
            temp = ((((cvt_hex(H0) + cvt_hex(H1)) + cvt_hex(H2)) + cvt_hex(H3)) + cvt_hex(H4));
            return (temp.toLowerCase());
        }

        public static function MD5(_arg_1:String):String
        {
            var _local_6:int;
            var _local_7:int;
            var _local_8:int;
            var _local_9:int;
            var _local_2:* = 1732584193;
            var _local_3:* = -271733879;
            var _local_4:* = -1732584194;
            var _local_5:* = 271733878;
            var _local_10:Array = createBlocks(_arg_1);
            var _local_11:int = _local_10.length;
            var _local_12:int;
            while (_local_12 < _local_11)
            {
                _local_6 = _local_2;
                _local_7 = _local_3;
                _local_8 = _local_4;
                _local_9 = _local_5;
                _local_2 = ff(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 0)], 7, -680876936);
                _local_5 = ff(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 1)], 12, -389564586);
                _local_4 = ff(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 2)], 17, 606105819);
                _local_3 = ff(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 3)], 22, -1044525330);
                _local_2 = ff(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 4)], 7, -176418897);
                _local_5 = ff(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 5)], 12, 1200080426);
                _local_4 = ff(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 6)], 17, -1473231341);
                _local_3 = ff(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 7)], 22, -45705983);
                _local_2 = ff(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 8)], 7, 1770035416);
                _local_5 = ff(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 9)], 12, -1958414417);
                _local_4 = ff(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 10)], 17, -42063);
                _local_3 = ff(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 11)], 22, -1990404162);
                _local_2 = ff(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 12)], 7, 1804603682);
                _local_5 = ff(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 13)], 12, -40341101);
                _local_4 = ff(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 14)], 17, -1502002290);
                _local_3 = ff(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 15)], 22, 1236535329);
                _local_2 = gg(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 1)], 5, -165796510);
                _local_5 = gg(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 6)], 9, -1069501632);
                _local_4 = gg(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 11)], 14, 643717713);
                _local_3 = gg(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 0)], 20, -373897302);
                _local_2 = gg(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 5)], 5, -701558691);
                _local_5 = gg(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 10)], 9, 38016083);
                _local_4 = gg(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 15)], 14, -660478335);
                _local_3 = gg(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 4)], 20, -405537848);
                _local_2 = gg(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 9)], 5, 568446438);
                _local_5 = gg(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 14)], 9, -1019803690);
                _local_4 = gg(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 3)], 14, -187363961);
                _local_3 = gg(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 8)], 20, 1163531501);
                _local_2 = gg(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 13)], 5, -1444681467);
                _local_5 = gg(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 2)], 9, -51403784);
                _local_4 = gg(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 7)], 14, 1735328473);
                _local_3 = gg(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 12)], 20, -1926607734);
                _local_2 = hh(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 5)], 4, -378558);
                _local_5 = hh(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 8)], 11, -2022574463);
                _local_4 = hh(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 11)], 16, 1839030562);
                _local_3 = hh(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 14)], 23, -35309556);
                _local_2 = hh(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 1)], 4, -1530992060);
                _local_5 = hh(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 4)], 11, 1272893353);
                _local_4 = hh(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 7)], 16, -155497632);
                _local_3 = hh(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 10)], 23, -1094730640);
                _local_2 = hh(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 13)], 4, 681279174);
                _local_5 = hh(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 0)], 11, -358537222);
                _local_4 = hh(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 3)], 16, -722521979);
                _local_3 = hh(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 6)], 23, 76029189);
                _local_2 = hh(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 9)], 4, -640364487);
                _local_5 = hh(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 12)], 11, -421815835);
                _local_4 = hh(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 15)], 16, 530742520);
                _local_3 = hh(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 2)], 23, -995338651);
                _local_2 = ii(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 0)], 6, -198630844);
                _local_5 = ii(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 7)], 10, 1126891415);
                _local_4 = ii(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 14)], 15, -1416354905);
                _local_3 = ii(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 5)], 21, -57434055);
                _local_2 = ii(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 12)], 6, 1700485571);
                _local_5 = ii(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 3)], 10, -1894986606);
                _local_4 = ii(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 10)], 15, -1051523);
                _local_3 = ii(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 1)], 21, -2054922799);
                _local_2 = ii(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 8)], 6, 1873313359);
                _local_5 = ii(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 15)], 10, -30611744);
                _local_4 = ii(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 6)], 15, -1560198380);
                _local_3 = ii(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 13)], 21, 1309151649);
                _local_2 = ii(_local_2, _local_3, _local_4, _local_5, _local_10[(_local_12 + 4)], 6, -145523070);
                _local_5 = ii(_local_5, _local_2, _local_3, _local_4, _local_10[(_local_12 + 11)], 10, -1120210379);
                _local_4 = ii(_local_4, _local_5, _local_2, _local_3, _local_10[(_local_12 + 2)], 15, 718787259);
                _local_3 = ii(_local_3, _local_4, _local_5, _local_2, _local_10[(_local_12 + 9)], 21, -343485551);
                _local_2 = (_local_2 + _local_6);
                _local_3 = (_local_3 + _local_7);
                _local_4 = (_local_4 + _local_8);
                _local_5 = (_local_5 + _local_9);
                _local_12 = (_local_12 + 16);
            };
            return (((toHex(_local_2) + toHex(_local_3)) + toHex(_local_4)) + toHex(_local_5));
        }

        private static function f(_arg_1:int, _arg_2:int, _arg_3:int):int
        {
            return ((_arg_1 & _arg_2) | ((~(_arg_1)) & _arg_3));
        }

        private static function g(_arg_1:int, _arg_2:int, _arg_3:int):int
        {
            return ((_arg_1 & _arg_3) | (_arg_2 & (~(_arg_3))));
        }

        private static function h(_arg_1:int, _arg_2:int, _arg_3:int):int
        {
            return ((_arg_1 ^ _arg_2) ^ _arg_3);
        }

        private static function i(_arg_1:int, _arg_2:int, _arg_3:int):int
        {
            return (_arg_2 ^ (_arg_1 | (~(_arg_3))));
        }

        private static function transform(_arg_1:Function, _arg_2:int, _arg_3:int, _arg_4:int, _arg_5:int, _arg_6:int, _arg_7:int, _arg_8:int):int
        {
            var _local_9:int = (((_arg_2 + int(_arg_1(_arg_3, _arg_4, _arg_5))) + _arg_6) + _arg_8);
            return (rol(_local_9, _arg_7) + _arg_3);
        }

        private static function ff(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int, _arg_5:int, _arg_6:int, _arg_7:int):int
        {
            return (transform(f, _arg_1, _arg_2, _arg_3, _arg_4, _arg_5, _arg_6, _arg_7));
        }

        private static function gg(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int, _arg_5:int, _arg_6:int, _arg_7:int):int
        {
            return (transform(g, _arg_1, _arg_2, _arg_3, _arg_4, _arg_5, _arg_6, _arg_7));
        }

        private static function hh(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int, _arg_5:int, _arg_6:int, _arg_7:int):int
        {
            return (transform(h, _arg_1, _arg_2, _arg_3, _arg_4, _arg_5, _arg_6, _arg_7));
        }

        private static function ii(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int, _arg_5:int, _arg_6:int, _arg_7:int):int
        {
            return (transform(i, _arg_1, _arg_2, _arg_3, _arg_4, _arg_5, _arg_6, _arg_7));
        }

        private static function createBlocks(_arg_1:String):Array
        {
            var _local_2:Array = new Array();
            var _local_3:int = (_arg_1.length * 8);
            var _local_4:* = 0xFF;
            var _local_5:int;
            while (_local_5 < _local_3)
            {
                _local_2[(_local_5 >> 5)] = (_local_2[(_local_5 >> 5)] | ((_arg_1.charCodeAt((_local_5 / 8)) & _local_4) << (_local_5 % 32)));
                _local_5 = (_local_5 + 8);
            };
            _local_2[(_local_3 >> 5)] = (_local_2[(_local_3 >> 5)] | (128 << (_local_3 % 32)));
            _local_2[((((_local_3 + 64) >>> 9) << 4) + 14)] = _local_3;
            return (_local_2);
        }

        private static function rol(_arg_1:int, _arg_2:int):int
        {
            return ((_arg_1 << _arg_2) | (_arg_1 >>> (32 - _arg_2)));
        }

        private static function toHex(_arg_1:int, _arg_2:Boolean=false):String
        {
            var _local_5:int;
            var _local_6:int;
            var _local_3:* = "";
            var _local_4:* = "0123456789abcdef";
            if (_arg_2)
            {
                _local_5 = 0;
                while (_local_5 < 4)
                {
                    _local_3 = (_local_3 + (_local_4.charAt(((_arg_1 >> (((3 - _local_5) * 8) + 4)) & 0x0F)) + _local_4.charAt(((_arg_1 >> ((3 - _local_5) * 8)) & 0x0F))));
                    _local_5++;
                };
            }
            else
            {
                _local_6 = 0;
                while (_local_6 < 4)
                {
                    _local_3 = (_local_3 + (_local_4.charAt(((_arg_1 >> ((_local_6 * 8) + 4)) & 0x0F)) + _local_4.charAt(((_arg_1 >> (_local_6 * 8)) & 0x0F))));
                    _local_6++;
                };
            };
            return (_local_3);
        }

        private static function enc_utf8(_arg_1:*):*
        {
            var _local_4:*;
            var _local_2:* = "";
            var _local_3:uint;
            while (_local_3 < _arg_1.length)
            {
                _local_4 = _arg_1.charCodeAt(_local_3);
                if (_local_4 < 128)
                {
                    _local_2 = (_local_2 + String.fromCharCode(_local_4));
                }
                else
                {
                    if (((_local_4 > 127) && (_local_4 < 0x0800)))
                    {
                        _local_2 = (_local_2 + String.fromCharCode(((_local_4 >> 6) | 0xC0)));
                        _local_2 = (_local_2 + String.fromCharCode(((_local_4 & 0x3F) | 0x80)));
                    }
                    else
                    {
                        _local_2 = (_local_2 + String.fromCharCode(((_local_4 >> 12) | 0xE0)));
                        _local_2 = (_local_2 + String.fromCharCode((((_local_4 >> 6) & 0x3F) | 0x80)));
                        _local_2 = (_local_2 + String.fromCharCode(((_local_4 & 0x3F) | 0x80)));
                    };
                };
                _local_3++;
            };
            return (_local_2);
        }


    }
}//package 

//------------------------------------------------------------
//$IPS

package 
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.utils.getTimer;
    import flash.system.System;
    import flash.profiler.showRedrawRegions;
    import flash.profiler.*;

    public class $IPS extends Sprite 
    {

        private var TempsZero:int;
        private var Largeur:int;
        private var Hauteur:int;
        private var ListeCouleur:Array = new Array(7108545, 0x9D9D, 13325419);
        private var Graphique:Sprite = new Sprite();
        private var Cadre:Sprite = new Sprite();
        private var ListeCourbe:Array = new Array();
        private var CourbeIPS:Array = new Array();
        private var Decalage:Array = new Array();
        private var CourbeSpéciale:Array;
        private var DecalageX:int;
        private var DecalageY:int;
        private var Mémoire:TextField = new TextField();
        private var TexteIPS:TextField = new TextField();
        private var NbImage:int = 0;
        private var TempsImage:int = 0;
        private var ISBase:int;
        private var Retracage:Boolean = false;

        public function $IPS(_arg_1:int, _arg_2:int, _arg_3:int)
        {
            this.ISBase = _arg_3;
            this.Largeur = _arg_1;
            this.Hauteur = _arg_2;
            mouseChildren = false;
            addChild(this.Graphique);
            graphics.beginFill(0, 0.8);
            graphics.drawRoundRect(-1, 0, this.Largeur, (this.Hauteur + 2), 10, 10);
            graphics.endFill();
            this.Cadre.addChild(this.Mémoire);
            this.Mémoire.x = 5;
            this.Mémoire.y = (this.Hauteur - 20);
            this.Mémoire.selectable = false;
            this.Mémoire.multiline = false;
            this.Mémoire.width = 50;
            this.Mémoire.height = 22;
            this.Mémoire.thickness = 200;
            this.Cadre.addChild(this.TexteIPS);
            this.TexteIPS.x = 10;
            this.TexteIPS.selectable = false;
            this.TexteIPS.multiline = false;
            this.TexteIPS.width = 50;
            this.TexteIPS.height = 22;
            this.TexteIPS.thickness = 200;
            addChild(this.Cadre);
            this.Cadre.graphics.lineStyle(2, 0, 1, true);
            this.Cadre.graphics.beginFill(0, 0.7);
            this.Cadre.graphics.drawRoundRect(-1, 0, 40, (this.Hauteur + 2), 10, 10);
            this.Cadre.graphics.endFill();
            this.Cadre.graphics.lineStyle(1, 12078546, 0.8, true);
            this.Cadre.graphics.moveTo(0, (this.Hauteur - Math.ceil((1000 / _arg_3))));
            this.Cadre.graphics.lineTo(this.Largeur, (this.Hauteur - Math.ceil((1000 / _arg_3))));
            this.Cadre.graphics.lineStyle(2, 0, 1, true);
            this.Cadre.graphics.drawRoundRect(-1, 0, this.Largeur, (this.Hauteur + 2), 10, 10);
            this.Graphique.graphics.lineStyle(1);
            addEventListener(MouseEvent.MOUSE_DOWN, this.Clique);
        }

        public function Nouvelle_Valeur(_arg_1:int, _arg_2:Boolean=false):void
        {
            var _local_4:Array;
            var _local_5:int;
            var _local_3:int = getTimer();
            if (_arg_1 == -1)
            {
                if ((_local_3 - this.TempsImage) > 1000)
                {
                    this.TempsImage = (this.TempsImage + 1000);
                    if (this.NbImage < (this.ISBase * 0.6))
                    {
                        this.TexteIPS.htmlText = ("<font face='Verdana' size='10' color='#F83F43' >" + this.NbImage);
                    }
                    else
                    {
                        if (this.NbImage < (this.ISBase * 0.8))
                        {
                            this.TexteIPS.htmlText = ("<font face='Verdana' size='10' color='#F7DB40' >" + this.NbImage);
                        }
                        else
                        {
                            this.TexteIPS.htmlText = ("<font face='Verdana' size='10' color='#2F7FCC' >" + this.NbImage);
                        };
                    };
                    this.NbImage = 0;
                };
                this.NbImage++;
                if (this.TempsZero == 0)
                {
                    this.TempsZero = _local_3;
                }
                else
                {
                    this.CourbeIPS.push((_local_3 - this.TempsZero));
                    this.TempsZero = _local_3;
                    if (this.CourbeIPS.length > this.Largeur)
                    {
                        this.CourbeIPS.shift();
                    };
                };
            }
            else
            {
                _local_4 = this.ListeCourbe[_arg_1];
                if (_local_4 == null)
                {
                    _local_4 = new Array();
                    this.ListeCourbe[_arg_1] = _local_4;
                };
                if (_arg_2)
                {
                    _local_4.push(_local_3);
                    if (_local_4.length > this.Largeur)
                    {
                        _local_4.shift();
                    };
                }
                else
                {
                    _local_5 = (_local_4.length - 1);
                    _local_4[_local_5] = (_local_3 - _local_4[_local_5]);
                };
            };
        }

        public function Courbe_Spéciale(_arg_1:int):void
        {
            if (!this.CourbeSpéciale)
            {
                this.CourbeSpéciale = new Array();
            };
            this.CourbeSpéciale.push(_arg_1);
            if (this.CourbeSpéciale.length > this.Largeur)
            {
                this.CourbeSpéciale.shift();
            };
        }

        public function Rendu():void
        {
            this.Mémoire.htmlText = ("<font face='Verdana' size='10' color='#6C77C1' >" + (int((System.totalMemory / 100000)) / 10));
            this.Graphique.graphics.clear();
            this.Graphique.graphics.lineStyle(1, 0xFFFFFF, 1, true);
            var _local_1:int;
            this.Tracage_Courbe(this.CourbeIPS);
            var _local_2:int = this.ListeCourbe.length;
            var _local_3:int;
            while (_local_3 < _local_2)
            {
                this.Graphique.graphics.lineStyle(1, this.ListeCouleur[_local_3], 1, true);
                if (_local_3 == 0)
                {
                    this.Tracage_Courbe(this.ListeCourbe[_local_3], false, true);
                }
                else
                {
                    this.Tracage_Courbe(this.ListeCourbe[_local_3], true);
                };
                _local_3++;
            };
            if (this.CourbeSpéciale)
            {
                this.Graphique.graphics.lineStyle(1, 15558634, 1, true);
                this.Tracage_Courbe(this.CourbeSpéciale);
            };
        }

        private function Tracage_Courbe(_arg_1:Array, _arg_2:Boolean=false, _arg_3:Boolean=false):void
        {
            var _local_5:int;
            var _local_6:int;
            var _local_4:int = _arg_1.length;
            if (_local_4 > 0)
            {
                this.Graphique.graphics.moveTo(0, (this.Hauteur - _arg_1[0]));
                _local_5 = 0;
                while (_local_5 < _local_4)
                {
                    _local_6 = _arg_1[_local_5];
                    if (_arg_3)
                    {
                        this.Decalage[_local_5] = _local_6;
                        this.Graphique.graphics.lineTo(_local_5, (this.Hauteur - _local_6));
                    }
                    else
                    {
                        if (_arg_2)
                        {
                            this.Decalage[_local_5] = (this.Decalage[_local_5] + _local_6);
                            this.Graphique.graphics.lineTo(_local_5, (this.Hauteur - this.Decalage[_local_5]));
                        }
                        else
                        {
                            this.Graphique.graphics.lineTo(_local_5, (this.Hauteur - _local_6));
                        };
                    };
                    _local_5++;
                };
            };
        }

        private function Clique(_arg_1:MouseEvent):void
        {
            if (mouseX < 40)
            {
                this.Retracage = (!(this.Retracage));
                showRedrawRegions(this.Retracage, 17595);
            }
            else
            {
                this.DecalageX = mouseX;
                this.DecalageY = mouseY;
                stage.addEventListener(MouseEvent.MOUSE_MOVE, this.Boucle_Souris);
                stage.addEventListener(MouseEvent.MOUSE_UP, this.Declique);
            };
        }

        private function Declique(_arg_1:MouseEvent):void
        {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.Boucle_Souris);
            stage.removeEventListener(MouseEvent.MOUSE_UP, this.Declique);
        }

        private function Boucle_Souris(_arg_1:MouseEvent):void
        {
            x = (stage.mouseX - this.DecalageX);
            y = (stage.mouseY - this.DecalageY);
            _arg_1.updateAfterEvent();
        }


    }
}//package 

//------------------------------------------------------------
//$Particule

package 
{
    import flash.display.BitmapData;
    import flash.geom.Rectangle;
    import flash.utils.getTimer;

    public class $Particule 
    {

        public var ParticuleBase:$ParticuleZero;
        public var Destruction:Boolean = false;
        public var Image:BitmapData;
        public var ImageParticuleEnCours:$ParticuleImage;
        public var ListeImage:Array;
        public var NombreImage:int;
        public var ImageEnCours:int;
        public var Boucle:Boolean;
        public var Repetition:Boolean = true;
        public var Largeur:int;
        public var Hauteur:int;
        public var TempsZero:int;
        public var Zone:Rectangle;
        public var LectureEnCours:Boolean;
        public var Liaison:Boolean = false;
        public var ListeLiaison:Array;
        public var ParticuleLiée:$Particule;
        public var FonctionActive:Boolean = false;
        public var ZoneParticule:$ParticuleZone;
        public var Variable1:int;
        public var Variable2:int;
        public var Variable3:int;
        public var ImageStop:int = 0;
        public var Fonction:Function;
        public var Param:Object;
        public var ZeroX:int = 0;
        public var ZeroY:int = 0;
        public var x:Number = 0;
        public var y:Number = 0;
        public var Vx:Number = 0;
        public var Vy:Number = 0;
        public var Ax:Number = 0;
        public var Ay:Number = 0;
        public var Fx:Number = 0;
        public var Fy:Number = 0;
        public var Vmax:Number = 0;
        public var LimiteY:int;
        public var Gravité:Boolean = true;

        public function $Particule(_arg_1:$ParticuleZero, _arg_2:Boolean=true)
        {
            this.TempsZero = getTimer();
            this.ParticuleBase = _arg_1;
            this.Boucle = _arg_2;
            this.LectureEnCours = true;
            this.ListeImage = _arg_1.ListeImage;
            this.NombreImage = this.ListeImage.length;
            this.ImageEnCours = 0;
            this.Largeur = _arg_1.Largeur;
            this.Hauteur = _arg_1.Hauteur;
            this.Zone = _arg_1.Zone;
            this.ZeroX = _arg_1.BaseX;
            this.ZeroY = _arg_1.BaseY;
        }

        public function Stop(_arg_1:int):void
        {
            this.LectureEnCours = false;
            if (_arg_1 < 0)
            {
                this.ImageEnCours = 0;
            }
            else
            {
                if (_arg_1 >= this.NombreImage)
                {
                    this.ImageEnCours = (this.NombreImage - 1);
                }
                else
                {
                    this.ImageEnCours = _arg_1;
                };
            };
            this.ImageParticuleEnCours = this.ListeImage[this.ImageEnCours];
            if (!this.ImageParticuleEnCours.Dessinée)
            {
                this.ImageParticuleEnCours.Rendu();
            };
            this.Image = this.ImageParticuleEnCours.ImageData;
        }

        public function Lecture(_arg_1:int, _arg_2:int=0, _arg_3:Function=null, _arg_4:Object=null):void
        {
            this.ImageStop = _arg_2;
            this.Fonction = _arg_3;
            this.Param = _arg_4;
            this.LectureEnCours = true;
            if (_arg_1 < 0)
            {
                this.ImageEnCours = 0;
            }
            else
            {
                if (_arg_1 >= this.NombreImage)
                {
                    this.ImageEnCours = (this.NombreImage - 1);
                }
                else
                {
                    this.ImageEnCours = _arg_1;
                };
            };
            this.ImageParticuleEnCours = this.ListeImage[this.ImageEnCours];
            if (!this.ImageParticuleEnCours.Dessinée)
            {
                this.ImageParticuleEnCours.Rendu();
            };
            this.Image = this.ImageParticuleEnCours.ImageData;
        }


    }
}//package 

//------------------------------------------------------------
//$ParticuleImage

package 
{
    import flash.display.BitmapData;
    import flash.geom.Rectangle;
    import flash.display.MovieClip;
    import flash.display.Sprite;

    public class $ParticuleImage 
    {

        public var ImageData:BitmapData;
        public var ZeroX:int = 0;
        public var ZeroY:int = 0;
        public var LienX:int = 0;
        public var LienY:int = 0;
        public var Largeur:int;
        public var Hauteur:int;
        public var Zone:Rectangle;
        public var Colle:Boolean = false;
        public var ColleX:int;
        public var ColleY:int;
        public var Dessinée:Boolean = false;
        public var ClipCible:MovieClip;
        public var NumImage:int;
        public var ClipBase:Sprite;
        public var DecalageX:int;
        public var DecalageY:int;

        public function $ParticuleImage(_arg_1:Boolean=false)
        {
            this.Dessinée = (!(_arg_1));
        }

        public function Rendu():void
        {
            this.Dessinée = true;
            this.ClipBase = new Sprite();
            this.ClipBase.addChild(this.ClipCible);
            this.GotoAndStop(this.ClipCible, this.NumImage);
            var _local_1:Rectangle = this.ClipCible.getRect(this.ClipCible);
            this.Largeur = (Math.ceil(_local_1.width) + 4);
            this.Hauteur = (Math.ceil(_local_1.height) + 4);
            this.Zone = new Rectangle(0, 0, this.Largeur, this.Hauteur);
            this.ZeroX = Math.round((this.DecalageX + _local_1.x));
            this.ZeroY = Math.round((this.DecalageY + _local_1.y));
            this.ClipCible.x = (2 - this.ZeroX);
            this.ClipCible.y = (2 - this.ZeroY);
            this.ImageData = new BitmapData(this.Largeur, this.Hauteur, true, 0);
            this.ImageData.draw(this.ClipBase);
            this.ClipBase = null;
            this.ClipCible = null;
        }

        private function GotoAndStop(_arg_1:MovieClip, _arg_2:int=0):void
        {
            var _local_5:MovieClip;
            if (_arg_2)
            {
                _arg_1.gotoAndStop(_arg_2);
            }
            else
            {
                _arg_1.gotoAndStop(((_arg_1.currentFrame + 1) % (_arg_1.totalFrames + 1)));
            };
            var _local_3:int = _arg_1.numChildren;
            var _local_4:int;
            while (_local_4 < _local_3)
            {
                _local_5 = (_arg_1.getChildAt(_local_4) as MovieClip);
                if (_local_5)
                {
                    this.GotoAndStop(_local_5);
                };
                _local_4++;
            };
        }


    }
}//package 

//------------------------------------------------------------
//$ParticuleZero

package 
{
    import flash.display.MovieClip;
    import flash.display.Stage;
    import flash.display.BitmapData;
    import flash.geom.Rectangle;
    import flash.display.Sprite;

    public class $ParticuleZero 
    {

        public static var _root:MovieClip;
        public static var _stage:Stage;

        public var Image:BitmapData;
        public var BaseX:int = 0;
        public var BaseY:int = 0;
        public var Largeur:int;
        public var Hauteur:int;
        public var Zone:Rectangle;
        public var ListeImage:Array;
        public var MonoImage:Boolean;

        public function $ParticuleZero(_arg_1:MovieClip, _arg_2:int=0, _arg_3:int=0, _arg_4:Boolean=false)
        {
            var _local_8:$ParticuleImage;
            super();
            var _local_5:int = _arg_1.totalFrames;
            var _local_6:Sprite = new Sprite();
            _local_6.addChild(_arg_1);
            this.ListeImage = new Array(_local_5);
            this.MonoImage = (_local_5 == 1);
            var _local_7:int;
            while (_local_7 < _local_5)
            {
                _local_8 = new $ParticuleImage(_arg_4);
                _local_8.DecalageX = _arg_2;
                _local_8.DecalageY = _arg_3;
                _local_8.ClipCible = _arg_1;
                _local_8.NumImage = (_local_7 + 1);
                this.ListeImage[_local_7] = _local_8;
                if (!_arg_4)
                {
                    _local_8.Rendu();
                };
                _local_7++;
            };
        }

    }
}//package 

//------------------------------------------------------------
//$ParticuleZone

package 
{
    import flash.display.Bitmap;
    import flash.geom.Rectangle;
    import flash.geom.ColorTransform;
    import __AS3__.vec.Vector;
    import flash.geom.Point;
    import flash.filters.BitmapFilter;
    import flash.display.DisplayObjectContainer;
    import flash.utils.getTimer;
    import flash.display.BitmapData;
    import __AS3__.vec.*;

    public class $ParticuleZone extends Bitmap 
    {

        public const ImageSeconde:int = 36;

        private var TempsZero:int;
        private var ZoneImage:Rectangle;
        public var Boite:Bitmap;
        public var Transformation:ColorTransform = new ColorTransform();
        public var ListeParticule:Vector.<$Particule> = new Vector.<$Particule>();
        public var ListeImageParticule:Array = new Array();
        private var ImageTotale:int = 0;
        private var Mouvement:Function;
        private var FM:Boolean;
        private var Temporaire:Boolean = false;
        private var DureeMax:int;
        public var Destruction:Boolean = false;
        private var DestructionLente:Boolean = true;
        private var FiltreImage:Boolean = false;
        private var PointZero:Point = new Point(0, 0);
        private var FiltreEnCours:BitmapFilter;
        public var Type:int = 0;
        public var NiveauProfondeur:int = 0;
        private var Pause:Boolean = false;
        public var Optimisation:Boolean = false;
        public var OptimisationZone:Boolean = false;
        public var Conteneur:DisplayObjectContainer;
        public var PositionHaute:Boolean;
        public var Index:int;
        public var NombreParticule:int;
        public var DemandeRendu:Boolean = true;
        public var DansLeVide:Boolean = true;
        private var Largeur:int;
        private var Hauteur:int;

        public function $ParticuleZone(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int, _arg_5:Function=null, _arg_6:int=0)
        {
            if (_arg_6 != 0)
            {
                this.TempsZero = getTimer();
                this.Temporaire = true;
                this.DureeMax = _arg_6;
            };
            if (_arg_5 == null)
            {
                this.FM = false;
            }
            else
            {
                this.FM = true;
                this.Mouvement = _arg_5;
            };
            this.Largeur = _arg_3;
            this.Hauteur = _arg_4;
            this.ZoneImage = new Rectangle(0, 0, _arg_3, _arg_4);
            this.Transformation.alphaMultiplier = 0;
            bitmapData = new BitmapData(_arg_3, _arg_4, true, 0);
            x = _arg_1;
            y = _arg_2;
        }

        public function set Filtre(_arg_1:BitmapFilter):void
        {
            if (_arg_1 == null)
            {
                this.FiltreImage = false;
                this.FiltreEnCours = null;
            }
            else
            {
                this.FiltreImage = true;
                this.FiltreEnCours = _arg_1;
            };
        }

        public function Rendu(_arg_1:Boolean=true):void
        {
            var _local_2:Point;
            var _local_3:int;
            var _local_4:int;
            var _local_5:$Particule;
            var _local_6:$ParticuleImage;
            var _local_7:int;
            var _local_8:int;
            this.ImageTotale++;
            if (this.DemandeRendu)
            {
                if (this.OptimisationZone)
                {
                    _local_2 = this.localToGlobal(this.PointZero);
                    _local_3 = _local_2.x;
                    if (_local_3 < -200)
                    {
                        return;
                    };
                    if (_local_3 > 1000)
                    {
                        return;
                    };
                    _local_4 = _local_2.y;
                    if (_local_4 < -200)
                    {
                        return;
                    };
                    if (_local_4 > 600)
                    {
                        return;
                    };
                };
                if (_arg_1)
                {
                    bitmapData.colorTransform(this.ZoneImage, this.Transformation);
                };
                this.NombreParticule = this.ListeParticule.length;
                this.DemandeRendu = false;
                this.Index = 0;
                while (this.Index < this.NombreParticule)
                {
                    this.DemandeRendu = true;
                    _local_5 = this.ListeParticule[this.Index];
                    if (_local_5.Destruction)
                    {
                        this.ListeParticule.splice(this.Index, 1);
                        this.Index--;
                        this.NombreParticule--;
                    }
                    else
                    {
                        if (this.FM)
                        {
                            this.Mouvement(_local_5);
                        };
                        if (_local_5.LectureEnCours)
                        {
                            _local_6 = _local_5.ListeImage[_local_5.ImageEnCours];
                            if (!_local_6.Dessinée)
                            {
                                _local_6.Rendu();
                            };
                            _local_5.ImageParticuleEnCours = _local_6;
                            _local_5.Image = _local_6.ImageData;
                            _local_5.ImageEnCours++;
                            if (_local_5.ImageEnCours == _local_5.NombreImage)
                            {
                                if (_local_5.Boucle)
                                {
                                    _local_5.ImageEnCours = 0;
                                    if (!_local_5.Repetition)
                                    {
                                        _local_5.LectureEnCours = false;
                                    };
                                }
                                else
                                {
                                    _local_5.Destruction = true;
                                };
                            };
                            if (((_local_5.ImageStop) && (_local_5.ImageEnCours == _local_5.ImageStop)))
                            {
                                _local_5.ImageStop = 0;
                                _local_5.LectureEnCours = false;
                                if (_local_5.Fonction != null)
                                {
                                    _local_5.Fonction(_local_5.Param);
                                };
                            };
                        };
                        if (_arg_1)
                        {
                            bitmapData.copyPixels(_local_5.Image, _local_5.ImageParticuleEnCours.Zone, new Point((_local_5.ImageParticuleEnCours.ZeroX + _local_5.x), (_local_5.ImageParticuleEnCours.ZeroY + _local_5.y)), null, null, true);
                        };
                    };
                    this.Index++;
                };
                if (this.Optimisation)
                {
                    if (this.DemandeRendu)
                    {
                        if (this.DansLeVide)
                        {
                            if (this.PositionHaute)
                            {
                                this.Conteneur.addChild(this);
                            }
                            else
                            {
                                this.Conteneur.addChildAt(this, 0);
                            };
                            this.DansLeVide = false;
                        };
                    }
                    else
                    {
                        if (!this.DansLeVide)
                        {
                            this.Conteneur.removeChild(this);
                            this.DansLeVide = true;
                        };
                    };
                };
                if (((this.FiltreImage) && (_arg_1)))
                {
                    bitmapData.applyFilter(bitmapData, this.ZoneImage, this.PointZero, this.FiltreEnCours);
                };
            };
            if (this.Temporaire)
            {
                _local_7 = getTimer();
                if (this.DestructionLente)
                {
                    if (this.NombreParticule == 0)
                    {
                        this.DestructionLente = false;
                        _local_8 = ((_local_7 - this.TempsZero) + 2000);
                        if (this.DureeMax > _local_8)
                        {
                            this.DureeMax = _local_8;
                        };
                    };
                };
                if ((_local_7 - this.TempsZero) > this.DureeMax)
                {
                    this.Destruction = true;
                };
            };
        }

        public function Rendu_Particule(_arg_1:$Particule):void
        {
            bitmapData.copyPixels(_arg_1.Image, _arg_1.Zone, new Point(_arg_1.x, _arg_1.y), null, null, true);
        }

        public function Nouvelle_Particule(_arg_1:$ParticuleZero, _arg_2:Boolean=false):$Particule
        {
            var _local_3:$Particule = new $Particule(_arg_1);
            if (_arg_2)
            {
                this.ListeParticule.unshift(_local_3);
            }
            else
            {
                this.ListeParticule.push(_local_3);
            };
            return (_local_3);
        }

        public function Nombre_Particule():int
        {
            return (this.ListeParticule.length);
        }


    }
}//package 

//------------------------------------------------------------
//$Variable

package 
{
    public class $Variable 
    {

        public var Liste:Array;
        public var Taille:int;
        public var Index:int;
        public var IndexImpossible:int;
        public var Fonction:Function;

        public function $Variable(_arg_1:int=100, _arg_2:Function=null)
        {
            if (_arg_1 < 10)
            {
                _arg_1 = 10;
            };
            this.Fonction = _arg_2;
            this.Liste = new Array(_arg_1);
            this.Taille = _arg_1;
        }

        public function set Valeur(_arg_1:Object):*
        {
            this.Nouvelle_Index();
            this.Liste[this.Index] = _arg_1;
        }

        public function get Valeur():Object
        {
            if (((this.Index == this.IndexImpossible) && (!(this.Fonction == null))))
            {
                this.Fonction();
            };
            return (this.Liste[this.Index]);
        }

        private function Nouvelle_Index():void
        {
            var _local_1:int = int((Math.random() * this.Taille));
            while (this.Index == _local_1)
            {
                _local_1 = int((Math.random() * this.Taille));
            };
            this.IndexImpossible = this.Index;
            this.Index = _local_1;
        }


    }
}//package 

//------------------------------------------------------------
//IntUtil

package 
{
    public class IntUtil 
    {

        private static var hexChars:String = "0123456789abcdef";


        public static function rol(_arg_1:int, _arg_2:int):int
        {
            return ((_arg_1 << _arg_2) | (_arg_1 >>> (32 - _arg_2)));
        }

        public static function ror(_arg_1:int, _arg_2:int):uint
        {
            var _local_3:int = (32 - _arg_2);
            return ((_arg_1 << _local_3) | (_arg_1 >>> (32 - _local_3)));
        }

        public static function toHex(_arg_1:int, _arg_2:Boolean=false):String
        {
            var _local_4:int;
            var _local_5:int;
            var _local_3:* = "";
            if (_arg_2)
            {
                _local_4 = 0;
                while (_local_4 < 4)
                {
                    _local_3 = (_local_3 + (hexChars.charAt(((_arg_1 >> (((3 - _local_4) * 8) + 4)) & 0x0F)) + hexChars.charAt(((_arg_1 >> ((3 - _local_4) * 8)) & 0x0F))));
                    _local_4++;
                };
            }
            else
            {
                _local_5 = 0;
                while (_local_5 < 4)
                {
                    _local_3 = (_local_3 + (hexChars.charAt(((_arg_1 >> ((_local_5 * 8) + 4)) & 0x0F)) + hexChars.charAt(((_arg_1 >> (_local_5 * 8)) & 0x0F))));
                    _local_5++;
                };
            };
            return (_local_3);
        }


    }
}//package 

//------------------------------------------------------------
//SHA256

package 
{
    import flash.utils.ByteArray;

    public class SHA256 
    {


        public static function hash(_arg_1:String):String
        {
            var _local_2:Array = createBlocksFromString(_arg_1);
            var _local_3:ByteArray = hashBlocks(_local_2);
            return (((((((IntUtil.toHex(_local_3.readInt(), true) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true));
        }

        public static function hashBytes(_arg_1:ByteArray):String
        {
            var _local_2:Array = createBlocksFromByteArray(_arg_1);
            var _local_3:ByteArray = hashBlocks(_local_2);
            return (((((((IntUtil.toHex(_local_3.readInt(), true) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true)) + IntUtil.toHex(_local_3.readInt(), true));
        }

        private static function hashBlocks(_arg_1:Array):ByteArray
        {
            var _local_15:int;
            var _local_16:int;
            var _local_17:int;
            var _local_18:int;
            var _local_19:int;
            var _local_20:int;
            var _local_21:int;
            var _local_22:int;
            var _local_23:int;
            var _local_24:int;
            var _local_25:int;
            var _local_26:int;
            var _local_27:int;
            var _local_28:int;
            var _local_29:int;
            var _local_30:int;
            var _local_31:int;
            var _local_2:* = 1779033703;
            var _local_3:int = 3144134277;
            var _local_4:* = 1013904242;
            var _local_5:int = 2773480762;
            var _local_6:* = 1359893119;
            var _local_7:int = 2600822924;
            var _local_8:* = 528734635;
            var _local_9:* = 1541459225;
            var _local_10:Array = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298);
            var _local_11:int = _arg_1.length;
            var _local_12:Array = new Array(64);
            var _local_13:int;
            while (_local_13 < _local_11)
            {
                _local_15 = _local_2;
                _local_16 = _local_3;
                _local_17 = _local_4;
                _local_18 = _local_5;
                _local_19 = _local_6;
                _local_20 = _local_7;
                _local_21 = _local_8;
                _local_22 = _local_9;
                _local_23 = 0;
                while (_local_23 < 64)
                {
                    if (_local_23 < 16)
                    {
                        _local_12[_local_23] = _arg_1[(_local_13 + _local_23)];
                        if (isNaN(_local_12[_local_23]))
                        {
                            _local_12[_local_23] = 0;
                        };
                    }
                    else
                    {
                        _local_30 = ((IntUtil.ror(_local_12[(_local_23 - 15)], 7) ^ IntUtil.ror(_local_12[(_local_23 - 15)], 18)) ^ (_local_12[(_local_23 - 15)] >>> 3));
                        _local_31 = ((IntUtil.ror(_local_12[(_local_23 - 2)], 17) ^ IntUtil.ror(_local_12[(_local_23 - 2)], 19)) ^ (_local_12[(_local_23 - 2)] >>> 10));
                        _local_12[_local_23] = (((_local_12[(_local_23 - 16)] + _local_30) + _local_12[(_local_23 - 7)]) + _local_31);
                    };
                    _local_24 = ((IntUtil.ror(_local_15, 2) ^ IntUtil.ror(_local_15, 13)) ^ IntUtil.ror(_local_15, 22));
                    _local_25 = (((_local_15 & _local_16) ^ (_local_15 & _local_17)) ^ (_local_16 & _local_17));
                    _local_26 = (_local_24 + _local_25);
                    _local_27 = ((IntUtil.ror(_local_19, 6) ^ IntUtil.ror(_local_19, 11)) ^ IntUtil.ror(_local_19, 25));
                    _local_28 = ((_local_19 & _local_20) ^ ((~(_local_19)) & _local_21));
                    _local_29 = ((((_local_22 + _local_27) + _local_28) + _local_10[_local_23]) + _local_12[_local_23]);
                    _local_22 = _local_21;
                    _local_21 = _local_20;
                    _local_20 = _local_19;
                    _local_19 = (_local_18 + _local_29);
                    _local_18 = _local_17;
                    _local_17 = _local_16;
                    _local_16 = _local_15;
                    _local_15 = (_local_29 + _local_26);
                    _local_23++;
                };
                _local_2 = (_local_2 + _local_15);
                _local_3 = (_local_3 + _local_16);
                _local_4 = (_local_4 + _local_17);
                _local_5 = (_local_5 + _local_18);
                _local_6 = (_local_6 + _local_19);
                _local_7 = (_local_7 + _local_20);
                _local_8 = (_local_8 + _local_21);
                _local_9 = (_local_9 + _local_22);
                _local_13 = (_local_13 + 16);
            };
            var _local_14:ByteArray = new ByteArray();
            _local_14.writeInt(_local_2);
            _local_14.writeInt(_local_3);
            _local_14.writeInt(_local_4);
            _local_14.writeInt(_local_5);
            _local_14.writeInt(_local_6);
            _local_14.writeInt(_local_7);
            _local_14.writeInt(_local_8);
            _local_14.writeInt(_local_9);
            _local_14.position = 0;
            return (_local_14);
        }

        private static function createBlocksFromByteArray(_arg_1:ByteArray):Array
        {
            var _local_2:int = _arg_1.position;
            _arg_1.position = 0;
            var _local_3:Array = new Array();
            var _local_4:int = (_arg_1.length * 8);
            var _local_5:* = 0xFF;
            var _local_6:int;
            while (_local_6 < _local_4)
            {
                _local_3[(_local_6 >> 5)] = (_local_3[(_local_6 >> 5)] | ((_arg_1.readByte() & _local_5) << (24 - (_local_6 % 32))));
                _local_6 = (_local_6 + 8);
            };
            _local_3[(_local_4 >> 5)] = (_local_3[(_local_4 >> 5)] | (128 << (24 - (_local_4 % 32))));
            _local_3[((((_local_4 + 64) >> 9) << 4) + 15)] = _local_4;
            _arg_1.position = _local_2;
            return (_local_3);
        }

        private static function createBlocksFromString(_arg_1:String):Array
        {
            var _local_2:Array = new Array();
            var _local_3:int = (_arg_1.length * 8);
            var _local_4:* = 0xFF;
            var _local_5:int;
            while (_local_5 < _local_3)
            {
                _local_2[(_local_5 >> 5)] = (_local_2[(_local_5 >> 5)] | ((_arg_1.charCodeAt((_local_5 / 8)) & _local_4) << (24 - (_local_5 % 32))));
                _local_5 = (_local_5 + 8);
            };
            _local_2[(_local_3 >> 5)] = (_local_2[(_local_3 >> 5)] | (128 << (24 - (_local_3 % 32))));
            _local_2[((((_local_3 + 64) >> 9) << 4) + 15)] = _local_3;
            return (_local_2);
        }


    }
}//package 

//------------------------------------------------------------
//Transformice

package 
{
    import flash.display.MovieClip;
    import flash.geom.ColorTransform;
    import flash.display.Loader;
    import interfaces.InterfaceConnexion;
    import flash.text.TextField;
    import elements.JadeAscenseur;
    import Box2D.Dynamics.b2Body;
    import transformice.joueur.$Joueur;
    import flash.geom.Point;
    import __AS3__.vec.Vector;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.net.XMLSocket;
    import editeur.$Editeur;
    import transformice.tribus.$Tribu;
    import Box2D.Collision.b2AABB;
    import Box2D.Dynamics.b2World;
    import Box2D.Common.Math.b2Vec2;
    import flash.display.DisplayObjectContainer;
    import flash.utils.Dictionary;
    import elements.JadeListe;
    import flash.text.StyleSheet;
    import Box2D.Collision.Shapes.b2CircleDef;
    import Box2D.Collision.Shapes.b2MassData;
    import flash.net.URLLoader;
    import flash.utils.Timer;
    import Box2D.Dynamics.Joints.b2DistanceJoint;
    import flash.system.Security;
    import ressources.$Res;
    import flash.utils.ByteArray;
    import flash.events.Event;
    import flash.system.LoaderContext;
    import flash.system.ApplicationDomain;
    import elements.JadeClique;
    import flash.events.MouseEvent;
    import flash.events.KeyboardEvent;
    import flash.events.TextEvent;
    import flash.events.TimerEvent;
    import flash.display.Shape;
    import flash.external.ExternalInterface;
    import flash.display.Sprite;
    import transformice.evenements.noel.Noel;
    import flash.utils.getTimer;
    import Box2D.Dynamics.Joints.b2DistanceJointDef;
    import Box2D.Dynamics.b2BodyDef;
    import flash.xml.XMLDocument;
    import Box2D.Collision.Shapes.b2PolygonDef;
    import flash.xml.XMLNode;
    import Box2D.Common.Math.b2XForm;
    import flash.filters.GlowFilter;
    import Box2D.Dynamics.Joints.b2RevoluteJointDef;
    import flash.display.DisplayObject;
    import flash.ui.Mouse;
    import flash.events.IOErrorEvent;
    import flash.events.SecurityErrorEvent;
    import flash.events.DataEvent;
    import flash.net.URLRequest;
    import pubs.CPMStar;
    import flash.net.SharedObject;
    import flash.system.Capabilities;
    import flash.display.StageQuality;
    import flash.net.navigateToURL;
    import transformice.chat.OutilsChat;
    import flash.text.TextFieldType;
    import elements.JadeSouris;
    import flash.display.Graphics;
    import flash.display.JointStyle;
    import flash.net.URLLoaderDataFormat;
    import flash.text.TextFieldAutoSize;
    import textes.$T;
    import flash.display.Bitmap;
    import flash.display.BitmapData;
    import flash.geom.Matrix;
    import Box2D.Dynamics.Joints.*;
    import __AS3__.vec.*;

    public class Transformice extends MovieClip 
    {

        public static var Instance:Transformice;
        private static var Allumage:ColorTransform = new ColorTransform(1.2, 1.2, 1.2);
        private static var AllumageFin:ColorTransform = new ColorTransform();

        public const VersionDebug:Boolean = false;
        public const BaseTempsInvoc:int = 1000;
        public const VitesseJoueur:Number = 3;
        public const BaseDistanceInvoc:int = 120;
        public const LOW:String = "LOW";
        public var Version:String = "0.126";
        public var Langue:String = "en";
        public var 峰峰:Boolean = false;
        public var Mochi:Boolean = false;
        public var PubCPMStar:Boolean = false;
        private var ChargeurTransformiceFLA:Loader;
        public var _A:MovieClip;
        public var _VignetteMenu:MovieClip;
        public var _OP:MovieClip;
        public var _I:MovieClip;
        public var ClipVignette:MovieClip;
        public var _Vignette:MovieClip;
        public var _M:MovieClip;
        public var _Serveur:MovieClip;
        public var ClipMonde:MovieClip;
        public var ClipListeJoueur:MovieClip;
        public var ClipListeMobile:MovieClip;
        public var ClipStatique:MovieClip;
        public var ClipServeur:MovieClip;
        public var ClipIdentification:InterfaceConnexion;
        public var ClipMagasin:MovieClip;
        public var ClipInterface:MovieClip;
        public var ClipProfil:MovieClip;
        public var ClipOP:MovieClip;
        public var ClipDessin:MovieClip;
        public var ClipTribu:MovieClip;
        public var ClipConcentration:MovieClip;
        public var TexteServeur:TextField;
        public var CE:TextField;
        public var TexteChat:TextField;
        public var AscenseurChat:JadeAscenseur;
        public var PhysiqueSol:b2Body;
        public var TempsInvoc:int = 1000;
        public var DistanceInvoc:int = 120;
        public var MoteurActif:Boolean = false;
        public var LsTS:Array;
        public var ListeFromage:Array;
        public var CouleurSol:uint = 6788234;
        public var ClipFromage:MovieClip;
        public var TZAT:int;
        public var ATEC:Boolean = false;
        public var SpawnSourisSpé:Boolean = false;
        public var SSSx:int;
        public var SSSy:int;
        public var DoubleChamane:Boolean = false;
        private var Bonux:Boolean = false;
        private var BonuxX:int;
        private var BonuxY:int;
        private var IconeBonux:MovieClip;
        public var ListeMobile:Array;
        public var Monde:MovieClip;
        public var Synchroniseur:Boolean = false;
        public var TempsPartieZéro:int;
        public var TempsEnCours:int;
        public var DernièreAction:int;
        public var MouvementDebut:Boolean = true;
        public var A_Invité:Boolean = false;
        public var A_Modo:Boolean = false;
        public var A_Admin:Boolean = false;
        public var ClipJoueur:$Joueur;
        public var NomJoueur:String;
        public var CodeJoueur:int;
        public var P_SD:Object;
        public var Saut_è_é:Boolean = false;
        public var Saut2:Boolean = false;
        public var TempsSautDisponible:int = 0;
        public var DernierSaut:int;
        public var AutoClou:Boolean = false;
        public var AutoClouCode:int;
        public var AutoClouDécalage:int;
        public var SpawnGuide:Point = null;
        public var CodePartieEnCours:int = 0;
        public var TempsMondeRestant:int = 0;
        public var DécalageStage:Point;
        public var cacheNoir:MovieClip;
        public var m_iterations:int = 10;
        public var m_timeStep:Number = 0.0333333333333333;
        public var DernièreVélocité:Number = 0;
        public var ImagesCalculées:int = 0;
        public var TempsZéro:int;
        public var HorsDePorté:Boolean = false;
        public var TempsSeconde:int;
        public var TINV:int;
        public var Monte:Boolean = true;
        public var DétectionCollision:int = 100;
        public var DernierTP_0:int = 0;
        public var DernierTP_1:int = 0;
        public var LancementChargementSouris:Boolean = false;
        private var UneSurDeux:Boolean = false;
        public var CollisionJoueur:Boolean = false;
        public var Guide:Boolean = false;
        public var MondeLien:Boolean = false;
        public var Noire:Boolean = false;
        public var Monde444:Boolean = false;
        public var Monde666:Boolean = false;
        public var ListeConcentration:Vector.<Vector.<b2Body>>;
        public var MondeSourisFromage:Boolean = false;
        public var JoueurSourisFromage:$Joueur;
        public var CodeMondeEnCours:int;
        public var DernièreMAJ:int = 0;
        public var DernièrePX:int = -1;
        public var DernièrePY:int = -1;
        public var ObjetEnCours:MovieClip;
        public var BallonSouris:Boolean = false;
        public var ListeClipObjet:Array;
        public var ClipObjetEnCours:MovieClip;
        public var Cx:int = -1;
        public var Cy:int = -1;
        public var ConcentrationActive:Boolean = false;
        public var InvocationEnCours:Boolean = false;
        public var DébutInvocation:int;
        public var PosFinObjetX:int;
        public var PosFinObjetY:int;
        public var TP0:$ParticuleZone;
        public var TP1:$ParticuleZone;
        public var ServeurSecondaire:Boolean = false;
        public var IPSecondaire:String;
        public var PortSecondaire:int;
        public var AdresseSecondaire:String;
        public var LimiteJoueur:int;
        public var VersionChargeur:int = 4;
        public var MauvaiseVersion:Boolean = true;
        public var MessageSpécial:Boolean = false;
        public var CodeRetourLigne:String = "\r";
        public var Admin:Boolean = false;
        public var Modo:Boolean = false;
        public var SalonCible:String = "1";
        public var ConnexionAutorisée:Boolean = true;
        public var CMDTEC:int;
        public var VersionRusse:Boolean = false;
        public var Musique:Sound;
        public var Edition:Boolean = false;
        public var CanalMusique:SoundChannel;
        public var 高峰:int = 0;
        public var Serveur:XMLSocket;
        public var TempsZeroBR:int;
        public var ChargeurZero:Loader;
        public var LimiteChat:int = 0;
        public var DernierMessage:String = "";
        public var VraiLargeur:int;
        public var DernierCodeClou:int = -1;
        public var BasEnCours:Boolean = false;
        public var Kikoo:int = 0;
        public var DessinActif:Boolean = false;
        public var DerniereEntrée:int = 0;
        public var DernierChuchoteur:String = "";
        public var LimiteX:int;
        public var LimiteY:int;
        public var VignetteEnCours:Object;
        public var Fx:Number = 0.1;
        public var Fy:Number = 0;
        public var Gy:Number = 0.1;
        public var LangueChoisie:Boolean = false;
        public var AntiPetit:int = 1;
        public var CouleurNouvelle:String = "<J>";

        public var EDITEUR:Class = $Editeur;
        public var TRIBU:Class = $Tribu;
        private var TransformiceFLA:Class = Transformice_TransformiceFLA;
        public var worldAABB:b2AABB = new b2AABB();
        public var MondePhysique:b2World = new b2World(worldAABB, new b2Vec2(0, 10), true);
        public const ListeInterface:Vector.<DisplayObjectContainer> = new Vector.<DisplayObjectContainer>();
        public var NomObjet:Array = new Array();
        public var ListeJoueur:Dictionary = new Dictionary();
        public var ListeBallon:Array = new Array();
        public var ListeObjetDispo:Array = new Array(0, 24, 28, 32, 1, 2, 10, 3, 4, 6, 7, 26, 27, 18, 19, 20);
        public var ListeObjetDispo444:Array = new Array(28, 32, 1, 2, 10, 3, 4, 6, 7, 18, 19, 20, 11, 12, 13, 14, 15, 16);
        public var SautDisponible:Object = new Object();
        public var PositionFonction:Object = new Object();
        public var P_SD2:$Variable = new $Variable(1000);
        public const $1:String = String.fromCharCode(1);
        public const $2:String = String.fromCharCode(2);
        public const $3:String = String.fromCharCode(3);
        public const $4:String = String.fromCharCode(4);
        public const $5:String = String.fromCharCode(5);
        public const $6:String = String.fromCharCode(6);
        public const $7:String = String.fromCharCode(7);
        public const $8:String = String.fromCharCode(8);
        public const $9:String = String.fromCharCode(9);
        public const $10:String = String.fromCharCode(10);
        public const $11:String = String.fromCharCode(11);
        public const $12:String = String.fromCharCode(12);
        public const $13:String = String.fromCharCode(13);
        public const $14:String = String.fromCharCode(14);
        public const $15:String = String.fromCharCode(15);
        public const $16:String = String.fromCharCode(16);
        public const $17:String = String.fromCharCode(17);
        public const $18:String = String.fromCharCode(18);
        public const $19:String = String.fromCharCode(19);
        public const $20:String = String.fromCharCode(20);
        public const $21:String = String.fromCharCode(21);
        public const $22:String = String.fromCharCode(22);
        public const $24:String = String.fromCharCode(24);
        public const $25:String = String.fromCharCode(25);
        public const $26:String = String.fromCharCode(26);
        public const $27:String = String.fromCharCode(27);
        public var InterfaceListeObjet:JadeListe = new JadeListe(145, 189, 43, false);
        public var StyleTexte:StyleSheet = new StyleSheet();
        public const CB:Loader = new Loader();
        public var ClipJoueurProp:b2CircleDef = new b2CircleDef();
        public var MasseSourisBase:b2MassData = new b2MassData();
        public var MasseSourisGrosse:b2MassData = new b2MassData();
        public var ChargeurConfigXml:URLLoader = new URLLoader();
        public var TimerPosition:Timer = new Timer(2000);
        public const CouleurZéro:ColorTransform = new ColorTransform(1, 1, 1, 0.5, 128);
        public const CouleurBase:ColorTransform = new ColorTransform(1, 1, 1, 0.5);
        public const CouleurEther:ColorTransform = new ColorTransform(1, 1, 1, 0.5, 0, 128, 128);
        public var IPS:$IPS = new $IPS(200, 50, 30);
        public var ListeLienJoueur:Vector.<b2DistanceJoint> = new Vector.<b2DistanceJoint>();
        public var NombreObjet:int = NomObjet.length;
        public const VecteurNul:b2Vec2 = new b2Vec2(0, 0);
        public var ObjetsGicle:Vector.<int> = new Vector.<int>();
        public var CouleurBleue:ColorTransform = new ColorTransform(1, 1, 2, 0.5, 0, 0, 50);
        public var CouleurRouge:ColorTransform = new ColorTransform(0.9, 0.3, 0.6, 1, 0, 0, 0);
        public var Restriction:String = ("^<^" + CodeRetourLigne);
        public var ListeMuteJoueur:Array = new Array();
        public var MDT:Array = new Array(10);
        public var ListeAmis:Array = new Array();
        public const 勇:Array = new Array(0, $1);
        public var Chargeur:Loader = new Loader();
        public var BoucleReveille:Timer = new Timer(11000);
        public var InterfaceListeJoueur:JadeListe = new JadeListe(149, 110, 19, false);
        public var PSS:String = String.fromCharCode(int((100 * Math.random())));
        public const 高:Object = new Object();
        public var Mot_A:String = Transformice.$Texte("$Mot_À");
        public var Mot_Tribu:String = Transformice.$Texte("$Tribu");
        public var Mot_De:String = Transformice.$Texte("$Mot_De");
        public var Mot_Chamane:String = Transformice.$Texte("$Mot_Chamane");
        public var ListeMessage:Vector.<String> = new Vector.<String>();
        public var Images:Object = new Object();
        public var Chargeurs:Array = new Array();
        public var Attente:Array = new Array();
        public var MoisTexte:Array = new Array("Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre");
        public var TimerPops:Timer = new Timer(500, 1);
        public var ClavierAnglais:Boolean = (!(Langue == "fr"));
        public var ParticuleZone:$ParticuleZone = new $ParticuleZone(0, 0, 800, 400, Mouvement);
        public var ParticuleZone2:$ParticuleZone = new $ParticuleZone(0, 0, 800, 400, Mouvement2);
        public var ListeParticule:Array = new Array();
        public var ListeParticuleAnimation:Array = new Array();
        public var ListeTitreDisponible:Array = new Array();
        public var ListeTitre:Array = new Array();
        private var CacheObjet:Array = new Array();
        public const CouleurSolGlace:ColorTransform = new ColorTransform(1, 1, 1.4, 1, 0, 0, 50);
        public const CouleurSolTramp:ColorTransform = new ColorTransform(0.9, 0.7, 1.2, 1, -30, -60, 10);
        public const CouleurSolDur:ColorTransform = new ColorTransform(0.5, 0.5, 0.5);
        public const CouleurSolLave:ColorTransform = new ColorTransform(1.2, 0.7, 0.7, 40);
        public const CouleurFantome:ColorTransform = new ColorTransform(1, 1, 1, 0.5, 0, 40, 40);

        public function Transformice()
        {
            Instance = this;
            this.Initialisation();
            this.Initialisation_Position();
            this.Initialisation_Physique();
            this.Initialisation_Timer();
            this.Chargement_Interface();
        }

        public static function Qualite(_arg_1:String=null):String
        {
            if (_arg_1)
            {
                Instance.stage.quality = _arg_1;
            };
            return (Instance.stage.quality);
        }


        private function Initialisation():void
        {
            Security.allowDomain("*");
            $Joueur._root = this;
            opaqueBackground = 6976661;
        }

        public function Ressource(_arg_1:String):MovieClip
        {
            return ($Res.Pouf(_arg_1));
        }

        public function Nouveau_ClipJoueur(_arg_1:String, _arg_2:String, _arg_3:String):$Joueur
        {
            return (new $Joueur(_arg_1, _arg_2, _arg_3));
        }

        private function Chargement_Interface():void
        {
            $Res.FonctionErreur = this.Erreur_Ressource;
            var _local_1:ByteArray = new this.TransformiceFLA();
            this.ChargeurTransformiceFLA = new Loader();
            this.ChargeurTransformiceFLA.contentLoaderInfo.addEventListener(Event.COMPLETE, this.Initialisation_Interface);
            var _local_2:LoaderContext = new LoaderContext();
            var _local_3:ApplicationDomain = new ApplicationDomain(ApplicationDomain.currentDomain);
            _local_2.applicationDomain = _local_3;
            $Res.Ajouter_Bibliotheque(_local_3);
            this.ChargeurTransformiceFLA.loadBytes(_local_1, _local_2);
        }

        private function Initialisation_Interface(_arg_1:Event):void
        {
            this.StyleTexte.setStyle("BV", {"color":"#2F7FCC"});
            this.StyleTexte.setStyle("R", {"color":"#CB546B"});
            this.StyleTexte.setStyle("BL", {"color":"#6C77C1"});
            this.StyleTexte.setStyle("J", {"color":"#BABD2F"});
            this.StyleTexte.setStyle("N", {"color":"#C2C2DA"});
            this.StyleTexte.setStyle("G", {"color":"#606090"});
            this.StyleTexte.setStyle("V", {"color":"#009D9D"});
            this.StyleTexte.setStyle("VP", {"color":"#2ECF73"});
            this.StyleTexte.setStyle("VI", {"color":"#C53DFF"});
            this.StyleTexte.setStyle("ROSE", {"color":"#ED67EA"});
            this.StyleTexte.setStyle("CH", {"color":"#98E2EB"});
            this.StyleTexte.setStyle("T", {"color":"#A4CF9E"});
            this.StyleTexte.setStyle("TI", {"fontSize":"14"});
            this.StyleTexte.setStyle("TD", {"textAlign":"right"});
            this.StyleTexte.setStyle("TG", {"textAlign":"left"});
            this.StyleTexte.setStyle("a:hover", {"color":"#2ECF73"});
            this.StyleTexte.setStyle("a:active", {"color":"#2ECF73"});
            this.DécalageStage = this.localToGlobal(new Point(0, 0));
            this.cacheNoir = $Res.Pouf("$Noire");
            this.cacheNoir.mouseChildren = false;
            this.cacheNoir.mouseEnabled = false;
            JadeClique.BTN_CLASSE = $Res.Classe("$Btn");
            addChildAt(this.CB, 0);
            this._A = $Res.Pouf("$ClipIntro");
            this._A.x = 400;
            this._A.y = 300;
            this._A.visible = false;
            this._VignetteMenu = $Res.Pouf("$VignetteMenu");
            this._VignetteMenu.x = (this._VignetteMenu.y = -100);
            this._I = $Res.Pouf("$Interface");
            this._I.I(this);
            this._Vignette = $Res.Pouf("$ClipVignette");
            this._Vignette.x = (this._Vignette.y = -100);
            this.ClipVignette = this._Vignette;
            this._OP = $Res.Pouf("$OP");
            this._OP.y = 3;
            this._M = $Res.Pouf("$M");
            this._M.y = 3;
            this._Serveur = $Res.Pouf("$Serveur");
            this._Serveur.I(this);
            this._Serveur.visible = false;
            this.ClipIdentification = new InterfaceConnexion(this);
            addChildAt(this._A, 0);
            addChildAt(this._I, 0);
            addChildAt(this._OP, 0);
            addChildAt(this._M, 0);
            addChildAt(this._Serveur, 0);
            this.Interface_Raccourcie();
            this._I._CH.styleSheet = this.StyleTexte;
            this.ClipServeur.Version.text = this.$Texte("$Version", this.Version);
            this.ClipIdentification.Version.text = this.$Texte("$Version", this.Version);
            this.ClipInterface._SA.styleSheet = this.StyleTexte;
            stage.tabChildren = false;
            this._Serveur._F._T3.buttonMode = true;
            this._Serveur._F._T3.useHandCursor = true;
            this._Serveur._F._T3.addEventListener(MouseEvent.MOUSE_DOWN, this.Clique_Serveur2);
            this._Serveur._F._T3.addEventListener(MouseEvent.MOUSE_OVER, this.Over_Serveur2);
            this._Serveur._F._T3.addEventListener(MouseEvent.MOUSE_OUT, this.Out_Serveur2);
            this._Vignette.mouseChildren = false;
            this._Vignette.mouseEnabled = false;
            this._Vignette._Texte.styleSheet = this.StyleTexte;
            stage.addEventListener(KeyboardEvent.KEY_DOWN, this.Clavier1);
            stage.addEventListener(KeyboardEvent.KEY_UP, this.Clavier2);
            this.TexteChat.styleSheet = this.StyleTexte;
            this.ClipInterface._CL.styleSheet = this.StyleTexte;
            this.ClipInterface._CL.mouseEnabled = false;
            this.TexteChat.text = "";
            this.InterfaceListeJoueur.x = 494;
            this.InterfaceListeJoueur.y = 487;
            this.ClipInterface.addChild(this.InterfaceListeJoueur);
            this.InterfaceListeJoueur.Ascenseur();
            this.TexteChat.addEventListener(TextEvent.LINK, this.Clique_Nom_Chat);
            this._VignetteMenu.mouseEnabled = true;
            this.TimerPops.addEventListener(TimerEvent.TIMER, this.Suppr_Menu);
            this._VignetteMenu.addEventListener(MouseEvent.ROLL_OUT, this.Menu_RollOut);
            this._VignetteMenu.addEventListener(MouseEvent.ROLL_OVER, this.Menu_RollOver);
            this.ClipInterface.addChild(this.InterfaceListeObjet);
            this.InterfaceListeObjet.x = 650;
            this.InterfaceListeObjet.y = 406;
            this.InterfaceListeObjet.Ascenseur();
            this.ClipDessin.mouseChildren = false;
            this.ClipDessin.mouseEnabled = false;
            this.ClipDessin.cacheAsBitmap = true;
            this.ClipConcentration.mouseChildren = false;
            this.ClipConcentration.mouseEnabled = false;
            this.ClipConcentration.cacheAsBitmap = true;
            this.ClipOP.mouseEnabled = false;
            this.ClipOP.mouseChildren = false;
            this.ClipInterface.mouseEnabled = false;
            this.ClipInterface.visible = false;
            this.ClipMonde.visible = false;
            this.P_SD2.Valeur = false;
            this.SautDisponible.Valeur = false;
            var _local_2:Shape = new Shape();
            _local_2.graphics.beginFill(0);
            _local_2.graphics.drawRect(0, 0, 2, 2);
            _local_2.graphics.endFill();
            addChild(_local_2);
            _local_2.x = 4000;
            _local_2.y = 4000;
            var _local_3:Shape = new Shape();
            _local_3.graphics.beginFill(0);
            _local_3.graphics.drawRect(0, 0, 2, 2);
            _local_3.graphics.endFill();
            addChild(_local_3);
            _local_3.x = -4000;
            _local_3.y = -4000;
            this.Fin_Initialisation();
        }

        private function Interface_Raccourcie():void
        {
            this.ClipMonde = this._M;
            this.ClipListeJoueur = this.ClipMonde._ListeJoueur;
            this.ClipListeMobile = this.ClipMonde._ListeMobile;
            this.ClipStatique = this.ClipMonde._OS;
            this.ClipServeur = this._Serveur;
            this.ClipMagasin = this._I._MA;
            this.ClipInterface = this._I;
            this.ClipProfil = this._I._P;
            this.ClipOP = this._OP;
            this.ClipDessin = this.ClipMonde._DE;
            this.ClipTribu = this.ClipInterface._Tribu;
            this.ClipConcentration = this.ClipMonde._CO;
            this.TexteServeur = this._Serveur.Texte;
            this.CE = this.ClipInterface.CE;
            this.TexteChat = this.ClipInterface.CS;
            this.AscenseurChat = new JadeAscenseur(this.TexteChat, 4);
        }

        private function Initialisation_Physique():void
        {
            this.ClipJoueurProp.radius = 0.5;
            this.ClipJoueurProp.density = 2;
            this.ClipJoueurProp.friction = 0.2;
            this.ClipJoueurProp.restitution = 0.2;
            this.ClipJoueurProp.filter.categoryBits = 2;
            this.ClipJoueurProp.filter.maskBits = 4;
            this.MasseSourisBase.mass = 20;
            this.MasseSourisGrosse.mass = 70;
            this.worldAABB.lowerBound.Set(-100, -100);
            this.worldAABB.upperBound.Set(100, 100);
            addEventListener(Event.ENTER_FRAME, this.Boucle_Moteur);
        }

        private function Initialisation_Timer():void
        {
            this.TimerPosition.addEventListener(TimerEvent.TIMER, this.高["MP"]);
            this.ChargeurConfigXml.addEventListener(Event.COMPLETE, this.Chargement_Info_Serveur_Ok);
        }

        private function Fin_Initialisation():void
        {
            var Adresse:String;
            var InfoSalon:Array;
            try
            {
                if (ExternalInterface.available)
                {
                    Adresse = ExternalInterface.call("window.location.href.toString");
                    if (Adresse)
                    {
                        InfoSalon = Adresse.split("?salon=");
                        if (InfoSalon.length == 1)
                        {
                            this.SalonCible = "1";
                        }
                        else
                        {
                            this.SalonCible = InfoSalon[1].toLowerCase();
                            this.SalonCible = this.SalonCible.split("<").join("").split(">").join("").split("&").join("").split("#").join("");
                        };
                    };
                }
                else
                {
                    this.SalonCible = "1";
                };
            }
            catch(E:Error)
            {
            };
            this.Chargement_Ressources();
        }

        public function Création_Sol(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int):void
        {
            this.PhysiqueSol.CreateShape(this.Mobile_Statique(null, new Array(_arg_1, _arg_2, (_arg_1 + _arg_3), _arg_2, (_arg_1 + _arg_3), (_arg_2 + _arg_4), _arg_1, (_arg_2 + _arg_4))));
        }

        public function Boucle_Moteur(_arg_1:Event):void
        {
            var _local_2:int;
            var _local_3:int;
            var _local_4:int;
            var _local_5:int;
            var _local_6:Boolean;
            var _local_7:Boolean;
            var _local_8:int;
            var _local_9:int;
            var _local_10:int;
            var _local_11:int;
            var _local_12:Boolean;
            var _local_13:Boolean;
            var _local_14:b2Vec2;
            var _local_15:b2Vec2;
            var _local_16:int;
            var _local_17:int;
            var _local_18:int;
            var _local_19:int;
            var _local_20:int;
            var _local_21:b2Body;
            var _local_22:int;
            var _local_23:int;
            var _local_24:int;
            var _local_25:b2DistanceJoint;
            var _local_26:int;
            var _local_27:int;
            var _local_28:int;
            var _local_29:int;
            var _local_30:int;
            var _local_31:int;
            var _local_32:int;
            var _local_33:int;
            var _local_34:int;
            var _local_35:int;
            var _local_36:int;
            var _local_37:int;
            var _local_38:int;
            var _local_39:int;
            var _local_40:int;
            var _local_41:Sprite;
            var _local_42:$Joueur;
            var _local_43:Number;
            var _local_44:Number;
            var _local_45:MovieClip;
            var _local_46:int;
            var _local_47:Number;
            var _local_48:int;
            var _local_49:int;
            this.UneSurDeux = (!(this.UneSurDeux));
            if (((this.LancementChargementSouris) && ($Joueur.ChargementSouris.length)))
            {
                $Joueur.ChargementSouris.shift().Fin_Chargement();
                if ($Joueur.ChargementSouris.length == 0)
                {
                    this.LancementChargementSouris = false;
                };
            };
            if (this.IPS.stage)
            {
                this.IPS.Rendu();
            };
            this.IPS.Nouvelle_Valeur(-1);
            if (Noel.TempeteActive)
            {
                if (this.UneSurDeux)
                {
                    this.ParticuleZone2.ListeParticule.push(Noel.Creation_Neige());
                    this.ParticuleZone2.DemandeRendu = true;
                };
            };
            if (this.MoteurActif)
            {
                _local_2 = this.ClipJoueur.x;
                _local_3 = this.ClipJoueur.y;
                _local_4 = getTimer();
                _local_5 = int(((_local_4 - this.TempsPartieZéro) / 1000));
                if (_local_5 != this.TempsEnCours)
                {
                    this.TempsEnCours = _local_5;
                    _local_22 = (this.TempsMondeRestant - this.TempsEnCours);
                    if (_local_22 < 0)
                    {
                        _local_22 = 0;
                    };
                    _local_23 = int(int((_local_22 / 60)));
                    _local_24 = (_local_22 % 60);
                    this.ClipInterface._TR.text = ((("0" + _local_23) + ":") + ((_local_24 < 10) ? ("0" + _local_24) : _local_24));
                };
                if (this.ATEC)
                {
                    if ((_local_4 - this.TZAT) > 10000)
                    {
                        this.ATEC = false;
                        this.Envoie_Serveur((this.$26 + this.$26));
                    };
                };
                _local_6 = (!(this.TP0.stage == null));
                _local_7 = (!(this.TP1.stage == null));
                _local_8 = this.TP0.x;
                _local_9 = this.TP0.y;
                _local_10 = this.TP1.x;
                _local_11 = this.TP1.y;
                if (_local_6)
                {
                    this.TP0.Rendu();
                    if (((_local_7) && ((_local_4 - this.DernierTP_0) > 1000)))
                    {
                        if (!this.ClipJoueur.Mort)
                        {
                            if (((_local_2 > (_local_8 + 21)) && (_local_2 < (_local_8 + 41))))
                            {
                                if (((_local_3 < (_local_9 + 41)) && (_local_3 > (_local_9 + 21))))
                                {
                                    this.DernierTP_1 = _local_4;
                                    this.DernierTP_0 = (_local_4 - 800);
                                    this.Téléportation(this.ClipJoueur.Physique, true);
                                    var _local_50:* = this.高;
                                    (_local_50["MP"](null, false, 1));
                                };
                            };
                        };
                    };
                };
                if (_local_7)
                {
                    this.TP1.Rendu();
                    if (((_local_6) && ((_local_4 - this.DernierTP_1) > 1000)))
                    {
                        if (!this.ClipJoueur.Mort)
                        {
                            if (((_local_2 > (_local_10 + 21)) && (_local_2 < (_local_10 + 41))))
                            {
                                if (((_local_3 < (_local_11 + 41)) && (_local_3 > (_local_11 + 21))))
                                {
                                    this.DernierTP_0 = _local_4;
                                    this.DernierTP_1 = (_local_4 - 800);
                                    this.Téléportation(this.ClipJoueur.Physique, false);
                                    _local_50 = this.高;
                                    (_local_50["MP"](null, false, 2));
                                };
                            };
                        };
                    };
                };
                if (this.Noire)
                {
                    this.cacheNoir.x = this.ClipJoueur.x;
                    this.cacheNoir.y = (this.ClipJoueur.y - 30);
                };
                if ((_local_4 - this.TINV) > 100)
                {
                    this.TINV = _local_4;
                    _local_12 = true;
                }
                else
                {
                    _local_12 = false;
                };
                if ((_local_4 - this.TempsSeconde) > this.DétectionCollision)
                {
                    this.TempsSeconde = _local_4;
                    _local_13 = true;
                    this.DétectionCollision = 100;
                    if (((this.SautDisponible.Valeur) && (this.PSS.charCodeAt(0) < 100)))
                    {
                        stage.removeEventListener(Event.ENTER_FRAME, this.Boucle_Moteur);
                        this.Serveur.close();
                        return;
                    };
                }
                else
                {
                    _local_13 = false;
                };
                this.ClipListeMobile.graphics.clear();
                this.ClipListeMobile.graphics.lineStyle(1, 0x444444);
                _local_16 = this.ListeBallon.length;
                _local_17 = -1;
                while (++_local_17 < _local_16)
                {
                    _local_25 = this.ListeBallon[_local_17];
                    _local_14 = _local_25.GetAnchor1();
                    _local_15 = _local_25.GetAnchor2();
                    this.ClipListeMobile.graphics.moveTo((_local_14.x * 30), (_local_14.y * 30));
                    this.ClipListeMobile.graphics.lineTo((_local_15.x * 30), (_local_15.y * 30));
                };
                if (this.MondeLien)
                {
                    this.ClipListeMobile.graphics.lineStyle(1, 16691708);
                    _local_16 = this.ListeLienJoueur.length;
                    _local_17 = -1;
                    while (++_local_17 < _local_16)
                    {
                        _local_25 = this.ListeLienJoueur[_local_17];
                        _local_14 = _local_25.GetAnchor1();
                        _local_15 = _local_25.GetAnchor2();
                        this.ClipListeMobile.graphics.moveTo((_local_14.x * 30), (_local_14.y * 30));
                        this.ClipListeMobile.graphics.lineTo((_local_15.x * 30), (_local_15.y * 30));
                    };
                };
                if (!this.ClipJoueur.Mort)
                {
                    if (((((-400 > _local_2) || (_local_2 > 1200)) || (-600 > _local_3)) || (_local_3 > 410)))
                    {
                        this.ClipJoueur.Mort = true;
                        this.Envoie_Serveur((this.$4 + this.$5));
                    };
                };
                if (((_local_13) && (!(this.ClipJoueur.Mort))))
                {
                    if (this.ClipJoueur.Grosse)
                    {
                        if (!((this.MondeSourisFromage) && (this.ClipJoueur == this.JoueurSourisFromage)))
                        {
                            _local_26 = this.LsTS.length;
                            _local_27 = 0;
                            while (_local_27 < _local_26)
                            {
                                _local_28 = this.LsTS[_local_27].Code;
                                _local_29 = this.LsTS[(_local_27 + 1)];
                                _local_30 = this.LsTS[(_local_27 + 2)];
                                if (((_local_2 < (_local_29 + 20)) && (_local_2 > (_local_29 - 20))))
                                {
                                    if (((_local_3 < (_local_30 + 10)) && (_local_3 > (_local_30 - 20))))
                                    {
                                        this.ClipJoueur.Mort = true;
                                        this.DétectionCollision = 2000;
                                        this.Envoie_Serveur((((((this.$5 + this.$18) + this.$1) + _local_28) + this.$1) + this.CodePartieEnCours));
                                        break;
                                    };
                                };
                                _local_27 = (_local_27 + 3);
                            };
                        };
                    }
                    else
                    {
                        if (this.MondeSourisFromage)
                        {
                            if (((this.JoueurSourisFromage) && (!(this.JoueurSourisFromage.Mort))))
                            {
                                _local_29 = this.JoueurSourisFromage.x;
                                _local_30 = this.JoueurSourisFromage.y;
                                if (((_local_2 < (_local_29 + 20)) && (_local_2 > (_local_29 - 20))))
                                {
                                    if (((_local_3 < (_local_30 + 10)) && (_local_3 > (_local_30 - 20))))
                                    {
                                        this.ClipJoueur.Grosse = true;
                                        this.Envoie_Serveur((((this.$5 + this.$19) + this.$1) + this.CodePartieEnCours));
                                    };
                                };
                            };
                        }
                        else
                        {
                            _local_31 = this.ListeFromage.length;
                            _local_32 = 0;
                            while (_local_32 < _local_31)
                            {
                                _local_33 = this.ListeFromage[_local_32];
                                _local_34 = this.ListeFromage[(_local_32 + 1)];
                                if (((_local_2 < (_local_33 + 20)) && (_local_2 > (_local_33 - 20))))
                                {
                                    if (((_local_3 < (_local_34 + 10)) && (_local_3 > (_local_34 - 20))))
                                    {
                                        this.ClipJoueur.Grosse = true;
                                        this.Envoie_Serveur((((this.$5 + this.$19) + this.$1) + this.CodePartieEnCours));
                                    };
                                };
                                _local_32 = (_local_32 + 2);
                            };
                        };
                    };
                    if (this.Bonux)
                    {
                        if (((_local_2 < (this.BonuxX + 20)) && (_local_2 > (this.BonuxX - 20))))
                        {
                            if (((_local_3 < (this.BonuxY + 10)) && (_local_3 > (this.BonuxY - 20))))
                            {
                                this.Bonux = false;
                                this.IconeBonux.alpha = 0.5;
                                this.Envoie_Serveur((((this.$19 + this.$20) + this.$1) + this.CodePartieEnCours));
                                this.ClipInterface._NCAD.text = (this.ClipInterface._NCAD.text + "+1");
                            };
                        };
                    };
                };
                this.ParticuleZone.Rendu();
                this.ParticuleZone2.Rendu();
                if (this.InvocationEnCours)
                {
                    _local_35 = (_local_4 - this.DébutInvocation);
                    if (_local_35 > this.TempsInvoc)
                    {
                        this.Validation_Placement_Objet_Fin();
                    }
                    else
                    {
                        _local_36 = int(int(((_local_35 / this.TempsInvoc) * 60)));
                        this.ClipJoueur.BarreDinvoc._M.width = _local_36;
                        this.ClipJoueur.BarreDinvoc._H.x = _local_36;
                        this.Explosion(0, ((this.ClipJoueur.x - 30) + _local_36), (this.ClipJoueur.y + 14), 1, 1, false);
                    };
                };
                if (((this.Guide) && (this.ObjetEnCours)))
                {
                    if ((((this.ObjetEnCours.Code == 0) || (this.ObjetEnCours.Code == 88)) || (this.Monde444)))
                    {
                        this.HorsDePorté = false;
                    }
                    else
                    {
                        this.ClipListeMobile.graphics.lineStyle(1, 0xFFFF, 0.8);
                        this.ClipListeMobile.graphics.drawCircle(_local_2, _local_3, this.DistanceInvoc);
                        _local_37 = (this.ObjetEnCours.x - _local_2);
                        _local_38 = (this.ObjetEnCours.y - _local_3);
                        _local_39 = Math.sqrt(((_local_37 * _local_37) + (_local_38 * _local_38)));
                        if (_local_39 > this.DistanceInvoc)
                        {
                            if (((this.ObjetEnCours.Code == 24) && (!(this.ObjetEnCours.Dur))))
                            {
                                this.ObjetEnCours.transform.colorTransform = this.CouleurRouge;
                            }
                            else
                            {
                                if (!this.HorsDePorté)
                                {
                                    this.ObjetEnCours.transform.colorTransform = this.CouleurZéro;
                                };
                            };
                            this.HorsDePorté = true;
                        }
                        else
                        {
                            if (this.HorsDePorté)
                            {
                                if (this.ObjetEnCours.Dur)
                                {
                                    this.ObjetEnCours.transform.colorTransform = this.CouleurBase;
                                }
                                else
                                {
                                    if (this.ObjetEnCours.Code == 24)
                                    {
                                        this.ObjetEnCours.transform.colorTransform = this.CouleurRouge;
                                    }
                                    else
                                    {
                                        this.ObjetEnCours.transform.colorTransform = this.CouleurEther;
                                    };
                                };
                            };
                            this.HorsDePorté = false;
                        };
                    };
                };
                this.IPS.Nouvelle_Valeur(0, true);
                _local_18 = (getTimer() - this.TempsZéro);
                _local_19 = int((_local_18 / 33.33));
                _local_20 = (_local_19 - this.ImagesCalculées);
                if (!this.Monde444)
                {
                    _local_40 = 0;
                    while (_local_40 < _local_20)
                    {
                        this.MondePhysique.Step(this.m_timeStep, this.m_iterations);
                        _local_40++;
                    };
                };
                this.ImagesCalculées = _local_19;
                _local_21 = this.MondePhysique.m_bodyList;
                while (_local_21)
                {
                    _local_41 = (_local_21.m_userData as Sprite);
                    if (_local_41)
                    {
                        if ((_local_41 is $Joueur))
                        {
                            _local_42 = (_local_41 as $Joueur);
                            if (!_local_42.Mort)
                            {
                                _local_42.ParticuleZone.Rendu();
                                _local_43 = ((_local_42.Grosse) ? 0.5 : 1);
                                if (_local_42.Saute)
                                {
                                    _local_43 = (_local_43 / 2);
                                };
                                _local_44 = ((_local_42.Grosse) ? (this.VitesseJoueur * 0.8) : this.VitesseJoueur);
                                if (_local_42.DroiteEnCours)
                                {
                                    if (_local_21.m_linearVelocity.x < this.VitesseJoueur)
                                    {
                                        _local_21.m_linearVelocity.x = (_local_21.m_linearVelocity.x + _local_43);
                                    };
                                    _local_42.DernierMouvement = _local_4;
                                }
                                else
                                {
                                    if (_local_42.GaucheEnCours)
                                    {
                                        if (-(this.VitesseJoueur) < _local_21.m_linearVelocity.x)
                                        {
                                            _local_21.m_linearVelocity.x = (_local_21.m_linearVelocity.x - _local_43);
                                        };
                                        _local_42.DernierMouvement = _local_4;
                                    }
                                    else
                                    {
                                        if ((_local_4 - _local_42.DernierMouvement) < 200)
                                        {
                                            if (((_local_21.m_linearVelocity.x < (this.VitesseJoueur - 0.5)) || (-(this.VitesseJoueur + 0.5) < _local_21.m_linearVelocity.x)))
                                            {
                                                _local_21.m_linearVelocity.x = (_local_21.m_linearVelocity.x / 1.2);
                                            };
                                        };
                                    };
                                };
                                if (this.Monde666)
                                {
                                };
                                if (_local_12)
                                {
                                    if (((!(_local_42.Vide)) && (_local_42.ParticuleZone.ListeParticule[0] == _local_42.Anim_Invoc)))
                                    {
                                        if (_local_42.AnimDroite)
                                        {
                                            this.Explosion(4, (_local_42.x - 3), (_local_42.y - 10), 2, 1);
                                            this.Explosion(4, (_local_42.x + 9), (_local_42.y - 10), 2, 1);
                                        }
                                        else
                                        {
                                            this.Explosion(4, (_local_42.x - 18), (_local_42.y - 10), 2, 1);
                                            this.Explosion(4, (_local_42.x - 6), (_local_42.y - 10), 2, 1);
                                        };
                                    };
                                };
                            };
                        }
                        else
                        {
                            _local_45 = (_local_41 as MovieClip);
                            _local_46 = _local_45.CodeObjet;
                            if (_local_46)
                            {
                                if (_local_46 == 28)
                                {
                                    _local_21.m_linearVelocity.y = -1;
                                }
                                else
                                {
                                    if (_local_46 == 32)
                                    {
                                        _local_47 = (((_local_21.m_sweep.a * 180) / Math.PI) * 0.01745);
                                        _local_21.m_linearVelocity.x = (3 * Math.cos(_local_47));
                                        _local_21.m_linearVelocity.y = (3 * Math.sin(_local_47));
                                    }
                                    else
                                    {
                                        if ((((_local_46 == 34) && (Noel.BouleDeNeige)) && (this.Synchroniseur)))
                                        {
                                            if (_local_45.BouleDroite)
                                            {
                                                if (_local_21.m_linearVelocity.x < 5)
                                                {
                                                    Noel.Explosion_Neige(_local_21);
                                                };
                                            }
                                            else
                                            {
                                                if (_local_21.m_linearVelocity.x > -5)
                                                {
                                                    Noel.Explosion_Neige(_local_21);
                                                };
                                            };
                                        };
                                    };
                                };
                                if (((_local_6) && (_local_7)))
                                {
                                    if ((_local_4 - _local_45.TP) > 1000)
                                    {
                                        _local_48 = (_local_21.m_xf.position.x * 30);
                                        _local_49 = (_local_21.m_xf.position.y * 30);
                                        if (((_local_48 > (_local_8 + 21)) && (_local_48 < (_local_8 + 41))))
                                        {
                                            if (((_local_49 < (_local_9 + 41)) && (_local_49 > (_local_9 + 21))))
                                            {
                                                _local_45.TP = _local_4;
                                                this.Téléportation(_local_21, true);
                                            };
                                        };
                                    };
                                    if ((_local_4 - _local_45.TP) > 1000)
                                    {
                                        _local_48 = (_local_21.m_xf.position.x * 30);
                                        _local_49 = (_local_21.m_xf.position.y * 30);
                                        if (((_local_48 > (_local_10 + 21)) && (_local_48 < (_local_10 + 41))))
                                        {
                                            if (((_local_49 < (_local_11 + 41)) && (_local_49 > (_local_11 + 21))))
                                            {
                                                _local_45.TP = _local_4;
                                                this.Téléportation(_local_21, false);
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        _local_41.x = (_local_21.m_xf.position.x * 30);
                        _local_41.y = (_local_21.m_xf.position.y * 30);
                        _local_41.rotation = (_local_21.GetAngle() * (180 / Math.PI));
                    };
                    _local_21 = _local_21.m_next;
                };
                this.IPS.Nouvelle_Valeur(0);
                if (((!(this.ClipJoueur.Mort)) && (!(this.Saut2))))
                {
                    _local_50 = this.高;
                    (_local_50["高峰高峰高峰高峰高"]());
                };
                if ((_local_4 - this.DernièreMAJ) > 1500)
                {
                    _local_37 = (this.DernièrePX - this.ClipJoueur.x);
                    _local_38 = (this.DernièrePY - this.ClipJoueur.y);
                    _local_39 = Math.sqrt(((_local_37 * _local_37) + (_local_38 * _local_38)));
                    if (_local_39 > 40)
                    {
                        _local_50 = this.高;
                        (_local_50["MP"]());
                    };
                };
                if (((this.Synchroniseur) && (this.Monde.FonctionSync)))
                {
                    this.Monde.FonctionSync((getTimer() - this.TempsPartieZéro));
                };
            };
        }

        public function S1():void
        {
            var _local_1:* = this.高;
            (_local_1["高峰高峰高峰高峰"]());
        }

        public function S0():void
        {
        }

        public function Erreur_Ressource(_arg_1:String):void
        {
            this.Message_Chat((("<font color='#FF0000'>Impossible de charger le clip [" + _arg_1) + "]."));
        }

        public function MAJ_ListeJoueur():void
        {
        }

        public function Chargement_Liste_Joueur(_arg_1:Array):void
        {
            var _local_2:$Joueur;
            var _local_3:$Joueur;
            var _local_4:$Joueur;
            var _local_7:Array;
            var _local_8:$Joueur;
            var _local_9:b2DistanceJointDef;
            $Joueur.ChargementSouris.length = 0;
            for each (_local_2 in this.ListeJoueur)
            {
                this.MondePhysique.DestroyBody(_local_2.Physique);
            };
            while (this.ClipListeJoueur.numChildren)
            {
                this.ClipListeJoueur.removeChildAt(0);
            };
            this.ListeJoueur = new Dictionary();
            if (this.ClipJoueur)
            {
                this.ClipJoueur.DroiteEnCours = false;
                this.ClipJoueur.GaucheEnCours = false;
            };
            var _local_5:int = _arg_1.length;
            var _local_6:int;
            while (_local_6 < _local_5)
            {
                _local_7 = _arg_1[_local_6].split("#");
                _local_8 = this.Creation_Joueur(_local_7, true, true);
                if (!_local_8.Mort)
                {
                    this.ClipListeJoueur.addChild(_local_8);
                    _local_8.Physique.WakeUp();
                };
                if (this.MondeLien)
                {
                    if (_local_4)
                    {
                        _local_9 = new b2DistanceJointDef();
                        _local_9.body1 = _local_4.Physique;
                        _local_9.body2 = _local_8.Physique;
                        _local_9.localAnchor1 = this.VecteurNul;
                        _local_9.localAnchor2 = this.VecteurNul;
                        _local_9.length = (20 / 30);
                        _local_9.frequencyHz = 0.8;
                        _local_9.dampingRatio = 0.2;
                        this.ListeLienJoueur.push(this.MondePhysique.CreateJoint(_local_9));
                        if (_local_4.ClipJoueur)
                        {
                            _local_8.NomTexte.textColor = 3080008;
                            _local_3 = _local_8;
                        }
                        else
                        {
                            if (_local_8.ClipJoueur)
                            {
                                _local_4.NomTexte.textColor = 3080008;
                                _local_3 = _local_4;
                            };
                        };
                        _local_4 = null;
                    }
                    else
                    {
                        _local_4 = _local_8;
                    };
                };
                _local_6++;
            };
            if (((_local_3) && (!(_local_3.Mort))))
            {
                this.ClipListeJoueur.addChild(_local_3);
                this.Message_Chat(this.$Texte("$Partenaire", _local_3.NomJoueur));
            };
            if (((this.ClipJoueur) && (!(this.ClipJoueur.Mort))))
            {
                this.ClipListeJoueur.addChild(this.ClipJoueur);
            }
            else
            {
                if (this.cacheNoir.parent)
                {
                    this.cacheNoir.parent.removeChild(this.cacheNoir);
                };
            };
            this.LancementChargementSouris = true;
        }

        public function Creation_Joueur(_arg_1:Array, _arg_2:Boolean=false, _arg_3:Boolean=false):$Joueur
        {
            var _local_14:$Joueur;
            var _local_16:int;
            var _local_17:int;
            var _local_4:String = _arg_1[0];
            var _local_5:int = int(_arg_1[1]);
            var _local_6:* = (_arg_1[2] == "1");
            var _local_7:int = int(_arg_1[3]);
            var _local_8:* = (_arg_1[4] == "1");
            var _local_9:int = int(_arg_1[5]);
            var _local_10:String = _arg_1[6];
            var _local_11:String = _arg_1[7];
            var _local_12:int = _arg_1[8];
            var _local_13:b2BodyDef = new b2BodyDef();
            if (this.SpawnSourisSpé)
            {
                _local_13.position.x = (this.SSSx / 30);
                _local_13.position.y = (this.SSSy / 30);
            }
            else
            {
                if (((this.Monde.Division) && (this.LsTS.length > 3)))
                {
                    _local_16 = int((this.LsTS.length / 3));
                    _local_17 = ((_local_5 % _local_16) * 3);
                    _local_13.position.x = (this.LsTS[(_local_17 + 1)] / 30);
                    _local_13.position.y = (this.LsTS[(_local_17 + 2)] / 30);
                }
                else
                {
                    _local_13.position.x = (this.LsTS[1] / 30);
                    _local_13.position.y = (this.LsTS[2] / 30);
                };
            };
            _local_13.fixedRotation = true;
            if (_arg_3)
            {
                _local_14 = new $Joueur(_local_4, this.ListeTitre[_local_9], _local_11, _arg_2, false, this.Monde666);
            }
            else
            {
                _local_14 = new $Joueur(_local_4, this.ListeTitre[_local_9], _local_11, _arg_2, _local_6, this.Monde666);
            };
            _local_14.Mort = _local_6;
            _local_14.CodeJoueur = _local_5;
            _local_14.Score = _local_7;
            _local_13.userData = _local_14;
            _local_14.Avatar = _local_10;
            _local_14.CodeTitre = _local_9;
            _local_14.CodeForum = _local_12;
            if (_local_5 == this.CodeJoueur)
            {
                this.ClipJoueur = _local_14;
                _local_14.ClipJoueur = true;
                _local_14.NomTexte.textColor = 16120627;
                _local_14.NomTexte.y = -70;
                this.DernièreVélocité = 0;
            }
            else
            {
                if (this.ListeAmis.indexOf(_local_4) != -1)
                {
                    _local_14.NomTexte.textColor = 3072126;
                };
            };
            var _local_15:b2Body = this.MondePhysique.CreateBody(_local_13);
            _local_14.Physique = _local_15;
            this.CollisionJoueur = this.Monde.CollisionJoueur;
            if (this.CollisionJoueur)
            {
                this.ClipJoueurProp.filter.categoryBits = 4;
            }
            else
            {
                this.ClipJoueurProp.filter.categoryBits = 2;
            };
            if (!_local_6)
            {
                _local_15.CreateShape(this.ClipJoueurProp);
                if (_local_8)
                {
                    this.Souris_Grosse(_local_14);
                }
                else
                {
                    _local_15.SetMass(this.MasseSourisBase);
                };
            };
            if (_local_5 == this.CodeJoueur)
            {
                _local_15.AllowSleeping(false);
            };
            this.ListeJoueur[_local_5] = _local_14;
            if (Noel.MapNoel)
            {
                _local_14.mouseEnabled = true;
                _local_14.addEventListener(MouseEvent.ROLL_OVER, this.Joueur_Over);
                _local_14.addEventListener(MouseEvent.ROLL_OUT, this.Joueur_Out);
                _local_14.addEventListener(MouseEvent.MOUSE_DOWN, this.Clique_ClipJoueur);
                _local_14.buttonMode = true;
                _local_14.useHandCursor = true;
            };
            return (_local_14);
        }

        private function Clique_ClipJoueur(_arg_1:Event):void
        {
            var _local_2:$Joueur = (_arg_1.currentTarget as $Joueur);
            if (Noel.MapNoel)
            {
                if (_local_2.ClipJoueur)
                {
                    this.Vignette_Menu(new Array(this.$Texte("$Deballer", this.ClipInterface._NCAD.text), Noel.Activer_Cadeau, null));
                }
                else
                {
                    this.Vignette_Menu(new Array(this.$Texte("$Offrir", _local_2.NomJoueur, this.ClipInterface._NCAD.text), Noel.Offrir_Cadeau, _local_2.NomJoueur));
                };
            };
        }

        private function Joueur_Over(_arg_1:Event):void
        {
            var _local_2:$Joueur = (_arg_1.currentTarget as $Joueur);
            _local_2.transform.colorTransform = Allumage;
        }

        private function Joueur_Out(_arg_1:Event):void
        {
            var _local_2:$Joueur = (_arg_1.currentTarget as $Joueur);
            _local_2.transform.colorTransform = AllumageFin;
        }

        public function Nouvelle_Partie(_arg_1:int, _arg_2:String=null):void
        {
            var _local_9:Vector.<b2Body>;
            var _local_10:MovieClip;
            var _local_3:* = (_arg_1 > 1000);
            if (_local_3)
            {
                _arg_1 = (_arg_1 - 1000);
            };
            this.CodeMondeEnCours = _arg_1;
            this.Monde444 = (_arg_1 == 444);
            this.Monde666 = (_arg_1 == 666);
            Noel.MapNoel = (_arg_1 == 888);
            if (this.ClipInterface._Vote.parent)
            {
                this.ClipInterface.removeChild(this.ClipInterface._Vote);
            };
            this.ObjetsGicle = new Vector.<int>();
            this.ClipConcentration.graphics.clear();
            while (this.ClipConcentration.numChildren)
            {
                this.ClipConcentration.removeChildAt(0);
            };
            this.ListeConcentration = new Vector.<Vector.<b2Body>>(80);
            var _local_4:int;
            while (_local_4 < 80)
            {
                _local_9 = new Vector.<b2Body>(40);
                this.ListeConcentration[_local_4] = _local_9;
                _local_4++;
            };
            this.MouvementDebut = true;
            this.MondeSourisFromage = false;
            this.JoueurSourisFromage = null;
            this.ParticuleZone.rotation = 0;
            this.ParticuleZone.x = 0;
            this.ParticuleZone.y = 0;
            this._M.rotation = 0;
            this._M.x = 0;
            this._M.y = 3;
            this.ListeBallon = new Array();
            this.ListeLienJoueur.length = 0;
            if (this.TP0.parent)
            {
                this.TP0.parent.removeChild(this.TP0);
            };
            if (this.TP1.parent)
            {
                this.TP1.parent.removeChild(this.TP1);
            };
            this.ClipServeur.visible = false;
            this.ClipInterface.visible = true;
            this.ClipInterface._CL.text = "";
            this.ClipMonde.visible = true;
            this.TempsPartieZéro = getTimer();
            while (this.ClipListeMobile.numChildren)
            {
                this.ClipListeMobile.removeChildAt(0);
            };
            var _local_5:Array = new Array();
            var _local_6:b2Body = this.MondePhysique.m_bodyList;
            while (_local_6)
            {
                _local_5.push(_local_6);
                _local_6 = _local_6.m_next;
            };
            var _local_7:int = _local_5.length;
            var _local_8:int;
            while (_local_8 < _local_7)
            {
                this.MondePhysique.DestroyBody(_local_5[_local_8]);
                _local_8++;
            };
            this.worldAABB = new b2AABB();
            this.worldAABB.lowerBound.Set(-100, -100);
            this.worldAABB.upperBound.Set(100, 100);
            if (_arg_1 == -1)
            {
                this.Monde = $Editeur.Création_Nouveau_Monde(new XMLDocument(_arg_2).firstChild);
            }
            else
            {
                this.Monde = $Res.Pouf(("$Monde_" + _arg_1));
            };
            this.MondePhysique = new b2World(this.worldAABB, new b2Vec2(0, 10), true);
            this.SpawnGuide = null;
            this.ListeMobile = new Array();
            if (_arg_1 == -1)
            {
                this.Initialisation_Base(this.Monde);
            }
            else
            {
                this.Monde.Initialisation(this, this.ClipListeMobile);
            };
            this.TempsZéro = getTimer();
            this.TimerPosition.start();
            this.MoteurActif = true;
            this.Reset_Saut();
            if (this.Monde.DistanceInvoc)
            {
                this.DistanceInvoc = (this.BaseDistanceInvoc * this.Monde.DistanceInvoc);
            }
            else
            {
                this.DistanceInvoc = this.BaseDistanceInvoc;
            };
            if (this.Monde.Gravité)
            {
                this.MondePhysique.m_gravity = new b2Vec2(this.Monde.VGX, this.Monde.VGY);
            };
            if (this.Monde.Inversion)
            {
                this.ParticuleZone.rotation = 180;
                this.ParticuleZone.x = 800;
                this.ParticuleZone.y = 400;
                this._M.rotation = 180;
                this._M.x = 800;
                this._M.y = 400;
            };
            this.MondeLien = this.Monde.Lien;
            if (this.cacheNoir.parent)
            {
                this.cacheNoir.parent.removeChild(this.cacheNoir);
            };
            this.Noire = ((this.Monde.Noire) || (_local_3));
            if (this.Noire)
            {
                this.ClipMonde.addChild(this.cacheNoir);
            };
            if (this.MondeLien)
            {
                _local_10 = $Res.Pouf("$P5");
                _local_10.gotoAndStop(1);
                _local_10.x = 12;
                _local_10.y = 30;
                this.Monde.addChild(_local_10);
            };
        }

        public function Reset_Saut():void
        {
            this.SautDisponible.Valeur = true;
            this.Saut_è_é = true;
            this.P_SD = new Object();
            this.P_SD2.Valeur = true;
            this.PSS = String.fromCharCode((101 + int((Math.random() * 100))));
            this.Saut2 = true;
            this.高峰 = 0;
            this.PositionFonction.Fonction = this.S1;
        }

        public function Affichage_Concentration(_arg_1:int, _arg_2:int):void
        {
            var _local_3:int;
            var _local_4:int;
            var _local_5:b2BodyDef;
            var _local_6:b2Body;
            var _local_7:b2PolygonDef;
            var _local_8:Shape;
            if (this.ListeConcentration[_arg_1][_arg_2] == null)
            {
                _local_3 = (_arg_1 * 10);
                _local_4 = (_arg_2 * 10);
                _local_5 = new b2BodyDef();
                _local_5.position.Set(((_local_3 + 3) / 30), ((_local_4 + 3) / 30));
                _local_5.isSleeping = true;
                _local_6 = this.MondePhysique.CreateBody(_local_5);
                this.ListeConcentration[_arg_1][_arg_2] = _local_6;
                _local_7 = new b2PolygonDef();
                _local_7.SetAsBox((10 / 60), (10 / 60));
                _local_7.filter.categoryBits = 4;
                _local_7.friction = 0.8;
                _local_7.restitution = 0.2;
                _local_6.CreateShape(_local_7);
                _local_8 = new Shape();
                _local_6.m_userData = _local_8;
                _local_8.graphics.beginFill(3294800);
                _local_8.graphics.drawRect(_local_3, _local_4, 10, 10);
                _local_8.graphics.endFill();
                this.ClipConcentration.addChild(_local_8);
                this.Explosion(9, (_local_3 + 5), (_local_4 + 5), 10, 2, false, -0.1);
            };
        }

        public function Désactivation_Conjuration(_arg_1:int, _arg_2:int):void
        {
            var _local_3:b2Body;
            if (this.ListeConcentration[_arg_1][_arg_2] != null)
            {
                _local_3 = this.ListeConcentration[_arg_1][_arg_2];
                this.MondePhysique.DestroyBody(_local_3);
                this.ListeConcentration[_arg_1][_arg_2] = null;
                this.ClipConcentration.removeChild(_local_3.m_userData);
            };
        }

        public function Init_XML():void
        {
            var _local_4:XMLNode;
            var _local_5:Array;
            var _local_6:int;
            var _local_7:Boolean;
            var _local_1:Array = this.Monde.ListeObjet;
            var _local_2:int = _local_1.length;
            var _local_3:int = -1;
            while (++_local_3 < _local_2)
            {
                _local_4 = _local_1[_local_3];
                _local_5 = _local_4.attributes.P.split(",");
                _local_6 = int(_local_4.attributes.C);
                if ((((((((_local_6 == 11) || (_local_6 == 12)) || (_local_6 == 13)) || (_local_6 == 14)) || (_local_6 == 15)) || (_local_6 == 16)) || (_local_6 == 22)))
                {
                    this.Création_Clou(_local_6, _local_4.attributes.X, _local_4.attributes.Y);
                }
                else
                {
                    _local_7 = true;
                    if (((_local_5.length > 1) && (_local_5[1] == "1")))
                    {
                        _local_7 = false;
                    };
                    this.Création_Objet_Monde(_local_6, _local_4.attributes.X, _local_4.attributes.Y, _local_5[0], 0, 0, _local_7);
                };
            };
        }

        public function Destruction_Joueur(_arg_1:int, _arg_2:int=0, _arg_3:int=0, _arg_4:Boolean=false):void
        {
            var _local_6:int;
            var _local_7:int;
            var _local_8:b2DistanceJoint;
            var _local_9:int;
            var _local_10:int;
            var _local_5:$Joueur = this.ListeJoueur[_arg_1];
            if (_local_5)
            {
                if (_arg_2 == 0)
                {
                    delete this.ListeJoueur[_arg_1];
                };
                if (_local_5.parent)
                {
                    _local_5.parent.removeChild(_local_5);
                    this.MondePhysique.DestroyBody(_local_5.Physique);
                };
                _local_5.Mort = true;
                _local_5.Score = _arg_3;
                if (_local_5.ClipJoueur)
                {
                    if (_arg_2 == 1)
                    {
                        this.Message_Chat(this.$Texte("$Pas_De_Fromage"));
                    }
                    else
                    {
                        if (_arg_2 == 2)
                        {
                            this.Message_Chat(this.$Texte("$Fromaaaage"));
                        };
                    };
                    if (this.cacheNoir.parent)
                    {
                        this.cacheNoir.parent.removeChild(this.cacheNoir);
                    };
                };
                _local_6 = this.ListeLienJoueur.length;
                _local_7 = -1;
                while (++_local_7 < _local_6)
                {
                    _local_8 = this.ListeLienJoueur[_local_7];
                    if (((_local_8.m_body1 == _local_5.Physique) || (_local_8.m_body2 == _local_5.Physique)))
                    {
                        this.ListeLienJoueur.splice(_local_7, 1);
                        _local_7--;
                        _local_6--;
                    };
                };
                _local_6 = this.ListeBallon.length;
                _local_7 = -1;
                while (++_local_7 < _local_6)
                {
                    _local_8 = this.ListeBallon[_local_7];
                    if (((_local_8.m_body1 == _local_5.Physique) || (_local_8.m_body2 == _local_5.Physique)))
                    {
                        this.ListeBallon.splice(_local_7, 1);
                        _local_7--;
                        _local_6--;
                    };
                };
                if (_arg_4)
                {
                    this.Explosion(5, _local_5.x, _local_5.y, 4, 2, false, -0.1);
                }
                else
                {
                    _local_9 = _local_5.y;
                    _local_10 = _local_5.x;
                    if (_local_9 < 0)
                    {
                        _local_9 = 0;
                    }
                    else
                    {
                        if (_local_9 > 400)
                        {
                            _local_9 = 400;
                        };
                    };
                    if (_local_10 < 0)
                    {
                        _local_10 = 0;
                    }
                    else
                    {
                        if (_local_10 > 800)
                        {
                            _local_10 = 800;
                        };
                    };
                    this.Explosion(6, _local_10, _local_9, 4, 2, false, -0.1);
                    this.Explosion(7, _local_10, _local_9, 4, 2, false, -0.1);
                    this.Explosion(8, _local_10, _local_9, 4, 2, false, -0.1);
                };
            };
        }

        public function Destruction_Mobile(_arg_1:int):void
        {
            var _local_5:b2DistanceJoint;
            var _local_2:b2Body = this.ListeMobile[_arg_1];
            var _local_3:int = this.ListeBallon.length;
            var _local_4:int = -1;
            while (++_local_4 < _local_3)
            {
                _local_5 = this.ListeBallon[_local_4];
                if (((_local_5.m_body1 == _local_2) || (_local_5.m_body2 == _local_2)))
                {
                    this.ListeBallon.splice(_local_4, 1);
                    _local_4--;
                    _local_3--;
                };
            };
            if (_local_2)
            {
                this.ListeMobile[_arg_1] = null;
                if (_local_2.m_userData.parent)
                {
                    _local_2.m_userData.parent.removeChild(_local_2.m_userData);
                };
                this.MondePhysique.DestroyBody(_local_2);
            };
        }

        public function Création_Totem(_arg_1:String):void
        {
            var _local_8:int;
            var _local_9:Array;
            var _local_10:int;
            var _local_11:int;
            var _local_2:Array = _arg_1.split("#");
            var _local_3:int = int(_local_2.shift());
            var _local_4:int = int(_local_2.shift());
            var _local_5:int = int(_local_2.shift());
            var _local_6:int = _local_2.length;
            var _local_7:int;
            while (_local_7 < _local_6)
            {
                _local_8 = int(_local_2[_local_7]);
                _local_9 = _local_2[(_local_7 + 1)].split(this.$1);
                _local_10 = _local_9[1];
                _local_11 = _local_9[2];
                if (_local_8 == 2)
                {
                    this.Creation_Objet(_local_9[0], (_local_4 + (_local_10 - 400)), (_local_5 + (_local_11 - 200)), _local_9[3], _local_9[4], _local_9[5], (_local_9[6] == "1"));
                }
                else
                {
                    if (((_local_8 == 3) && (this.ClipJoueur.CodeJoueur == _local_3)))
                    {
                        this.Création_Clou(_local_9[0], (_local_4 + (_local_10 - 400)), (_local_5 + (_local_11 - 200)));
                    };
                };
                _local_7 = (_local_7 + 2);
            };
        }

        public function Mobile_Statique(_arg_1:MovieClip, _arg_2:Array):b2PolygonDef
        {
            var _local_7:Number;
            var _local_8:Number;
            var _local_3:b2PolygonDef = new b2PolygonDef();
            var _local_4:int = _arg_2.length;
            _local_3.vertexCount = (_local_4 / 2);
            _local_3.filter.categoryBits = 4;
            _local_3.friction = 0.3;
            _local_3.density = 0;
            if (_arg_1)
            {
                _arg_1.graphics.beginFill(3294800);
            };
            var _local_5:int;
            var _local_6:int;
            while (_local_6 < _local_4)
            {
                _local_7 = _arg_2[_local_6];
                _local_8 = _arg_2[(_local_6 + 1)];
                _local_3.vertices[_local_5].Set((_local_7 / 30), (_local_8 / 30));
                if (_arg_1)
                {
                    if (_local_6 == 0)
                    {
                        _arg_1.graphics.moveTo(_local_7, _local_8);
                    }
                    else
                    {
                        _arg_1.graphics.lineTo(_local_7, _local_8);
                    };
                };
                _local_5++;
                _local_6 = (_local_6 + 2);
            };
            if (_arg_1)
            {
                _arg_1.graphics.endFill();
            };
            return (_local_3);
        }

        private function Initialisation_Position():void
        {
            this.高["MP"] = function (_arg_1:Event=null, _arg_2:Boolean=false, _arg_3:int=0):void
            {
                var _local_4:String;
                var _local_5:int;
                var _local_6:int;
                var _local_7:b2Body;
                var _local_8:b2XForm;
                var _local_9:Number;
                var _local_10:Number;
                var _local_11:b2Vec2;
                var _local_12:int;
                var _local_13:int;
                var _local_14:int;
                var _local_15:int;
                var _local_16:b2Body;
                var _local_17:int;
                var _local_18:int;
                var _local_19:b2XForm;
                var _local_20:b2Vec2;
                var _local_21:int;
                if ((((_arg_1) || (_arg_2)) && (Synchroniseur)))
                {
                    _local_4 = ((($4 + $3) + $1) + CodePartieEnCours);
                    _local_5 = ListeMobile.length;
                    _local_6 = 0;
                    for (;_local_6 < _local_5;_local_6++)
                    {
                        _local_7 = ListeMobile[_local_6];
                        if (_local_7)
                        {
                            _local_8 = _local_7.GetXForm();
                            _local_9 = (int((_local_8.position.x * 1000)) / 1000);
                            _local_10 = (int((_local_8.position.y * 1000)) / 1000);
                            if (((((-4 > _local_9) || (_local_9 > 31)) || (_local_10 > 30)) || (-30 > _local_10)))
                            {
                                Destruction_Mobile(_local_6);
                                _local_4 = (_local_4 + ($1 + "x"));
                                continue;
                            };
                            _local_11 = _local_7.GetLinearVelocity();
                            _local_12 = int(_local_7.m_userData.Type);
                            _local_13 = int(_local_7.m_userData.Dur);
                            _local_14 = ((_local_13) ? 1 : 0);
                            _local_15 = ((_local_7.IsSleeping()) ? 1 : 0);
                            _local_4 = (_local_4 + ((((((((((((((((($1 + _local_12) + ",") + _local_9) + ",") + _local_10) + ",") + (int((_local_11.x * 1000)) / 1000)) + ",") + (int((_local_11.y * 1000)) / 1000)) + ",") + (int((_local_7.GetAngle() * 1000)) / 1000)) + ",") + (int((_local_7.GetAngularVelocity() * 1000)) / 1000)) + ",") + _local_14) + ",") + _local_15));
                        }
                        else
                        {
                            _local_4 = (_local_4 + ($1 + "x"));
                        };
                    };
                    Envoie_Serveur(_local_4);
                };
                if (!ClipJoueur.Mort)
                {
                    if (_arg_1 == null)
                    {
                        _local_16 = ClipJoueur.Physique;
                        _local_17 = ((ClipJoueur.DroiteEnCours) ? 1 : 0);
                        _local_18 = ((ClipJoueur.GaucheEnCours) ? 1 : 0);
                        _local_19 = _local_16.GetXForm();
                        _local_20 = _local_16.GetLinearVelocity();
                        _local_21 = ((ClipJoueur.Saute) ? 1 : 0);
                        DernièrePX = ClipJoueur.x;
                        DernièrePY = ClipJoueur.y;
                        DernièreMAJ = getTimer();
                        Envoie_Serveur(((((((((((((((((((((($4 + $4) + $1) + CodePartieEnCours) + $1) + _local_17) + $1) + _local_18) + $1) + int((_local_19.position.x * 100))) + $1) + int((_local_19.position.y * 100))) + $1) + int((_local_20.x * 100))) + $1) + int((_local_20.y * 100))) + $1) + _local_21) + $1) + ClipJoueur.ImageSaut) + $1) + _arg_3));
                    };
                };
            };
        }

        public function Ajout_PNJ(_arg_1:Array):void
        {
            var _local_2:Array = new Array(_arg_1[1], _arg_1[0], "0", 0, "0", 5, 0, _arg_1[2], 0);
            var _local_3:$Joueur = this.Creation_Joueur(_local_2, true);
            _local_3.Physique.SetXForm(new b2Vec2((int(_arg_1[3]) / 30), (int(_arg_1[4]) / 30)), 0);
            this.ClipListeJoueur.addChild(_local_3);
            _local_3.Vers_La_Droite((_arg_1[5] == "1"));
            _local_3.NomTexte.htmlText = ("<font face='Soopafresh' size='12' color='#009D9D'>" + _arg_1[1]);
            _local_3.NomTexte.filters = new Array(new GlowFilter(0, 1, 6, 6, 4, 1));
            _local_3.NomTexte.thickness = 0;
            _local_3.NomTexte.y = (_local_3.NomTexte.y + 10);
            var _local_4:int = int(_arg_1[6]);
            if (_local_4)
            {
                _local_3.mouseEnabled = true;
                _local_3.addEventListener(MouseEvent.MOUSE_DOWN, this.Clique_PNJ);
                _local_3.addEventListener(MouseEvent.MOUSE_OVER, this.Activation_Couleur_PNJ);
                _local_3.addEventListener(MouseEvent.MOUSE_OUT, this.Desactivation_Couleur_PNJ);
                _local_3.buttonMode = true;
                _local_3.useHandCursor = true;
                _local_3.ActionPNJ = _local_4;
            }
            else
            {
                _local_3.mouseEnabled = false;
            };
        }

        private function Clique_PNJ(_arg_1:MouseEvent):void
        {
            var _local_2:$Joueur = (_arg_1.currentTarget as $Joueur);
            var _local_3:int = _local_2.ActionPNJ;
            if (_local_3 == 1)
            {
                this.ClipInterface.Clique_Magasin();
            };
            _local_2.transform.colorTransform = new ColorTransform();
        }

        private function Activation_Couleur_PNJ(_arg_1:MouseEvent):void
        {
            var _local_2:$Joueur = (_arg_1.currentTarget as $Joueur);
            _local_2.transform.colorTransform = new ColorTransform(1.4, 1.4, 1.4);
        }

        private function Desactivation_Couleur_PNJ(_arg_1:MouseEvent):void
        {
            var _local_2:$Joueur = (_arg_1.currentTarget as $Joueur);
            _local_2.transform.colorTransform = new ColorTransform();
        }

        public function Demande_Création_Sol(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int):void
        {
            this.Envoie_Serveur((((((((((this.$5 + this.$15) + this.$1) + _arg_1) + this.$1) + _arg_2) + this.$1) + _arg_3) + this.$1) + _arg_4));
        }

        public function Demande_Déplacement_Fromage(_arg_1:int, _arg_2:int):void
        {
            this.Envoie_Serveur((((((this.$5 + this.$16) + this.$1) + _arg_1) + this.$1) + _arg_2));
        }

        public function Déplacement_Fromage(_arg_1:int, _arg_2:int):void
        {
            this.ListeFromage[0] = _arg_1;
            this.ListeFromage[1] = _arg_2;
            this.ClipFromage.x = _arg_1;
            this.ClipFromage.y = _arg_2;
        }

        public function Transformation_Chamane(_arg_1:$Joueur, _arg_2:Boolean):void
        {
            if (_arg_1)
            {
                if (_arg_2)
                {
                    _arg_1.NomTexte.textColor = 16691708;
                }
                else
                {
                    _arg_1.NomTexte.textColor = 10019563;
                };
                _arg_1.NomTexte.y = -79;
                _arg_1.ParticuleZone.y--;
                _arg_1.Guide = true;
                if (_arg_2)
                {
                    _arg_1.Guide2 = true;
                };
                this.ClipListeJoueur.addChild(_arg_1);
                if (!this.ClipJoueur.Mort)
                {
                    this.ClipListeJoueur.addChild(this.ClipJoueur);
                };
                if (this.SpawnGuide)
                {
                    _arg_1.Physique.SetXForm(new b2Vec2((this.SpawnGuide.x / 30), (this.SpawnGuide.y / 30)), 0);
                }
                else
                {
                    if (this.DoubleChamane)
                    {
                        if (((_arg_2) && (this.LsTS.length > 3)))
                        {
                            _arg_1.Physique.SetXForm(new b2Vec2((this.LsTS[4] / 30), (this.LsTS[5] / 30)), 0);
                        }
                        else
                        {
                            _arg_1.Physique.SetXForm(new b2Vec2((this.LsTS[1] / 30), (this.LsTS[2] / 30)), 0);
                        };
                    };
                };
                if (_arg_1.ClipJoueur)
                {
                    this.Guide = true;
                    this.Message_Chat(this.$Texte("$Joueur_Chamane"));
                }
                else
                {
                    if (!this.DoubleChamane)
                    {
                        this.Message_Chat(this.$Texte("$Nouvelle_Chamane", _arg_1.NomJoueur));
                    };
                };
                _arg_1.Chaman();
            };
        }

        public function Génération_Explosion(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int, _arg_5:Boolean=false, _arg_6:Boolean=true, _arg_7:int=0):void
        {
            var _local_8:int;
            var _local_9:int;
            var _local_10:int;
            var _local_11:Number;
            var _local_12:Number;
            var _local_13:Number;
            var _local_14:int;
            var _local_15:int;
            var _local_16:b2Body;
            var _local_17:MovieClip;
            var _local_18:b2XForm;
            var _local_19:Number;
            if (_arg_6)
            {
                if (_arg_7 == 0)
                {
                    this.Explosion(3, (_arg_1 - 10), (_arg_2 - 10), 20, 2, false);
                    this.Explosion(1, (_arg_1 - 10), (_arg_2 - 10), 20, 2, false);
                    this.Explosion(2, (_arg_1 - 10), (_arg_2 - 10), 20, 2, false);
                    this.Explosion(0, (_arg_1 - 10), (_arg_2 - 10), 20, 2, false);
                }
                else
                {
                    if (_arg_7 == 1)
                    {
                        this.Explosion_Boule(0, _arg_1, _arg_2, 20, 2);
                    };
                };
            };
            if (!this.ClipJoueur.Mort)
            {
                _local_8 = (this.ClipJoueur.x - _arg_1);
                _local_9 = (this.ClipJoueur.y - _arg_2);
                _local_10 = Math.sqrt(((_local_8 * _local_8) + (_local_9 * _local_9)));
                if (_local_10 < _arg_4)
                {
                    _local_11 = (1 - (_local_10 / _arg_4));
                    _arg_3 = (_arg_3 * _local_11);
                    _local_12 = ((_local_8 / _local_10) * _arg_3);
                    _local_13 = ((_local_9 / _local_10) * _arg_3);
                    this.ClipJoueur.Physique.SetLinearVelocity(new b2Vec2(_local_12, _local_13));
                    var _local_20:* = this.高;
                    (_local_20["MP"]());
                };
            };
            if (((_arg_5) && (this.Synchroniseur)))
            {
                _local_14 = this.ListeMobile.length;
                _local_15 = 0;
                while (_local_15 < _local_14)
                {
                    _local_16 = this.ListeMobile[_local_15];
                    if (_local_16)
                    {
                        _local_17 = _local_16.m_userData;
                        if (((_local_17) && (_local_17.CodeObjet)))
                        {
                            _local_18 = _local_16.GetXForm();
                            _local_8 = ((_local_18.position.x * 30) - _arg_1);
                            _local_9 = ((_local_18.position.y * 30) - _arg_2);
                            _local_10 = Math.sqrt(((_local_8 * _local_8) + (_local_9 * _local_9)));
                            if (_local_10 <= _arg_4)
                            {
                                _local_11 = (1 - (_local_10 / _arg_4));
                                _local_19 = (_arg_3 * _local_11);
                                _local_12 = ((_local_8 / _local_10) * _local_19);
                                _local_13 = ((_local_9 / _local_10) * _local_19);
                                _local_16.SetLinearVelocity(new b2Vec2(_local_12, _local_13));
                                _local_16.WakeUp();
                            };
                        };
                    };
                    _local_15++;
                };
                _local_20 = this.高;
                (_local_20["MP"](null, true));
            };
        }

        public function Demande_Explosion(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int, _arg_5:Boolean=false, _arg_6:int=0):void
        {
            if (this.Synchroniseur)
            {
                if (_arg_5)
                {
                    this.Envoie_Serveur((((((((((((((this.$5 + this.$17) + this.$1) + _arg_1) + this.$1) + _arg_2) + this.$1) + _arg_3) + this.$1) + _arg_4) + this.$1) + 1) + this.$1) + _arg_6));
                }
                else
                {
                    this.Envoie_Serveur((((((((((((((this.$5 + this.$17) + this.$1) + _arg_1) + this.$1) + _arg_2) + this.$1) + _arg_3) + this.$1) + _arg_4) + this.$1) + 0) + this.$1) + _arg_6));
                };
            };
        }

        public function Demande_Giclage(_arg_1:int):void
        {
            if (((_arg_1 >= 0) && (this.ObjetsGicle.indexOf(_arg_1) == -1)))
            {
                this.ObjetsGicle.push(_arg_1);
                this.Envoie_Serveur((((this.$4 + this.$6) + this.$1) + _arg_1));
            };
        }

        public function Création_Souris_Volante(_arg_1:$Joueur):void
        {
            var _local_2:b2Body;
            var _local_6:b2Body;
            var _local_7:MovieClip;
            var _local_3:int = this.ListeMobile.length;
            var _local_4:int = -1;
            while (++_local_4 < _local_3)
            {
                _local_6 = this.ListeMobile[_local_4];
                if (_local_6)
                {
                    _local_7 = (_local_6.m_userData as MovieClip);
                    if (((_local_7) && (_local_7.CodeObjet == 28)))
                    {
                        _local_2 = _local_6;
                    };
                };
            };
            if (!_local_2)
            {
                return;
            };
            if (_arg_1.ClipJoueur)
            {
                this.BallonSouris = true;
            };
            var _local_5:b2DistanceJointDef = new b2DistanceJointDef();
            _local_5.body1 = _arg_1.Physique;
            _local_5.body2 = _local_2;
            _local_5.localAnchor1 = new b2Vec2(0, 0);
            _local_5.localAnchor2 = new b2Vec2(0, (20 / 30));
            _local_5.length = (40 / 30);
            _local_5.frequencyHz = 0;
            _local_5.dampingRatio = 0;
            this.ListeBallon.push(this.MondePhysique.CreateJoint(_local_5));
        }

        public function Détachement_Ballon_ClipJoueur():void
        {
            if (this.BallonSouris)
            {
                this.BallonSouris = false;
                this.Détachement_Ballon_Joueur(this.ClipJoueur);
                this.Envoie_Serveur((this.$8 + this.$17));
            };
        }

        public function Détachement_Ballon_Joueur(_arg_1:$Joueur):void
        {
            var _local_4:b2DistanceJoint;
            var _local_2:int = this.ListeBallon.length;
            var _local_3:int = -1;
            while (++_local_3 < _local_2)
            {
                _local_4 = this.ListeBallon[_local_3];
                if (((_local_4.m_body1 == _arg_1.Physique) || (_local_4.m_body2 == _arg_1.Physique)))
                {
                    this.ListeBallon.splice(_local_3, 1);
                    _local_3--;
                    _local_2--;
                    _local_4.m_body1.m_jointList = null;
                    _local_4.m_body2.m_jointList = null;
                };
            };
        }

        public function Création_Clou(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:b2Body=null):void
        {
            var _local_11:b2Body;
            var _local_12:b2Body;
            var _local_13:MovieClip;
            var _local_14:$Joueur;
            var _local_15:String;
            var _local_16:b2Vec2;
            var _local_17:int;
            var _local_18:b2Body;
            var _local_19:b2Vec2;
            var _local_20:Number;
            var _local_21:Number;
            var _local_22:Number;
            var _local_23:int;
            var _local_24:b2Vec2;
            var _local_25:Number;
            var _local_26:Number;
            var _local_27:Number;
            var _local_28:int;
            var _local_5:Boolean = ((((_arg_1 == 11) || (_arg_1 == 12)) || (_arg_1 == 13)) || (_arg_1 == 88));
            var _local_6:Array = new Array();
            if (_arg_4)
            {
                _local_6.push(_arg_4);
            };
            var _local_7:int = this.ListeMobile.length;
            var _local_8:int;
            while (_local_8 < _local_7)
            {
                _local_12 = this.ListeMobile[_local_8];
                if (_local_12)
                {
                    _local_13 = (_local_12.m_userData as MovieClip);
                    if (!((_local_5) && (_local_13.Sol)))
                    {
                        if (_local_13.hitTestPoint((_arg_2 + this.DécalageStage.x), _arg_3, true))
                        {
                            _local_6.push(_local_12);
                            if (_arg_1 == 66) break;
                        };
                    };
                };
                _local_8++;
            };
            var _local_9:int = _local_6.length;
            if (((_arg_1 == 66) && (_local_9 == 1)))
            {
                for each (_local_14 in this.ListeJoueur)
                {
                    if (!_local_14.Mort)
                    {
                        if (((((_local_14.x < (_arg_2 + 10)) && (_local_14.x > (_arg_2 - 10))) && (_local_14.y < (_arg_3 + 10))) && (_local_14.y > (_arg_3 - 10))))
                        {
                            this.Envoie_Serveur((((this.$8 + this.$16) + this.$1) + _local_14.CodeJoueur));
                            return;
                        };
                    };
                };
                return;
            };
            var _local_10:int;
            if (_local_9 == 0)
            {
                return;
            };
            if (!_local_5)
            {
                if (_local_9 == 1)
                {
                    return;
                };
                _local_11 = _local_6[0];
                _local_10 = 1;
            }
            else
            {
                _local_11 = this.PhysiqueSol;
            };
            if (_local_9)
            {
                _local_15 = (this.$5 + this.$7);
                _local_16 = new b2Vec2((_arg_2 / 30), (_arg_3 / 30));
                _local_17 = _local_10;
                while (_local_17 < _local_9)
                {
                    _local_18 = _local_6[_local_17];
                    _local_19 = _local_18.GetLocalPoint(_local_16);
                    _local_20 = (int((_local_19.x * 1000)) / 1000);
                    _local_21 = (int((_local_19.y * 1000)) / 1000);
                    _local_22 = (int((_local_18.GetAngle() * 1000)) / 1000);
                    if (_local_18 == this.PhysiqueSol)
                    {
                        _local_23 = -2;
                    }
                    else
                    {
                        _local_23 = this.ListeMobile.indexOf(_local_18);
                    };
                    _local_24 = _local_11.GetLocalPoint(_local_16);
                    _local_25 = (int((_local_24.x * 1000)) / 1000);
                    _local_26 = (int((_local_24.y * 1000)) / 1000);
                    _local_27 = (int((_local_11.GetAngle() * 1000)) / 1000);
                    if (_local_11 == this.PhysiqueSol)
                    {
                        _local_28 = -2;
                    }
                    else
                    {
                        _local_28 = this.ListeMobile.indexOf(_local_11);
                    };
                    _local_15 = (_local_15 + (((((((((((((((((this.$1 + _arg_1) + ",") + _local_23) + ",") + _local_20) + ",") + _local_21) + ",") + _local_22) + ",") + _local_28) + ",") + _local_25) + ",") + _local_26) + ",") + _local_27));
                    _local_11 = _local_18;
                    _local_17++;
                };
                this.Envoie_Serveur(_local_15);
            };
        }

        public function Souris_Grosse(_arg_1:$Joueur):void
        {
            _arg_1.Grosse = true;
            _arg_1.MAJ_Grosse();
            _arg_1.Physique.SetMass(this.MasseSourisGrosse);
        }

        public function Création_Lien(_arg_1:int, _arg_2:int, _arg_3:Number, _arg_4:Number, _arg_5:Number, _arg_6:int, _arg_7:Number, _arg_8:Number, _arg_9:Number):void
        {
            var _local_11:b2Body;
            var _local_12:b2Body;
            var _local_13:b2DistanceJointDef;
            var _local_14:b2RevoluteJointDef;
            var _local_15:ApplicationDomain;
            var _local_16:MovieClip;
            var _local_10:Boolean = ((((_arg_1 == 11) || (_arg_1 == 12)) || (_arg_1 == 13)) || (_arg_1 == 88));
            if (_arg_2 == -2)
            {
                _local_11 = this.PhysiqueSol;
            }
            else
            {
                _local_11 = this.ListeMobile[_arg_2];
            };
            if (_arg_6 == -2)
            {
                _local_12 = this.PhysiqueSol;
            }
            else
            {
                _local_12 = this.ListeMobile[_arg_6];
            };
            if (((_local_11) && (_local_12)))
            {
                if (_arg_1 == 66)
                {
                    _local_13 = new b2DistanceJointDef();
                    _local_13.body1 = _local_11;
                    _local_13.body2 = _local_12;
                    _local_13.localAnchor1 = new b2Vec2(_arg_3, _arg_4);
                    _local_13.localAnchor2 = new b2Vec2(0, (20 / 30));
                    _local_13.length = (80 / 30);
                    _local_13.frequencyHz = 0;
                    _local_13.dampingRatio = 0;
                    this.ListeBallon.push(this.MondePhysique.CreateJoint(_local_13));
                }
                else
                {
                    _local_14 = new b2RevoluteJointDef();
                    if (((((!(_arg_2 == -2)) && (!(_arg_6 == -2))) && (_local_10)) || (_arg_1 == 22)))
                    {
                        _local_14.enableLimit = true;
                        if (_arg_1 == 22)
                        {
                            _local_14.lowerAngle = -0.1;
                            _local_14.upperAngle = 0.1;
                        }
                        else
                        {
                            _local_14.lowerAngle = 0;
                            _local_14.upperAngle = 0;
                        };
                    }
                    else
                    {
                        if (_arg_2 == -2)
                        {
                            _local_12.m_userData.Sol = true;
                        }
                        else
                        {
                            _local_11.m_userData.Sol = true;
                        };
                    };
                    _local_14.body1 = _local_11;
                    _local_14.body2 = _local_12;
                    _local_14.localAnchor1 = new b2Vec2(_arg_3, _arg_4);
                    _local_14.localAnchor2 = new b2Vec2(_arg_7, _arg_8);
                    _local_14.referenceAngle = (_arg_9 - _arg_5);
                    if (((_arg_1 == 12) || (_arg_1 == 15)))
                    {
                        _local_14.enableMotor = true;
                        _local_14.motorSpeed = -0.4;
                        _local_14.maxMotorTorque = 1000000;
                    }
                    else
                    {
                        if ((((_arg_1 == 13) || (_arg_1 == 16)) || (_arg_1 == 88)))
                        {
                            _local_14.enableMotor = true;
                            _local_14.motorSpeed = 0.4;
                            _local_14.maxMotorTorque = 1000000;
                            if (_arg_1 == 88)
                            {
                                _local_14.motorSpeed = 20;
                            };
                        };
                    };
                    if (_arg_1 == 88)
                    {
                        _arg_1 = 11;
                    };
                    this.MondePhysique.CreateJoint(_local_14);
                };
                if (!_local_11.m_userData.Lien)
                {
                    _local_15 = this.loaderInfo.applicationDomain;
                    _local_16 = $Res.Pouf(("$Objet_" + _arg_1));
                    if (_local_10)
                    {
                        _local_11.m_userData.Lien = true;
                    };
                    _local_11.m_userData.addChild(_local_16);
                    _local_16.x = (_arg_3 * 30);
                    _local_16.y = (_arg_4 * 30);
                };
                _local_11.WakeUp();
                _local_12.WakeUp();
            };
        }

        public function Init_Guide():void
        {
            var _local_1:Array;
            var _local_2:MovieClip;
            var _local_3:int;
            var _local_4:int;
            var _local_5:int;
            var _local_6:int;
            var _local_7:int;
            var _local_8:int;
            var _local_9:int;
            var _local_10:int;
            var _local_11:Boolean;
            var _local_12:int;
            var _local_13:ApplicationDomain;
            var _local_14:MovieClip;
            var _local_15:MovieClip;
            var _local_16:MovieClip;
            var _local_17:Number;
            this.ObjetEnCours = null;
            if (this.Guide)
            {
                this.ListeClipObjet = new Array();
                this.AutoClou = false;
                this.InterfaceListeObjet.Vider();
                if (this.Monde444)
                {
                    _local_1 = this.ListeObjetDispo444.slice();
                }
                else
                {
                    _local_1 = this.ListeObjetDispo.slice();
                };
                if (this.Monde.Aaaah)
                {
                    _local_1 = new Array(0, 24, 88);
                }
                else
                {
                    if (this.Monde.ObjetInterdit)
                    {
                        _local_5 = this.Monde.ObjetInterdit.length;
                        _local_6 = 0;
                        while (_local_6 < _local_5)
                        {
                            _local_7 = this.Monde.ObjetInterdit[_local_6];
                            _local_8 = _local_1.length;
                            _local_9 = 0;
                            while (_local_9 < _local_8)
                            {
                                if (_local_1[_local_9] == _local_7)
                                {
                                    _local_1.splice(_local_9, 1);
                                    break;
                                };
                                _local_9++;
                            };
                            _local_6++;
                        };
                    };
                };
                _local_3 = _local_1.length;
                _local_4 = 0;
                while (_local_4 < _local_3)
                {
                    _local_10 = _local_1[_local_4];
                    _local_11 = _local_1[(_local_4 + 1)];
                    _local_12 = _local_1[(_local_4 + 1)];
                    _local_13 = this.loaderInfo.applicationDomain;
                    _local_14 = $Res.Pouf(("$Objet_" + _local_10));
                    _local_15 = $Res.Pouf(("$Objet_" + _local_12));
                    if (_local_10 == 0)
                    {
                        _local_14.gotoAndStop(14);
                    }
                    else
                    {
                        if (((_local_10 == 26) || (_local_10 == 27)))
                        {
                            _local_14.gotoAndStop(1);
                            if (_local_15)
                            {
                                _local_15.gotoAndStop(1);
                            };
                        };
                    };
                    _local_16 = $Res.Pouf("$ObjetInterface");
                    _local_16._O1.addChild(_local_14);
                    this.ListeClipObjet.push(_local_16._O1);
                    if (_local_11)
                    {
                        _local_16._O2.addChild(_local_15);
                        this.ListeClipObjet.push(_local_16._O2);
                    };
                    _local_16.x = 2;
                    _local_16._O1.buttonMode = true;
                    _local_16._O1.useHandCursor = true;
                    _local_16._O1.mouseChildren = false;
                    _local_16._O2.buttonMode = true;
                    _local_16._O2.useHandCursor = true;
                    _local_16._O2.mouseChildren = false;
                    _local_16._O1.Code = _local_10;
                    _local_16._O2.Code = _local_12;
                    if (!_local_2)
                    {
                        _local_2 = _local_16._O1;
                    };
                    _local_14.x = 32;
                    _local_14.y = 20;
                    _local_15.x = 32;
                    _local_15.y = 20;
                    if (_local_14.height > 36)
                    {
                        _local_17 = (36 / _local_14.height);
                        _local_14.height = 36;
                        _local_14.width = (_local_14.width * _local_17);
                    };
                    if (_local_14.width > 61)
                    {
                        _local_17 = (61 / _local_14.width);
                        _local_14.width = 61;
                        _local_14.height = (_local_14.height * _local_17);
                    };
                    if (_local_11)
                    {
                        if (_local_15.height > 36)
                        {
                            _local_17 = (36 / _local_15.height);
                            _local_15.height = 36;
                            _local_15.width = (_local_15.width * _local_17);
                        };
                        if (_local_15.width > 61)
                        {
                            _local_17 = (61 / _local_15.width);
                            _local_15.width = 61;
                            _local_15.height = (_local_15.height * _local_17);
                        };
                    };
                    _local_16._O1.addEventListener(MouseEvent.MOUSE_DOWN, this.Clique_Guide);
                    if (_local_11)
                    {
                        _local_16._O2.addEventListener(MouseEvent.MOUSE_DOWN, this.Clique_Guide);
                    };
                    this.Vignette(_local_16._O1, this.NomObjet[_local_10]);
                    if (_local_11)
                    {
                        this.Vignette(_local_16._O2, this.NomObjet[_local_12]);
                    };
                    this.InterfaceListeObjet.Ajout_Element(_local_16);
                    _local_4 = (_local_4 + 2);
                };
                this.InterfaceListeObjet.Rendu();
            }
            else
            {
                this.Annulation_Placement_Objet();
                this.InterfaceListeObjet.Vider();
            };
            this.InterfaceListeObjet.Position(0);
        }

        public function Clique_Guide(_arg_1:MouseEvent):void
        {
            this.AutoClou = false;
            var _local_2:MovieClip = (_arg_1.currentTarget as MovieClip);
            this.Clique_Placement_Objet(_local_2.Code);
        }

        public function Selection_Objet_Clavier(_arg_1:int):void
        {
            if (((!(this.InvocationEnCours)) && (this.ListeClipObjet[_arg_1])))
            {
                this.Clique_Placement_Objet(this.ListeClipObjet[_arg_1].Code);
            };
        }

        public function Clique_Placement_Objet(_arg_1:int):void
        {
            this.Annulation_Placement_Objet();
            this.ObjetEnCours = this.Objet_Transparent("OB", _arg_1, this.ClipMonde.mouseX, (this.ClipMonde.mouseY + 3), 0, false);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, this.Boucle_Placement);
            stage.addEventListener(MouseEvent.MOUSE_WHEEL, this.Boucle_Molette);
            this.ClipMonde.addEventListener(MouseEvent.MOUSE_DOWN, this.Validation_Placement_Objet);
            this.ObjetEnCours.Code = _arg_1;
            this.ObjetEnCours.Dur = true;
            this.MAJ_Force_Porté();
            this.HorsDePorté = false;
        }

        public function Objet_Transparent(_arg_1:String, _arg_2:int, _arg_3:int, _arg_4:int, _arg_5:int, _arg_6:Boolean=false):MovieClip
        {
            var _local_7:MovieClip = $Res.Pouf(("$Objet_" + _arg_2));
            _local_7.mouseEnabled = false;
            _local_7.mouseChildren = false;
            _local_7.x = _arg_3;
            _local_7.y = _arg_4;
            if (this.Monde444)
            {
                _local_7.transform.colorTransform = this.CouleurBase;
            }
            else
            {
                _local_7.transform.colorTransform = this.CouleurBleue;
            };
            _local_7.rotation = _arg_5;
            _local_7.name = _arg_1;
            this.ClipOP.addChild(_local_7);
            if (_arg_2 == 0)
            {
                _local_7.gotoAndStop(14);
            };
            if (_arg_6)
            {
                this.Explosion(0, _local_7.x, _local_7.y, 20, 2, false, -0.1);
            };
            return (_local_7);
        }

        public function Supprimer_OP(_arg_1:String):void
        {
            var _local_2:DisplayObject = this.ClipOP.getChildByName(_arg_1);
            if (_local_2)
            {
                this.ClipOP.removeChild(_local_2);
            };
        }

        public function MAJ_Force_Porté():void
        {
            var _local_1:int;
            var _local_2:int;
            var _local_3:int;
            if (this.ObjetEnCours)
            {
                if ((((this.ObjetEnCours.Code == 0) || (this.ObjetEnCours.Code == 88)) || (this.Monde444)))
                {
                    this.HorsDePorté = false;
                    return;
                };
                if (this.ObjetEnCours.Code == 24)
                {
                    this.HorsDePorté = false;
                };
                _local_1 = (this.ObjetEnCours.x - this.ClipJoueur.x);
                _local_2 = (this.ObjetEnCours.y - this.ClipJoueur.y);
                _local_3 = Math.sqrt(((_local_1 * _local_1) + (_local_2 * _local_2)));
                if (_local_3 > this.DistanceInvoc)
                {
                    this.ObjetEnCours.transform.colorTransform = this.CouleurZéro;
                    this.HorsDePorté = true;
                }
                else
                {
                    if (this.ObjetEnCours.Dur)
                    {
                        this.ObjetEnCours.transform.colorTransform = this.CouleurBase;
                    }
                    else
                    {
                        if (this.ObjetEnCours.Code == 24)
                        {
                            this.ObjetEnCours.transform.colorTransform = this.CouleurRouge;
                        }
                        else
                        {
                            this.ObjetEnCours.transform.colorTransform = this.CouleurEther;
                        };
                    };
                    this.HorsDePorté = false;
                };
            };
        }

        public function Utilisation_Concentration():void
        {
            if (this.Guide)
            {
                this.Cx = -1;
                this.Cy = -1;
                this.ConcentrationActive = true;
                stage.addEventListener(MouseEvent.MOUSE_UP, this.Annulation_Concentration);
                stage.addEventListener(MouseEvent.MOUSE_MOVE, this.Concentration_Boucle);
                this.ClipJoueur.Animation_Invocation(this.ClipJoueur.AnimDroite);
                this.Envoie_Serveur((this.$4 + this.$12));
                this.Concentration_Boucle(null);
            };
        }

        public function Annulation_Concentration(_arg_1:Event):void
        {
            stage.removeEventListener(MouseEvent.MOUSE_UP, this.Annulation_Concentration);
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.Concentration_Boucle);
            this.ConcentrationActive = false;
            this.ClipJoueur.Animation_Statique(this.ClipJoueur.AnimDroite);
            this.Envoie_Serveur((this.$4 + this.$13));
        }

        public function Concentration_Boucle(_arg_1:MouseEvent):void
        {
            var _local_2:int;
            var _local_3:int;
            var _local_4:int;
            var _local_5:int;
            var _local_6:int;
            if ((((this.Guide) && (this.ConcentrationActive)) && (!(this.ClipJoueur.Mort))))
            {
                _local_2 = (this.ClipMonde.mouseX - this.ClipJoueur.x);
                _local_3 = (this.ClipMonde.mouseY - this.ClipJoueur.y);
                _local_4 = Math.sqrt(((_local_2 * _local_2) + (_local_3 * _local_3)));
                if (_local_4 < 100)
                {
                    _local_5 = int(int((this.ClipMonde.mouseX / 10)));
                    _local_6 = int(int((this.ClipMonde.mouseY / 10)));
                    _local_5 = ((_local_5 > 79) ? 79 : _local_5);
                    _local_6 = ((_local_6 > 39) ? 39 : _local_6);
                    _local_5 = ((_local_5 < 0) ? 0 : _local_5);
                    _local_6 = ((_local_6 < 0) ? 0 : _local_6);
                    if ((((!(this.Cx == _local_5)) || (!(this.Cy == _local_6))) && (this.ListeConcentration[_local_5][_local_6] == null)))
                    {
                        this.Cx = _local_5;
                        this.Cy = _local_6;
                        this.Affichage_Concentration(_local_5, _local_6);
                        this.Envoie_Serveur((((((this.$4 + this.$14) + this.$1) + _local_5) + this.$1) + _local_6));
                    };
                };
                if (_arg_1)
                {
                    _arg_1.updateAfterEvent();
                };
            };
        }

        public function Validation_Placement_Objet(_arg_1:Event):void
        {
            var _local_5:MovieClip;
            if (this.ObjetEnCours.Code == 88)
            {
                this.Utilisation_Concentration();
                return;
            };
            var _local_2:int = (this.ObjetEnCours.x - this.ClipJoueur.x);
            var _local_3:int = (this.ObjetEnCours.y - this.ClipJoueur.y);
            var _local_4:int = Math.sqrt(((_local_2 * _local_2) + (_local_3 * _local_3)));
            if (((((this.ObjetEnCours.Code == 0) || (this.ObjetEnCours.Code == 24)) || (this.Monde444)) || (_local_4 < this.DistanceInvoc)))
            {
                this.PosFinObjetX = this.ObjetEnCours.x;
                this.PosFinObjetY = this.ObjetEnCours.y;
                stage.addEventListener(MouseEvent.MOUSE_UP, this.Annulation_Invocation);
                Mouse.hide();
                _local_5 = this.ClipJoueur.BarreDinvoc;
                _local_5._M.width = 0;
                _local_5._H.x = 0;
                this.InvocationEnCours = true;
                this.DébutInvocation = getTimer();
                this.ClipJoueur.addChild(this.ClipJoueur.BarreDinvoc);
                if (this.ClipJoueur.x < this.ObjetEnCours.x)
                {
                    if (this.ClipJoueur.Vers_La_Droite(true))
                    {
                        this.Envoie_Serveur((((this.$4 + this.$8) + this.$1) + 0));
                    };
                    this.ClipJoueur.Animation_Statique(true);
                }
                else
                {
                    if (this.ClipJoueur.Vers_La_Droite(false))
                    {
                        this.Envoie_Serveur((((this.$4 + this.$8) + this.$1) + 1));
                    };
                    this.ClipJoueur.Animation_Statique(false);
                };
                this.ClipJoueur.DroiteEnCours = false;
                this.ClipJoueur.GaucheEnCours = false;
                var _local_6:* = this.高;
                (_local_6["MP"]());
                if (this.ObjetEnCours.Code == 0)
                {
                    this.TempsInvoc = 0;
                }
                else
                {
                    this.TempsInvoc = this.BaseTempsInvoc;
                    this.Envoie_Serveur((((((((((this.$5 + this.$8) + this.$1) + this.ObjetEnCours.Code) + this.$1) + this.PosFinObjetX) + this.$1) + this.PosFinObjetY) + this.$1) + int(this.ObjetEnCours.rotation)));
                    this.ClipJoueur.Animation_Invocation(this.ClipJoueur.AnimDroite);
                };
            };
        }

        public function Annulation_Invocation(_arg_1:Event=null):void
        {
            if (this.InvocationEnCours)
            {
                if (this.ObjetEnCours)
                {
                    this.ObjetEnCours.x = mouseX;
                    this.ObjetEnCours.y = mouseY;
                };
                Mouse.show();
                this.InvocationEnCours = false;
                if (this.ClipJoueur.BarreDinvoc.parent)
                {
                    this.ClipJoueur.removeChild(this.ClipJoueur.BarreDinvoc);
                };
                this.Envoie_Serveur((this.$5 + this.$9));
                this.ClipJoueur.Animation_Statique(this.ClipJoueur.AnimDroite);
            };
        }

        public function Validation_Placement_Objet_Fin():void
        {
            var _local_4:MovieClip;
            var _local_5:Point;
            var _local_1:MovieClip = this.ObjetEnCours;
            var _local_2:int = _local_1.Code;
            if ((((_local_2 > 10) && (_local_2 < 17)) || (_local_2 == 22)))
            {
                if (this.Monde444)
                {
                    this.Envoie_Serveur((((((((this.$5 + this.$13) + this.$1) + _local_2) + this.$1) + this.PosFinObjetX) + this.$1) + (this.PosFinObjetY - 3)));
                };
                this.Création_Clou(_local_2, this.PosFinObjetX, (this.PosFinObjetY - 3));
                this.Annulation_Invocation();
                this.Annulation_Placement_Objet();
                return;
            };
            var _local_3:b2Body = this.Creation_Objet(_local_2, int(_local_1.x), int(_local_1.y), int(_local_1.rotation), 0, 0, _local_1.Dur);
            this.Envoie_Serveur((((((((((((((((this.$5 + this.$20) + this.$1) + _local_2) + this.$1) + this.PosFinObjetX) + this.$1) + (this.PosFinObjetY - 3)) + this.$1) + int(_local_1.rotation)) + this.$1) + 0) + this.$1) + 0) + this.$1) + String(((_local_1.Dur) ? 1 : 0))));
            if (this.AutoClou)
            {
                this.AutoClou = false;
                _local_4 = (this.ObjetEnCours.getChildAt((this.ObjetEnCours.numChildren - 1)) as MovieClip);
                _local_5 = _local_4.localToGlobal(new Point(0, 0));
                _local_5.x = (_local_5.x - this.DécalageStage.x);
                if (_local_2 == 28)
                {
                    this.Création_Clou(this.AutoClouCode, _local_5.x, (_local_5.y - 3), _local_3);
                }
                else
                {
                    this.Création_Clou(this.AutoClouCode, _local_5.x, (_local_5.y - 3));
                };
            };
            this.Annulation_Invocation();
            this.Annulation_Placement_Objet();
        }

        public function Etherisation():void
        {
            if (this.ObjetEnCours)
            {
                if (this.ObjetEnCours.Dur)
                {
                    this.ObjetEnCours.Dur = false;
                }
                else
                {
                    this.ObjetEnCours.Dur = true;
                };
                this.MAJ_Force_Porté();
            };
        }

        public function Création_Objet_Monde(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int=0, _arg_5:Number=0, _arg_6:Number=0, _arg_7:Boolean=true):b2Body
        {
            var _local_8:b2Body = this.Creation_Objet(_arg_1, _arg_2, _arg_3, _arg_4, _arg_5, _arg_6, _arg_7);
            this.Envoie_Serveur((((((((((((((((this.$5 + this.$21) + this.$1) + _arg_1) + this.$1) + _arg_2) + this.$1) + _arg_3) + this.$1) + _arg_4) + this.$1) + _arg_5) + this.$1) + _arg_6) + this.$1) + String(((_arg_7) ? 1 : 0))));
            return (_local_8);
        }

        public function Demande_Création_Clou(_arg_1:int, _arg_2:int, _arg_3:int):void
        {
            this.Création_Clou(_arg_1, _arg_2, _arg_3);
        }

        public function Annulation_Placement_Objet():void
        {
            this.AutoClouCode = 0;
            if (this.ObjetEnCours)
            {
                stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.Boucle_Placement);
                stage.removeEventListener(MouseEvent.MOUSE_WHEEL, this.Boucle_Molette);
                this.ClipMonde.removeEventListener(MouseEvent.MOUSE_DOWN, this.Validation_Placement_Objet);
                if (this.ObjetEnCours.parent)
                {
                    this.ClipOP.removeChild(this.ObjetEnCours);
                };
                this.ObjetEnCours = null;
            };
        }

        public function Boucle_Placement(_arg_1:MouseEvent):void
        {
            if (!this.InvocationEnCours)
            {
                if (this.ObjetEnCours)
                {
                    this.ObjetEnCours.x = mouseX;
                    if (this.AutoClouCode == 66)
                    {
                        this.ObjetEnCours.y = (mouseY - 50);
                    }
                    else
                    {
                        this.ObjetEnCours.y = mouseY;
                    };
                    if (_arg_1)
                    {
                        _arg_1.updateAfterEvent();
                    };
                };
            };
        }

        public function Boucle_Molette(_arg_1:MouseEvent):void
        {
            var _local_2:int;
            if (((this.ObjetEnCours) && (!(this.InvocationEnCours))))
            {
                if (_arg_1.delta < 0)
                {
                    _local_2 = 15;
                }
                else
                {
                    _local_2 = -15;
                };
                this.ObjetEnCours.rotation = (this.ObjetEnCours.rotation + _local_2);
            };
        }

        public function Demande_Changement_Gravité(_arg_1:Number, _arg_2:Number):void
        {
            this.Envoie_Serveur((((((this.$5 + this.$22) + this.$1) + _arg_1) + this.$1) + _arg_2));
        }

        public function Init_TP():void
        {
            this.TP0 = new $ParticuleZone(0, 0, 62, 62);
            this.TP1 = new $ParticuleZone(0, 0, 62, 62);
            var _local_1:$Particule = new $Particule(new $ParticuleZero($Res.Pouf("$Objet_26")));
            _local_1.x = (_local_1.y = 31);
            this.TP0.ListeParticule.push(_local_1);
            _local_1 = new $Particule(new $ParticuleZero($Res.Pouf("$Objet_27")));
            _local_1.x = (_local_1.y = 31);
            this.TP1.ListeParticule.push(_local_1);
        }

        public function Activation_TP(_arg_1:Boolean, _arg_2:int, _arg_3:int):void
        {
            var _local_4:$ParticuleZone;
            if (_arg_1)
            {
                _local_4 = this.TP0;
            }
            else
            {
                _local_4 = this.TP1;
            };
            if (_arg_3 == 0)
            {
                if (_local_4.parent)
                {
                    _local_4.parent.removeChild(_local_4);
                };
                return;
            };
            if (!_local_4.stage)
            {
                this.Monde.addChild(_local_4);
            };
            _local_4.x = (_arg_2 - 31);
            _local_4.y = (_arg_3 - 31);
        }

        public function Téléportation(_arg_1:b2Body, _arg_2:Boolean):void
        {
            var _local_3:$ParticuleZone;
            if (_arg_2)
            {
                _local_3 = this.TP1;
                this.Explosion(9, (this.TP0.x + 31), (this.TP0.y + 31), 20, 2, false, -0.1);
            }
            else
            {
                _local_3 = this.TP0;
                this.Explosion(11, (this.TP1.x + 31), (this.TP1.y + 31), 20, 2, false, -0.1);
            };
            _arg_1.SetXForm(new b2Vec2(((_local_3.x + 31) / 30), ((_local_3.y + 31) / 30)), _arg_1.GetAngle());
        }

        public function Init_Serveur(_arg_1:String, _arg_2:int):void
        {
            if (this.ConnexionAutorisée)
            {
                this.ClipServeur.Texte.text = this.$Texte("$Connexion_Serveur");
                if (this.Serveur)
                {
                    this.Serveur.removeEventListener(Event.CONNECT, this.Connexion);
                    this.Serveur.removeEventListener(Event.CLOSE, this.Deconnexion);
                    this.Serveur.removeEventListener(IOErrorEvent.IO_ERROR, this.Connexion_Impossible);
                    this.Serveur.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.Connexion_Interdite);
                    this.Serveur.removeEventListener(DataEvent.DATA, this.Reception);
                    this.Serveur.close();
                };
                this.Serveur = new XMLSocket(_arg_1, _arg_2);
                this.Serveur.addEventListener(Event.CONNECT, this.Connexion);
                this.Serveur.addEventListener(Event.CLOSE, this.Deconnexion);
                this.Serveur.addEventListener(IOErrorEvent.IO_ERROR, this.Connexion_Impossible);
                this.Serveur.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.Connexion_Interdite);
                this.Serveur.addEventListener(DataEvent.DATA, this.Reception);
                this.勇[0] = this.Serveur.send;
            }
            else
            {
                this.ClipServeur.Texte.text = this.$Texte("$Version_Chargeur");
            };
        }

        public function Chargement_Ressources():void
        {
            if (this.ConnexionAutorisée)
            {
                this.ClipServeur.Texte.text = this.$Texte("$Chargement_2");
                $Res.Ajouter_Bibliotheque(ApplicationDomain.currentDomain);
                this.Chargeur.contentLoaderInfo.addEventListener(Event.COMPLETE, this.Chargement_Ressources_Ok);
                this.Chargeur.loadBytes($Res.New_Ressources_Class());
            }
            else
            {
                this.ClipServeur.Texte.text = this.$Texte("$Version_Chargeur");
            };
        }

        public function Chargement_Ressources_Ok(E:Event):void
        {
            var FondCarte:MovieClip;
            var UrlInfo:Array;
            try
            {
                $Res.Ajouter_Bibliotheque(this.Chargeur.contentLoaderInfo.applicationDomain);
                FondCarte = $Res.Pouf("FondCarte");
                FondCarte.mouseEnabled = false;
                FondCarte.mouseChildren = false;
                FondCarte.cacheAsBitmap = true;
                this._M.addChildAt(FondCarte, 0);
                this.Init_TP();
                if (this.VersionDebug)
                {
                    this.ChargeurConfigXml.load(new URLRequest("./Transformice.xml"));
                }
                else
                {
                    UrlInfo = this.loaderInfo.url.split("Transformice.swf");
                    this.ChargeurConfigXml.load(new URLRequest(((UrlInfo[0] + "Transformice.xml?d=") + new Date().getTime())));
                };
            }
            catch(e:Error)
            {
                ClipServeur.Texte.text = e;
                _A.Temps_OK();
            };
        }

        public function Chargement_Info_Serveur_Ok(E:Event):void
        {
            var InfoCPM:Array;
            var cpm:CPMStar;
            var ValeurMochi:Number;
            var SauvegardeMochi:SharedObject;
            var DernierAffichage:Number;
            var DateEnCours:Number;
            var InfoS2:Array;
            var Infos:XMLDocument = new XMLDocument();
            Infos.ignoreWhite = true;
            Infos.parseXML(this.ChargeurConfigXml.data);
            var ListeServeur:Array = Infos.firstChild.childNodes;
            this.峰峰 = (!(Infos.firstChild.attributes.X == null));
            var InfosCPMStar:String = Infos.firstChild.attributes.C;
            if (((Capabilities.playerType == "StandAlone") && (!(InfosCPMStar))))
            {
                InfosCPMStar = "88,5,20";
            };
            this.PubCPMStar = (!(InfosCPMStar == null));
            if (((this.PubCPMStar) && (!(this.VersionDebug))))
            {
                InfoCPM = InfosCPMStar.split(",");
                if (Capabilities.playerType == "StandAlone")
                {
                    InfoCPM[0] = "88";
                };
                cpm = new CPMStar(InfoCPM[0], InfoCPM[1], InfoCPM[2]);
                cpm.Affichage(this);
            }
            else
            {
                this.Mochi = (!(Infos.firstChild.attributes.M == null));
                if (this.Mochi)
                {
                    ValeurMochi = (int(Infos.firstChild.attributes.M) * 3600000);
                    if (ValeurMochi)
                    {
                        try
                        {
                            SauvegardeMochi = SharedObject.getLocal("TM");
                            DernierAffichage = Number(SauvegardeMochi.data.T);
                            DateEnCours = new Date().getTime();
                            if ((DateEnCours - DernierAffichage) < ValeurMochi)
                            {
                                this.Mochi = false;
                            }
                            else
                            {
                                SauvegardeMochi.data.T = DateEnCours;
                                SauvegardeMochi.flush();
                            };
                        }
                        catch(E:Error)
                        {
                        };
                    };
                };
            };
            this.Changement_Langue(Infos.firstChild.attributes.L);
            this.VersionRusse = (!(Infos.firstChild.attributes.R == null));
            var InfoConnexion:Array = Infos.firstChild.firstChild.attributes.I.split(":");
            var S2:String = Infos.firstChild.firstChild.attributes.S;
            if (S2)
            {
                this.ServeurSecondaire = true;
                InfoS2 = S2.split("#");
                this.LimiteJoueur = int(InfoS2[0]);
                this.IPSecondaire = InfoS2[1];
                this.PortSecondaire = int(InfoS2[2]);
                this.AdresseSecondaire = InfoS2[3];
            };
            var U2:String = loaderInfo.loaderURL;
            if ((((Capabilities.playerType == "StandAlone") && (this.DécalageStage.x == 0)) && (!(this.VersionDebug))))
            {
                return;
            };
            if ((((Capabilities.playerType == "StandAlone") && (!(Capabilities.version.split(" ")[1] == "10,1,85,3"))) && (!(this.VersionDebug))))
            {
                return;
            };
            this.Init_Serveur(InfoConnexion[0], InfoConnexion[1]);
            this.Initialisation_Particule();
            this.ClipInterface.Init();
            stage.quality = StageQuality.HIGH;
            this._A.Temps_OK();
            this._Serveur.visible = true;
            this._A.visible = true;
            addChild(this._A);
        }

        public function Connexion(_arg_1:Event):void
        {
            this.Serveur.send(this.Version);
            this.BoucleReveille.addEventListener(TimerEvent.TIMER, this.Boucle_Reveille);
            this.BoucleReveille.start();
            this.TempsZeroBR = getTimer();
            this.ClipIdentification.Changement_Connexion(InterfaceConnexion.MODE_IDENTIFICATION);
            this.TexteServeur.visible = false;
        }

        public function Boucle_Reveille(_arg_1:Event):void
        {
            if (this.ClipServeur._F.visible)
            {
                this.DernièreAction = getTimer();
            };
            var _local_2:int = getTimer();
            this.Envoie_Serveur((((this.$26 + this.$2) + this.$1) + (getTimer() - this.TempsZeroBR)));
            this.TempsZeroBR = _local_2;
            if (this.Edition)
            {
                this.DernièreAction = getTimer();
            };
            if ((((getTimer() - this.DernièreAction) > 600000) && (!(this.A_Modo))))
            {
                this.Serveur.close();
                this.Deconnexion(null);
                this.ClipServeur.Texte.text = this.$Texte("$AFK");
            };
        }

        public function Connexion_Impossible(_arg_1:Event):void
        {
            this.ClipServeur.Texte.text = this.$Texte("$Connexion_Impossible");
        }

        public function Connexion_Interdite(_arg_1:SecurityErrorEvent):void
        {
            this.ClipServeur.Texte.text = this.$Texte("$Connexion_Impossible");
        }

        public function Deconnexion(_arg_1:Event):void
        {
            var _local_5:Object;
            var _local_2:Boolean;
            this.MoteurActif = false;
            stage.removeEventListener(Event.ENTER_FRAME, this.Boucle_Moteur);
            this.TimerPosition.stop();
            this.BoucleReveille.stop();
            var _local_3:int = numChildren;
            var _local_4:int;
            while (_local_4 < _local_3)
            {
                getChildAt(_local_4).visible = false;
                _local_4++;
            };
            if (!this.MessageSpécial)
            {
                if (this.MauvaiseVersion)
                {
                    this.ClipServeur.Texte.text = this.$Texte("$Version_Incorrecte");
                    _local_2 = true;
                }
                else
                {
                    this.ClipServeur.Texte.text = this.$Texte("$Connexion_Interrompue");
                };
            };
            addChild(this.ClipServeur);
            this.ClipServeur.visible = true;
            this.TexteServeur.visible = true;
            if (this.ClipIdentification.parent)
            {
                removeChild(this.ClipIdentification);
            };
            this.ClipServeur._CC.visible = false;
            this.ClipServeur._F.visible = false;
            this.Serveur.removeEventListener(Event.CONNECT, this.Connexion);
            this.Serveur.removeEventListener(Event.CLOSE, this.Deconnexion);
            this.Serveur.removeEventListener(IOErrorEvent.IO_ERROR, this.Connexion_Impossible);
            this.Serveur.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.Connexion_Interdite);
            this.Serveur.removeEventListener(DataEvent.DATA, this.Reception);
            if (this.Edition)
            {
                this.ClipServeur.addChild(this.ClipServeur._SE);
                this.ClipServeur._SE._C.text = this.ClipInterface._Editeur.CarteXML.toString();
                this.ClipServeur._Illu.visible = false;
            };
            if (_local_2)
            {
                if (((parent) && (parent.parent)))
                {
                    _local_5 = (parent.parent as Object);
                    if (!_local_5.SansCache)
                    {
                        _local_5.Initialisation(true, this.Version);
                    };
                };
            };
        }

        public function Envoie_Serveur(_arg_1:String):void
        {
            var _local_2:Array = String(((this.CMDTEC % 9000) + 1000)).split("");
            this.Serveur.send(((((this.MDT[_local_2[0]] + this.MDT[_local_2[1]]) + this.MDT[_local_2[2]]) + this.MDT[_local_2[3]]) + _arg_1));
            this.CMDTEC++;
        }

        public function Clique_Serveur2(_arg_1:Event):void
        {
            navigateToURL(new URLRequest(this.AdresseSecondaire), "_self");
        }

        public function Over_Serveur2(_arg_1:Event):void
        {
            this._Serveur._F._T3._T.textColor = 0x9D9D;
        }

        public function Out_Serveur2(_arg_1:Event):void
        {
            this._Serveur._F._T3._T.textColor = 12763866;
        }

        public function Reset():void
        {
            var _local_1:Object = (parent.parent as Object);
            if (_local_1.MAJ_Chargeur)
            {
                this.ClipServeur.Texte.text = this.$Texte("$Version_Chargeur");
            }
            else
            {
                this.ChargeurZero = new Loader();
                _local_1.addChild(this.ChargeurZero);
                _local_1.removeChildAt(0);
                this.ChargeurZero.contentLoaderInfo.addEventListener(Event.COMPLETE, this.Chargement_Zero_Ok);
                this.ChargeurZero.load(new URLRequest(("./ChargeurTransformice.swf?v=" + this.VersionChargeur)));
            };
        }

        public function Chargement_Zero_Ok(_arg_1:Event):void
        {
            Object(this.ChargeurZero.content).MAJ_Chargeur = true;
            this.ChargeurZero.contentLoaderInfo.removeEventListener(Event.COMPLETE, this.Chargement_Zero_Ok);
        }

        public function MAJ_InterfaceListeJoueur():void
        {
            var _local_1:$Joueur;
            var _local_2:MovieClip;
            this.InterfaceListeJoueur.Vider();
            for each (_local_1 in this.ListeJoueur)
            {
                _local_2 = $Res.Pouf("$NomJoueur");
                _local_2.Score = _local_1.Score;
                _local_2.Nom = _local_1.NomJoueur;
                _local_2.CodeForum = _local_1.CodeForum;
                _local_2._N.mouseEnabled = false;
                _local_2._N.styleSheet = this.StyleTexte;
                _local_2.useHandCursor = true;
                _local_2.buttonMode = true;
                _local_2.addEventListener(MouseEvent.MOUSE_DOWN, this.Clique_Joueur_Interface);
                if (_local_1.ClipJoueur)
                {
                    _local_2._N.htmlText = ((("<V>" + _local_1.NomJoueur) + " <BL>") + _local_1.Score);
                }
                else
                {
                    _local_2._N.htmlText = ((("<N>" + _local_1.NomJoueur) + " <BL>") + _local_1.Score);
                };
                this.InterfaceListeJoueur.Ajout_Element(_local_2);
            };
            this.InterfaceListeJoueur.Rendu("Score", (Array.NUMERIC | Array.DESCENDING));
            this.InterfaceListeJoueur.Position(1);
        }

        public function Clique_Joueur_Interface(_arg_1:MouseEvent):void
        {
            this.Clique_Joueur(MovieClip(_arg_1.currentTarget).Nom);
        }

        public function Clavier1(_arg_1:KeyboardEvent):void
        {
            var _local_2:int;
            var _local_3:String;
            var _local_4:b2Vec2;
            var _local_5:int;
            var _local_6:int;
            var _local_7:ApplicationDomain;
            var _local_8:MovieClip;
            var _local_9:TextField;
            _local_2 = _arg_1.keyCode;
            trace(_local_2);
            if (this.ClavierAnglais)
            {
                if (_local_2 == 87)
                {
                    _local_2 = 90;
                }
                else
                {
                    if (_local_2 == 90)
                    {
                        _local_2 = 87;
                    }
                    else
                    {
                        if (_local_2 == 65)
                        {
                            _local_2 = 81;
                        }
                        else
                        {
                            if (_local_2 == 81)
                            {
                                _local_2 = 65;
                            };
                        };
                    };
                };
            };
            if (stage.focus == this.CE)
            {
                if (_local_2 == 13)
                {
                    _local_3 = this.CE.text;
                    this.CE.text = "";
                    _local_3 = _local_3.replace(/&/g, "&amp;");
                    _local_3 = _local_3.replace(/</g, "&lt;");
                    _local_3 = OutilsChat.Formatage_Texte_Chat(_local_3);
                    if (_local_3 == "")
                    {
                        stage.focus = stage;
                        return;
                    };
                    if ((((getTimer() - this.LimiteChat) < 1000) && (!(this.Admin))))
                    {
                        this.Message_Chat(this.$Texte("$Doucement"));
                        return;
                    };
                    if (_local_3.charAt(0) == "/")
                    {
                        this.LimiteChat = getTimer();
                        this.Commande(_local_3.substr(1));
                        stage.focus = stage;
                        return;
                    };
                    if (this.ClipJoueur.NomJoueur.charAt(0) == "*")
                    {
                        this.Message_Chat(this.$Texte("$Créer_Compte_Parler"));
                        return;
                    };
                    if (((this.DernierMessage == _local_3) && (!(this.Admin))))
                    {
                        this.Message_Chat(this.$Texte("$Message_Identique"));
                        return;
                    };
                    this.LimiteChat = getTimer();
                    this.DernierMessage = _local_3;
                    if (this.VersionRusse)
                    {
                        this.Envoie_Serveur((((this.$6 + this.$6) + this.$1) + this.utftowin(_local_3)));
                    }
                    else
                    {
                        this.Envoie_Serveur((((this.$6 + this.$6) + this.$1) + _local_3));
                    };
                    stage.focus = stage;
                };
            }
            else
            {
                if ((((stage.focus) && (stage.focus is TextField)) && ((stage.focus as TextField).type == TextFieldType.INPUT)))
                {
                    if (_local_2 == 13)
                    {
                        if (stage.focus == this.ClipInterface._Editeur._OptionValidation._C)
                        {
                            this.ClipInterface._Editeur._OptionValidation.Clique_Charger();
                        };
                    };
                    return;
                };
                if (((this.ClipJoueur) && (!(this.ClipJoueur.Mort))))
                {
                    if (((((_local_2 == 68) || (_local_2 == 39)) && (!(this.ClipJoueur.DroiteEnCours))) && (!(this.InvocationEnCours))))
                    {
                        if (this.Guide)
                        {
                        };
                        if (this.MouvementDebut)
                        {
                            this.MouvementDebut = false;
                            this.Envoie_Serveur((this.$4 + this.$10));
                        };
                        this.ClipJoueur.DroiteEnCours = true;
                        this.ClipJoueur.GaucheEnCours = false;
                        this.ClipJoueur.Animation_Course(true);
                        var _local_10:* = this.高;
                        (_local_10["MP"]());
                        this.Détachement_Ballon_ClipJoueur();
                        return;
                    };
                    if (((((_local_2 == 81) || (_local_2 == 37)) && (!(this.ClipJoueur.GaucheEnCours))) && (!(this.InvocationEnCours))))
                    {
                        if (this.Guide)
                        {
                        };
                        if (this.MouvementDebut)
                        {
                            this.MouvementDebut = false;
                            this.Envoie_Serveur((this.$4 + this.$10));
                        };
                        this.ClipJoueur.GaucheEnCours = true;
                        this.ClipJoueur.DroiteEnCours = false;
                        this.ClipJoueur.Animation_Course(false);
                        _local_10 = this.高;
                        (_local_10["MP"]());
                        this.Détachement_Ballon_ClipJoueur();
                        return;
                    };
                    if (((_local_2 == 90) || (_local_2 == 38)))
                    {
                        this.PositionFonction.Fonction();
                        return;
                    };
                    if (((_local_2 == 83) || (_local_2 == 40)))
                    {
                        if (this.Monde666)
                        {
                            if (!this.ClipJoueur.BasEnCours)
                            {
                                this.Envoie_Serveur((((((this.$4 + this.$11) + this.$1) + 0) + this.$1) + 1));
                                this.ClipJoueur.BasEnCours = true;
                            };
                            return;
                        };
                        if (!this.BasEnCours)
                        {
                            this.BasEnCours = true;
                            this.ClipJoueur.DroiteEnCours = false;
                            this.ClipJoueur.GaucheEnCours = false;
                            if (Noel.BouleDeNeige)
                            {
                                Noel.Lancement_Boule_De_Neige(this.ClipJoueur);
                                this.Envoie_Serveur((((this.$4 + this.$9) + this.$1) + 1));
                            }
                            else
                            {
                                this.ClipJoueur.Animation_Boule(this.ClipJoueur.AnimDroite);
                                this.Envoie_Serveur((((this.$4 + this.$9) + this.$1) + 1));
                                this.Détachement_Ballon_ClipJoueur();
                            };
                        };
                    }
                    else
                    {
                        if (((_local_2 == 88) || (_local_2 == 16)))
                        {
                            if (((this.ObjetEnCours) && (!(this.InvocationEnCours))))
                            {
                                this.ObjetEnCours.rotation = (this.ObjetEnCours.rotation + 15);
                            };
                        }
                        else
                        {
                            if (((_local_2 == 87) || (_local_2 == 17)))
                            {
                                if (((this.ObjetEnCours) && (!(this.InvocationEnCours))))
                                {
                                    this.ObjetEnCours.rotation = (this.ObjetEnCours.rotation - 15);
                                };
                            }
                            else
                            {
                                if (_local_2 == 32)
                                {
                                    _local_4 = this.ClipJoueur.Physique.GetLinearVelocity();
                                }
                                else
                                {
                                    if ((((this.Guide) && (_local_2 >= 49)) && (_local_2 <= 57)))
                                    {
                                        this.Selection_Objet_Clavier((_local_2 - 49));
                                    };
                                };
                            };
                        };
                    };
                };
                if (this.Guide)
                {
                    if (((!(this.InvocationEnCours)) && (((((_local_2 == 67) || (_local_2 == 86)) || (_local_2 == 66)) || (_local_2 == 78)) || (_local_2 == 74))))
                    {
                        if (this.ObjetEnCours)
                        {
                            if (this.ObjetEnCours.Code == 28)
                            {
                                _local_2 = -1;
                            };
                            if (_local_2 == 66)
                            {
                                _local_6 = this.ObjetEnCours.Code;
                                if (((!(_local_6 == 3)) && (!(_local_6 == 4))))
                                {
                                    return;
                                };
                            };
                            if (((((this.AutoClou) && (this.DernierCodeClou == _local_2)) && (!(_local_2 == 66))) && (!(_local_2 == -1))))
                            {
                                this.Clou_Mouvement();
                                if (_local_2 == -1)
                                {
                                    this.Boucle_Placement(null);
                                };
                                return;
                            };
                            this.DernierCodeClou = _local_2;
                            this.AutoClou = (!(this.AutoClou));
                            _local_5 = this.ObjetEnCours.rotation;
                            this.Clique_Placement_Objet(this.ObjetEnCours.Code);
                            if (_local_2 == 67)
                            {
                                this.AutoClouCode = 22;
                            }
                            else
                            {
                                if (_local_2 == 86)
                                {
                                    this.AutoClouCode = 14;
                                }
                                else
                                {
                                    if (_local_2 == 66)
                                    {
                                        this.AutoClouCode = 11;
                                    }
                                    else
                                    {
                                        if (_local_2 == 78)
                                        {
                                            this.AutoClouCode = 15;
                                        }
                                        else
                                        {
                                            if (_local_2 == 74)
                                            {
                                                this.AutoClouCode = 16;
                                            }
                                            else
                                            {
                                                if (_local_2 == -1)
                                                {
                                                    this.AutoClouCode = 66;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            if (this.AutoClou)
                            {
                                this.AutoClouDécalage = 0;
                                _local_7 = this.loaderInfo.applicationDomain;
                                _local_8 = $Res.Pouf(("$Objet_" + this.AutoClouCode));
                                this.ObjetEnCours.addChild(_local_8);
                                this.VraiLargeur = this.ObjetEnCours.width;
                                if (_local_2 == -1)
                                {
                                    _local_8.y = 50;
                                    this.Boucle_Placement(null);
                                };
                            };
                            this.ObjetEnCours.rotation = _local_5;
                        };
                        return;
                    };
                    if (((_local_2 == 32) && (!(this.InvocationEnCours))))
                    {
                        this.Etherisation();
                    };
                };
                if (this.ClipInterface._Editeur.parent)
                {
                    if (_local_2 == 46)
                    {
                        if (this.ClipInterface._Editeur._OSelection.parent)
                        {
                            this.ClipInterface._Editeur._OSelection.Clique_Suppr();
                        };
                        return;
                    };
                };
                if (_local_2 == 75)
                {
                    if (this.ClipJoueur)
                    {
                        this.Changer_Clavier();
                    };
                    return;
                };
                if (this.A_Admin)
                {
                    if (_local_2 == 79)
                    {
                        this.Activation_Dessin();
                        return;
                    };
                    if (_local_2 == 80)
                    {
                        this.Reset_Dessin();
                        return;
                    };
                };
                if (_local_2 == 13)
                {
                    if (stage.focus)
                    {
                        _local_9 = (stage.focus as TextField);
                        if (((_local_9) && (_local_9.type == "input")))
                        {
                            return;
                        };
                    };
                    stage.focus = this.CE;
                }
                else
                {
                    if (_local_2 == 27)
                    {
                        this.Annulation_Placement_Objet();
                    };
                };
            };
        }

        public function 高峰高峰高峰高峰():void
        {
        }

        public function Message_Tribu(_arg_1:String, _arg_2:String=null):void
        {
            if (_arg_1.charAt(0) == "#")
            {
                _arg_1 = this.wintoutf(_arg_1.substr(1));
            };
            if (_arg_2)
            {
                this.Message_Chat(((((((("<T><a href='event:" + _arg_2) + "'>[") + this.Mot_Tribu) + "] [") + _arg_2) + "]</a> ") + _arg_1));
            }
            else
            {
                this.Message_Chat(((("<T>[" + this.Mot_Tribu) + "] ") + _arg_1));
            };
        }

        public function Commande(_arg_1:String):void
        {
            var _local_2:String;
            var _local_3:Array;
            var _local_4:String;
            var _local_5:DisplayObjectContainer;
            var _local_6:String;
            var _local_7:int;
            var _local_8:int;
            var _local_9:String;
            var _local_10:String;
            var _local_11:Array;
            var _local_12:Array;
            _local_2 = _arg_1.toLowerCase();
            if (_local_2.indexOf("password") == 0)
            {
                _local_3 = _arg_1.split(" ");
                _local_4 = _local_3[2];
                _local_3[2] = SHA256.hash(_local_4);
                _local_3[3] = $Hash.SHA256(_local_4);
                this.Envoie_Serveur((((this.$6 + this.$26) + this.$1) + _local_3.join(" ")));
            }
            else
            {
                if (_local_2 == "^^")
                {
                    this.Message_Chat(((("PlayerType : " + Capabilities.playerType) + ", ") + Capabilities.version));
                    _local_5 = this;
                    while (true)
                    {
                        if (_local_5 == null) break;
                        this.Message_Chat((((" - " + _local_5.name) + " : ") + _local_5.loaderInfo.url));
                        _local_5 = _local_5.parent;
                    };
                    this.Message_Chat(("stage : " + loaderInfo.loaderURL));
                    this.Message_Chat(("Navigateur : " + ((ExternalInterface.available) ? ExternalInterface.call("function(){return navigator.appVersion+'-'+navigator.appName;}") : ":'(")));
                }
                else
                {
                    if (_local_2 == "scroll")
                    {
                        JadeSouris.Activation(null);
                        this.Message_Chat("Scroll du navigateur désactivé.");
                    }
                    else
                    {
                        if (((_local_2 == "titre") || (_local_2 == "title")))
                        {
                            _local_6 = this.$Texte("$Commande_Titre");
                            _local_7 = this.ListeTitreDisponible.length;
                            _local_8 = 0;
                            while (_local_8 < _local_7)
                            {
                                _local_6 = (_local_6 + this.$Texte("$Liste_Titre", this.ListeTitreDisponible[_local_8], this.ListeTitre[this.ListeTitreDisponible[_local_8]]));
                                _local_8++;
                            };
                            this.Message_Chat(_local_6);
                        }
                        else
                        {
                            _local_9 = "";
                            _local_10 = _local_2.substr(0, 2);
                            if (((_local_10 == "c ") || (_local_10 == "w ")))
                            {
                                _local_11 = new Array();
                                _local_12 = _arg_1.split(" ");
                                _local_11[0] = _local_12[0];
                                _local_11[1] = _local_12[1];
                                _local_12.shift();
                                _local_12.shift();
                                _local_9 = _local_12.join(" ");
                                _local_9 = OutilsChat.Formatage_Texte_Chat(_local_9);
                                if (this.VersionRusse)
                                {
                                    _local_11[2] = this.utftowin(_local_9);
                                }
                                else
                                {
                                    _local_11[2] = _local_9;
                                };
                                _arg_1 = _local_11.join(" ");
                            }
                            else
                            {
                                if (_local_10 == "t ")
                                {
                                    _local_9 = _arg_1.substr(2);
                                    _local_9 = OutilsChat.Formatage_Texte_Chat(_local_9);
                                    if (this.VersionRusse)
                                    {
                                        _arg_1 = ("t #" + this.utftowin(_local_9));
                                    }
                                    else
                                    {
                                        _arg_1 = ("t " + _local_9);
                                    };
                                }
                                else
                                {
                                    if (_local_10 == "a ")
                                    {
                                        _local_9 = _arg_1.substr(2);
                                        _local_9 = OutilsChat.Formatage_Texte_Chat(_local_9);
                                        if (this.VersionRusse)
                                        {
                                            _arg_1 = ("a #" + this.utftowin(_local_9));
                                        }
                                        else
                                        {
                                            _arg_1 = ("a " + _local_9);
                                        };
                                    };
                                };
                            };
                            if (_local_2.substr(0, 3) == "ms ")
                            {
                                _arg_1 = ("ms " + this.utftowin(_arg_1.substr(3)));
                            }
                            else
                            {
                                if (_local_2.substr(0, 4) == "mss ")
                                {
                                    _arg_1 = ("mss " + this.utftowin(_arg_1.substr(4)));
                                }
                                else
                                {
                                    if (_local_10 == "m ")
                                    {
                                        _arg_1 = ("m " + this.utftowin(_arg_1.substr(2)));
                                    };
                                };
                            };
                            this.Envoie_Serveur((((this.$6 + this.$26) + this.$1) + _arg_1));
                        };
                    };
                };
            };
        }

        public function Activation_Dessin():void
        {
            if (this.A_Admin)
            {
                this.DessinActif = (!(this.DessinActif));
                if (this.DessinActif)
                {
                    this.Message_Chat("<J>Mode dessin activé.");
                    addEventListener(MouseEvent.MOUSE_DOWN, this.Clique_Dessin);
                    addEventListener(MouseEvent.MOUSE_UP, this.Declique_Dessin);
                }
                else
                {
                    this.Message_Chat("<J>Mode dessin désactivé.");
                    removeEventListener(MouseEvent.MOUSE_DOWN, this.Clique_Dessin);
                    removeEventListener(MouseEvent.MOUSE_UP, this.Declique_Dessin);
                    stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.Boucle_Dessin);
                };
            };
        }

        public function Clique_Dessin(_arg_1:Event):void
        {
            this.ClipDessin.graphics.moveTo(int(this.ClipDessin.mouseX), int(this.ClipDessin.mouseY));
            this.Envoie_Serveur((((((this.$25 + this.$4) + this.$1) + int(this.ClipDessin.mouseX)) + this.$1) + int(this.ClipDessin.mouseY)));
            stage.addEventListener(MouseEvent.MOUSE_MOVE, this.Boucle_Dessin);
        }

        public function Declique_Dessin(_arg_1:Event):void
        {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.Boucle_Dessin);
        }

        public function Boucle_Dessin(_arg_1:MouseEvent):void
        {
            this.ClipDessin.graphics.lineTo(this.ClipDessin.mouseX, this.ClipDessin.mouseY);
            this.Envoie_Serveur((((((this.$25 + this.$5) + this.$1) + int(this.ClipDessin.mouseX)) + this.$1) + int(this.ClipDessin.mouseY)));
        }

        public function Reset_Dessin():void
        {
            this.ClipDessin.graphics.clear();
            this.ClipDessin.graphics.lineStyle(2, 3225412);
            if (this.A_Admin)
            {
                this.Envoie_Serveur((this.$25 + this.$3));
            };
        }

        public function Clou_Mouvement():void
        {
            if (this.AutoClouDécalage < 0)
            {
                this.AutoClouDécalage = 0;
            }
            else
            {
                if (this.AutoClouDécalage == 0)
                {
                    this.AutoClouDécalage = int(((this.VraiLargeur / 2) - 5));
                }
                else
                {
                    this.AutoClouDécalage = -(int(((this.VraiLargeur / 2) - 5)));
                };
            };
            this.MAJ_AutoClou();
        }

        public function MAJ_AutoClou():void
        {
            var _local_1:MovieClip;
            _local_1 = (this.ObjetEnCours.getChildAt((this.ObjetEnCours.numChildren - 1)) as MovieClip);
            _local_1.x = this.AutoClouDécalage;
        }

        public function Clavier2(_arg_1:KeyboardEvent):void
        {
            var _local_2:int;
            var _local_3:int;
            var _local_4:TextField;
            var _local_5:int;
            _local_2 = getTimer();
            this.DernièreAction = _local_2;
            if (stage.focus != this.CE)
            {
                _local_3 = _arg_1.keyCode;
                if (_local_3 == 13)
                {
                    this.DerniereEntrée = _local_2;
                    return;
                };
                if (this.ClavierAnglais)
                {
                    if (_local_3 == 87)
                    {
                        _local_3 = 90;
                    }
                    else
                    {
                        if (_local_3 == 90)
                        {
                            _local_3 = 87;
                        }
                        else
                        {
                            if (_local_3 == 65)
                            {
                                _local_3 = 81;
                            }
                            else
                            {
                                if (_local_3 == 81)
                                {
                                    _local_3 = 65;
                                };
                            };
                        };
                    };
                };
                if (((this.ClipJoueur) && (!(this.ClipJoueur.Mort))))
                {
                    if ((((_local_3 == 68) || (_local_3 == 39)) && (!(this.InvocationEnCours))))
                    {
                        this.ClipJoueur.DroiteEnCours = false;
                        if (!this.ClipJoueur.GaucheEnCours)
                        {
                            this.ClipJoueur.Animation_Statique(true);
                            var _local_6:* = this.高;
                            (_local_6["MP"]());
                        };
                    }
                    else
                    {
                        if ((((_local_3 == 81) || (_local_3 == 37)) && (!(this.InvocationEnCours))))
                        {
                            this.ClipJoueur.GaucheEnCours = false;
                            if (!this.ClipJoueur.DroiteEnCours)
                            {
                                this.ClipJoueur.Animation_Statique(false);
                                _local_6 = this.高;
                                (_local_6["MP"]());
                            };
                        }
                        else
                        {
                            if (((_local_3 == 83) || (_local_3 == 40)))
                            {
                                if (this.Monde666)
                                {
                                    if (this.ClipJoueur.BasEnCours)
                                    {
                                        this.Envoie_Serveur((((((this.$4 + this.$11) + this.$1) + 0) + this.$1) + 0));
                                        this.ClipJoueur.BasEnCours = false;
                                    };
                                    return;
                                };
                                if (this.BasEnCours)
                                {
                                    this.BasEnCours = false;
                                    if (this.ClipJoueur.AnimationNeigeEnCours)
                                    {
                                        this.ClipJoueur.Animation_Statique(this.ClipJoueur.AnimDroite);
                                    }
                                    else
                                    {
                                        this.ClipJoueur.Fin_Animation_Boule(this.ClipJoueur.AnimDroite);
                                    };
                                    this.Envoie_Serveur((((this.$4 + this.$9) + this.$1) + 0));
                                };
                            }
                            else
                            {
                                if (((_local_3 == 90) || (_local_3 == 38)))
                                {
                                    if (this.Monde666)
                                    {
                                        if (this.ClipJoueur.HautEnCours)
                                        {
                                            this.Envoie_Serveur((((((this.$4 + this.$11) + this.$1) + 1) + this.$1) + 0));
                                            this.ClipJoueur.HautEnCours = false;
                                        };
                                        return;
                                    };
                                };
                            };
                        };
                    };
                };
                if (((_local_3 == 82) || (_local_3 == 84)))
                {
                    if (stage.focus)
                    {
                        _local_4 = (stage.focus as TextField);
                        if (((_local_4) && (_local_4.type == "input")))
                        {
                            return;
                        };
                    };
                    if ((_local_2 - this.DerniereEntrée) < 200)
                    {
                        return;
                    };
                    if (this.CE.text.length == 0)
                    {
                        stage.focus = this.CE;
                        if (_local_3 == 82)
                        {
                            this.CE.text = (("/c " + this.DernierChuchoteur) + " ");
                        }
                        else
                        {
                            if (_local_3 == 84)
                            {
                                this.CE.text = "/t ";
                            };
                        };
                        _local_5 = this.CE.text.length;
                        this.CE.setSelection(_local_5, _local_5);
                    };
                };
            };
        }

        public function Arrêt_ClipJoueur():void
        {
            if (this.ClipJoueur.DroiteEnCours)
            {
                this.ClipJoueur.DroiteEnCours = false;
                if (!this.ClipJoueur.GaucheEnCours)
                {
                    this.ClipJoueur.Animation_Statique(true);
                    var _local_1:* = this.高;
                    (_local_1["MP"]());
                };
            }
            else
            {
                if (this.ClipJoueur.GaucheEnCours)
                {
                    this.ClipJoueur.GaucheEnCours = false;
                    if (!this.ClipJoueur.DroiteEnCours)
                    {
                        this.ClipJoueur.Animation_Statique(false);
                        _local_1 = this.高;
                        (_local_1["MP"]());
                    };
                };
            };
        }

        public function Message_Chat(_arg_1:String, _arg_2:String=null, _arg_3:Boolean=false, _arg_4:Boolean=false, _arg_5:int=0, _arg_6:Boolean=false):void
        {
            var _local_7:String;
            var _local_8:int;
            var _local_9:Boolean;
            if (_arg_2 == null)
            {
                if (_arg_3)
                {
                    _local_7 = ("<ROSE> " + _arg_1);
                }
                else
                {
                    _local_7 = ("<BL>" + _arg_1);
                };
            }
            else
            {
                if (_arg_5)
                {
                    if (_arg_5 == 1)
                    {
                        _local_7 = ((((((("<font color='#EFCE8F'><a href='event:" + _arg_2) + "'>[") + this.Mot_A) + " ") + _arg_2) + "]</a> ") + _arg_1);
                    }
                    else
                    {
                        this.DernierChuchoteur = _arg_2;
                        _local_7 = ((((((("<font color='#F0A78E'><a href='event:" + _arg_2) + "'>[") + this.Mot_De) + " ") + _arg_2) + "]</a> ") + _arg_1);
                    };
                }
                else
                {
                    if (_arg_6)
                    {
                        _local_7 = ((((((("<V><a href='event:" + _arg_2) + "'>[") + this.Mot_Chamane) + " ") + _arg_2) + "]</a> <font color='#FEB1FC'>") + _arg_1);
                    }
                    else
                    {
                        if (_arg_4)
                        {
                            _local_7 = ((((((("<V><a href='event:" + _arg_2) + "'>[") + this.Mot_Chamane) + " ") + _arg_2) + "]</a> <CH>") + _arg_1);
                        }
                        else
                        {
                            _local_7 = ((((("<V><a href='event:" + _arg_2) + "'>[") + _arg_2) + "]</a> <N>") + _arg_1);
                        };
                    };
                };
            };
            _local_8 = this.TexteChat.scrollV;
            if (this.ListeMessage.length > 150)
            {
                this.ListeMessage.splice(0, 50);
            };
            this.ListeMessage.push(_local_7);
            _local_9 = (this.TexteChat.scrollV == this.TexteChat.maxScrollV);
            this.TexteChat.htmlText = this.ListeMessage.join("\n");
            if (_local_9)
            {
                this.AscenseurChat.Rendu_Ascenseur(2);
            }
            else
            {
                this.TexteChat.scrollV = _local_8;
            };
            if (this.ClipInterface._Editeur.parent)
            {
                this.TexteChat.scrollV = this.TexteChat.maxScrollV;
            };
        }

        public function Clique_Joueur(_arg_1:String):void
        {
            var _local_2:Array;
            if (_arg_1.charAt(0) != "*")
            {
                _local_2 = new Array();
                _local_2.push(("<V>" + _arg_1), null, null);
                _local_2.push(this.$Texte("$Chuchoter"), this.Chuchoter_Joueur, _arg_1);
                _local_2.push(this.$Texte("$EnvoyerMP"), this.Envoyer_MP, _arg_1);
                _local_2.push(this.$Texte("$Profil"), this.Envoie_Serveur, ((((this.$6 + this.$26) + this.$1) + "profil ") + _arg_1));
                if ($Tribu.Peut_Recruter())
                {
                    _local_2.push(("<V>" + this.$Texte("$Tribu")), null, null);
                    _local_2.push(this.$Texte("$Recruter_Tribu"), this.Envoie_Serveur, ((((this.$6 + this.$26) + this.$1) + "rt ") + _arg_1));
                };
                _local_2.push(("<V>" + this.$Texte("$Modération")), null, null);
                _local_2.push(this.$Texte("$Ignorer_Temporairement"), this.Envoie_Serveur, ((((this.$6 + this.$26) + this.$1) + "mute ") + _arg_1));
                this.Vignette_Menu(_local_2);
            };
        }

        public function Envoyer_MP(_arg_1:String):void
        {
            var _local_2:Object;
            for each (_local_2 in this.ListeJoueur)
            {
                if (_local_2.NomJoueur == _arg_1)
                {
                    if (_local_2.CodeForum)
                    {
                        navigateToURL(new URLRequest(("http://forum.transformice.com/ucp.php?i=pm&mode=compose&u=" + _local_2.CodeForum)), "_blank");
                    };
                    return;
                };
            };
        }

        public function Clique_Nom_Chat(_arg_1:TextEvent):void
        {
            this.Clique_Joueur(_arg_1.text);
        }

        public function Chuchoter_Joueur(_arg_1:String):void
        {
            var _local_2:int;
            stage.focus = this.CE;
            this.CE.text = (("/c " + _arg_1) + " ");
            _local_2 = this.CE.text.length;
            this.CE.setSelection(_local_2, _local_2);
        }

        public function Affichage_Bulle(JOUEUR:$Joueur, TEXTE:String):void
        {
            var Bulle:MovieClip;
            var NumLigne:int;
            var Largeur:int;
            var Hauteur:int;
            var Fond:Graphics;
            try
            {
                Bulle = JOUEUR.BulleDialogue;
                Bulle._T.width = 150;
                Bulle._T.htmlText = ("<N>" + TEXTE);
                NumLigne = Bulle._T.numLines;
                Bulle._T.width = (Bulle._T.textWidth + 10);
                if (Bulle._T.width > 150)
                {
                    Bulle._T.width = 150;
                };
                if (NumLigne == 1)
                {
                    Bulle._T.height = 17;
                }
                else
                {
                    if (NumLigne == 2)
                    {
                        Bulle._T.height = 29;
                    }
                    else
                    {
                        Bulle._T.height = 41;
                    };
                };
                Largeur = Bulle._T.width;
                Hauteur = (Bulle._T.height + 4);
                Fond = Bulle.graphics;
                Fond.clear();
                Fond.beginFill(3952740);
                Fond.drawRoundRect(-2, -2, Largeur, Hauteur, 10, 10);
                Fond.endFill();
                Bulle.x = (-(Largeur) / 2);
                if (JOUEUR.Guide)
                {
                    Bulle.y = (-43 - Hauteur);
                    if (JOUEUR.Guide2)
                    {
                        Bulle._T.textColor = 16691708;
                    }
                    else
                    {
                        Bulle._T.textColor = 10019563;
                    };
                }
                else
                {
                    Bulle.y = (-43 - Hauteur);
                };
                JOUEUR.addChild(Bulle);
                Bulle.Init();
            }
            catch(e:Error)
            {
            };
        }

        public function Vignette(_arg_1:Object, _arg_2:String, _arg_3:int=0, _arg_4:int=0, _arg_5:int=0, _arg_6:int=0):void
        {
            _arg_1.mouseEnabled = true;
            _arg_1.VignetteTexte = _arg_2;
            _arg_1.VignetteFixe = _arg_3;
            if (_arg_3)
            {
                _arg_1.VignetteFixeX = _arg_4;
                _arg_1.VignetteFixeY = _arg_5;
            };
            _arg_1.VignetteLargeur = _arg_6;
            _arg_1.addEventListener(MouseEvent.MOUSE_OVER, this.Vignette_RollOver);
            _arg_1.addEventListener(MouseEvent.ROLL_OUT, this.Vignette_Off);
        }

        public function Vignette_RollOver(_arg_1:MouseEvent):void
        {
            var _local_2:int;
            var _local_3:int;
            var _local_4:int;
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.Vignette_On);
            this.VignetteEnCours = _arg_1.currentTarget;
            _local_2 = this.VignetteEnCours.VignetteFixe;
            this._Vignette._Texte.htmlText = this.VignetteEnCours.VignetteTexte;
            if (this.VignetteEnCours.VignetteLargeur == 0)
            {
                this._Vignette._Texte.wordWrap = false;
                this._Vignette._Texte.width = (this._Vignette._Texte.textWidth + 4);
            }
            else
            {
                this._Vignette._Texte.wordWrap = true;
                this._Vignette._Texte.width = this.VignetteEnCours.VignetteLargeur;
            };
            this._Vignette._Texte.height = (this._Vignette._Texte.textHeight + 4);
            _local_3 = (this._Vignette._Texte.width + 10);
            _local_4 = (this._Vignette._Texte.height + 6);
            this._Vignette.graphics.clear();
            this._Vignette.graphics.beginFill(2236979);
            this._Vignette.graphics.lineStyle(3, 0, 1, true, "normal", null, JointStyle.MITER);
            this._Vignette.graphics.drawRect(0, 0, _local_3, _local_4);
            this._Vignette.graphics.endFill();
            if (_local_2 == 0)
            {
                this._Vignette.x = mouseX;
                this._Vignette.y = (mouseY + 22);
                stage.addEventListener(MouseEvent.MOUSE_MOVE, this.Vignette_On);
                this.LimiteX = (800 - this._Vignette.width);
                this.LimiteY = (600 - this._Vignette.height);
                if (this._Vignette.x > this.LimiteX)
                {
                    this._Vignette.x = this.LimiteX;
                };
                if (this._Vignette.y > this.LimiteY)
                {
                    this._Vignette.y = this.LimiteY;
                };
            }
            else
            {
                if (_local_2 == 1)
                {
                    this._Vignette.x = this.VignetteEnCours.VignetteFixeX;
                    this._Vignette.y = this.VignetteEnCours.VignetteFixeY;
                }
                else
                {
                    if (_local_2 == 2)
                    {
                        this._Vignette.x = this.VignetteEnCours.VignetteFixeX;
                        this._Vignette.y = int((this.VignetteEnCours.VignetteFixeY - this._Vignette.height));
                    }
                    else
                    {
                        if (_local_2 == 3)
                        {
                            this._Vignette.x = int((this.VignetteEnCours.VignetteFixeX - this._Vignette.width));
                            this._Vignette.y = int((this.VignetteEnCours.VignetteFixeY - this._Vignette.height));
                        }
                        else
                        {
                            if (_local_2 == 10)
                            {
                                this._Vignette.x = mouseX;
                                this._Vignette.y = (mouseY + 22);
                                stage.addEventListener(MouseEvent.MOUSE_MOVE, this.Vignette_On);
                                this.LimiteX = (800 - this._Vignette.width);
                                this.LimiteY = (600 - this._Vignette.height);
                                if (this._Vignette.x > this.LimiteX)
                                {
                                    this._Vignette.x = this.LimiteX;
                                };
                                if (this._Vignette.y > this.LimiteY)
                                {
                                    this._Vignette.y = this.LimiteY;
                                };
                            };
                        };
                    };
                };
            };
            addChild(this._Vignette);
        }

        public function Vignette_On(_arg_1:MouseEvent):void
        {
            this._Vignette.x = mouseX;
            if (this._Vignette.x > this.LimiteX)
            {
                this._Vignette.x = this.LimiteX;
            };
            this._Vignette.y = (mouseY + 22);
            if (this._Vignette.y > this.LimiteY)
            {
                this._Vignette.y = this.LimiteY;
            };
            _arg_1.updateAfterEvent();
        }

        public function Vignette_Off(_arg_1:MouseEvent):void
        {
            if (this._Vignette.parent)
            {
                removeChild(this._Vignette);
                stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.Vignette_On);
            };
        }

        public function Chargement_Image(_arg_1:MovieClip, _arg_2:String, _arg_3:String, _arg_4:Boolean=false):void
        {
            var _local_5:String;
            var _local_6:String;
            var _local_7:ByteArray;
            var _local_8:Boolean;
            var _local_9:int;
            var _local_10:int;
            var _local_11:URLLoader;
            var _local_12:Loader;
            _arg_1.mouseChildren = false;
            if (_arg_1._Image.Img != null)
            {
                if (_arg_1._Image.contains(_arg_1._Image.Img))
                {
                    _arg_1._Image.removeChild(_arg_1._Image.Img);
                }
                else
                {
                    _arg_1._Image.Img = null;
                };
            };
            if (_arg_3.substr(0, 1) == "_")
            {
                _local_5 = ".swf";
            }
            else
            {
                _local_5 = ".jpg";
            };
            if (_arg_4)
            {
                _local_5 = (_local_5 + ("?t=" + getTimer()));
            };
            _local_6 = (("_" + _arg_2) + _arg_3);
            _local_7 = this.Images[_local_6];
            if (((_local_7 == null) || (_arg_4)))
            {
                _local_8 = false;
                _local_9 = this.Chargeurs.length;
                _local_10 = 0;
                while (_local_10 < _local_9)
                {
                    if (this.Chargeurs[(_local_10 + 1)] == _local_6)
                    {
                        _local_8 = true;
                        break;
                    };
                    _local_10 = (_local_10 + 2);
                };
                this.Attente.push(_local_6, _arg_1);
                if (!_local_8)
                {
                    _local_11 = new URLLoader();
                    _local_11.dataFormat = URLLoaderDataFormat.BINARY;
                    _local_11.addEventListener(IOErrorEvent.IO_ERROR, this.Erreur_Chargement);
                    _local_11.addEventListener(Event.COMPLETE, this.Fin_Chargement);
                    this.Chargeurs.push(_local_11, _local_6);
                    _local_11.load(new URLRequest(((_arg_2 + _arg_3) + _local_5)));
                };
            }
            else
            {
                _local_12 = new Loader();
                _local_12.loadBytes(_local_7);
                _arg_1._Image.Img = _local_12;
                _arg_1._Image.addChild(_local_12);
            };
        }

        public function Fin_Chargement(_arg_1:Event):void
        {
            var _local_2:URLLoader;
            var _local_3:ByteArray;
            var _local_4:int;
            var _local_5:int;
            _local_2 = URLLoader(_arg_1.target);
            _local_3 = (_local_2.data as ByteArray);
            _local_4 = this.Chargeurs.length;
            _local_5 = 0;
            while (_local_5 < _local_4)
            {
                if (this.Chargeurs[_local_5] == _local_2)
                {
                    this.Images[this.Chargeurs[(_local_5 + 1)]] = _local_3;
                    this.Chargeurs.splice(_local_5, 2);
                    break;
                };
                _local_5 = (_local_5 + 2);
            };
            this.Traitement_Attente();
        }

        public function Erreur_Chargement(_arg_1:IOErrorEvent):void
        {
        }

        public function Traitement_Attente():void
        {
            var _local_1:int;
            var _local_2:int;
            var _local_3:ByteArray;
            var _local_4:Loader;
            var _local_5:MovieClip;
            _local_1 = this.Attente.length;
            _local_2 = 0;
            while (_local_2 < _local_1)
            {
                _local_3 = this.Images[this.Attente[_local_2]];
                if (_local_3 != null)
                {
                    _local_4 = new Loader();
                    _local_5 = this.Attente[(_local_2 + 1)]._Image;
                    _local_4.loadBytes(_local_3);
                    _local_5.Img = _local_4;
                    _local_5.addChild(_local_4);
                    this.Attente.splice(_local_2, 2);
                    _local_2 = (_local_2 - 2);
                    _local_1 = (_local_1 - 2);
                };
                _local_2 = (_local_2 + 2);
            };
        }

        public function Formatage_Date(_arg_1:String):String
        {
            var _local_2:Date;
            var _local_3:Date;
            var _local_4:Number;
            var _local_5:Number;
            var _local_6:Number;
            var _local_7:Number;
            var _local_8:Number;
            var _local_9:String;
            var _local_10:String;
            if (!_arg_1)
            {
                return ("");
            };
            _local_2 = new Date();
            _local_3 = new Date();
            _local_3.setTime((Number(_arg_1) * 1000));
            _local_4 = _local_3.getFullYear();
            _local_5 = _local_3.getMonth();
            _local_6 = _local_3.getDate();
            _local_7 = _local_3.getHours();
            _local_8 = _local_3.getMinutes();
            if (_local_8 < 10)
            {
                _local_9 = ("0" + _local_8);
            }
            else
            {
                _local_9 = String(_local_8);
            };
            if (_local_4 == _local_2.getFullYear())
            {
                _local_10 = "";
            }
            else
            {
                _local_10 = (" " + _local_4);
            };
            if (((_local_2.getMonth() == _local_5) && (_local_10 == "")))
            {
                if (_local_2.getDate() == _local_6)
                {
                    return ((("aujourd'hui à " + _local_7) + ":") + _local_9);
                };
                if ((_local_2.getDate() - 1) == _local_6)
                {
                    return ((("hier à " + _local_7) + ":") + _local_9);
                };
                return (((("le " + _local_6) + " ") + this.MoisTexte[_local_5]) + _local_10);
            };
            return (((("le " + _local_6) + " ") + this.MoisTexte[_local_5]) + _local_10);
        }

        public function Vignette_Menu(_arg_1:Array):void
        {
            var _local_2:Array;
            var _local_3:int;
            var _local_4:Array;
            var _local_5:int;
            var _local_6:int;
            var _local_7:int;
            var _local_8:int;
            var _local_9:int;
            var _local_10:int;
            var _local_11:MovieClip;
            var _local_12:int;
            var _local_13:Function;
            var _local_14:MovieClip;
            while (this._VignetteMenu.numChildren != 0)
            {
                this._VignetteMenu.removeChildAt(0);
            };
            _local_2 = _arg_1;
            _local_3 = _local_2.length;
            if (_local_3 == 0)
            {
                return;
            };
            _local_4 = new Array();
            _local_5 = 0;
            _local_6 = 5;
            _local_7 = 0;
            while (_local_7 < _local_3)
            {
                _local_11 = $Res.Pouf("$MenuBase");
                _local_11.buttonMode = true;
                _local_11.useHandCursor = true;
                this._VignetteMenu.addChild(_local_11);
                _local_11.mouseChildren = false;
                _local_11.x = 8;
                _local_11.y = _local_6;
                _local_6 = (_local_6 + 17);
                _local_11._Effet._Texte.styleSheet = this.StyleTexte;
                _local_11._Effet._Texte.htmlText = _local_2[_local_7];
                _local_11._Effet._Texte.autoSize = TextFieldAutoSize.LEFT;
                _local_12 = _local_11._Effet._Texte.width;
                if (_local_12 > _local_5)
                {
                    _local_5 = _local_12;
                };
                _local_13 = _local_2[(_local_7 + 1)];
                if (_local_13 != null)
                {
                    _local_11.Fonction = _local_13;
                    _local_11.Arg = _local_2[(_local_7 + 2)];
                    _local_11.addEventListener(MouseEvent.MOUSE_DOWN, this.Clique_Choix);
                    _local_11.addEventListener(MouseEvent.ROLL_OVER, this.Menue_RollOver);
                    _local_11.addEventListener(MouseEvent.ROLL_OUT, this.Menue_RollOut);
                }
                else
                {
                    if (_local_7)
                    {
                        _local_11.y = (_local_11.y + 3);
                        _local_6 = (_local_6 + 5);
                    }
                    else
                    {
                        _local_6 = (_local_6 + 2);
                    };
                    _local_4.push(_local_11);
                };
                _local_7 = (_local_7 + 3);
            };
            this._VignetteMenu.graphics.clear();
            this._VignetteMenu.graphics.lineStyle(3, 0, 1, true, "normal", null, JointStyle.MITER);
            this._VignetteMenu.graphics.beginFill(3294800);
            this._VignetteMenu.graphics.drawRect(0, 0, (_local_5 + 20), (this._VignetteMenu.height + 10));
            this._VignetteMenu.graphics.endFill();
            _local_8 = this._VignetteMenu.width;
            _local_9 = _local_4.length;
            _local_10 = 0;
            while (_local_10 < _local_9)
            {
                _local_14 = _local_4[_local_10];
                _local_14.mouseEnabled = false;
                _local_14.graphics.lineStyle(2, 0, 1, true);
                _local_14.graphics.beginFill(2635840);
                _local_14.graphics.drawRect(-7, 0, (_local_8 - 4), 19);
                _local_14.graphics.endFill();
                _local_10++;
            };
            this._VignetteMenu.x = (mouseX - 25);
            this._VignetteMenu.y = (mouseY - 17);
            if (this._VignetteMenu.x < 0)
            {
                this._VignetteMenu.x = 0;
            }
            else
            {
                if ((this._VignetteMenu.x + _local_8) > 800)
                {
                    this._VignetteMenu.x = (800 - _local_8);
                };
            };
            if ((this._VignetteMenu.y + this._VignetteMenu.height) > 600)
            {
                this._VignetteMenu.y = (600 - this._VignetteMenu.height);
            };
            addChild(this._VignetteMenu);
        }

        public function Menu_RollOver(_arg_1:MouseEvent):void
        {
            this.TimerPops.reset();
        }

        public function Menu_RollOut(_arg_1:MouseEvent):void
        {
            this.TimerPops.start();
        }

        public function Suppr_Menu(_arg_1:TimerEvent=null):void
        {
            if (this._VignetteMenu.parent)
            {
                removeChild(this._VignetteMenu);
            };
        }

        public function Clique_Choix(_arg_1:MouseEvent):void
        {
            var _local_2:MovieClip;
            _local_2 = (_arg_1.currentTarget as MovieClip);
            if (_local_2.Fonction != null)
            {
                if (_local_2.Arg == null)
                {
                    _local_2.Fonction();
                }
                else
                {
                    _local_2.Fonction(_local_2.Arg);
                };
            };
            this.Suppr_Menu();
        }

        public function Menue_RollOver(_arg_1:MouseEvent):void
        {
            _arg_1.currentTarget.gotoAndStop(2);
        }

        public function Menue_RollOut(_arg_1:MouseEvent):void
        {
            _arg_1.currentTarget.gotoAndStop(1);
        }

        public function Changer_Clavier():void
        {
            this.ClavierAnglais = (!(this.ClavierAnglais));
            if (this.ClavierAnglais)
            {
                this.Message_Chat("<J>English keyboard.");
            }
            else
            {
                this.Message_Chat("<J>Clavier français.");
            };
        }

        public function wintoutf(_arg_1:String):String
        {
            var _local_2:ByteArray;
            if (_arg_1.length == 0)
            {
                return (_arg_1);
            };
            if (_arg_1.charAt(0) == String.fromCharCode(181))
            {
                _local_2 = $Base64.decodeToByteArray(_arg_1.substr(1));
                _arg_1 = _local_2.readUTFBytes(_local_2.length);
            };
            return (_arg_1);
        }

        public function utftowin(_arg_1:String):String
        {
            var _local_2:Boolean;
            var _local_3:int;
            var _local_4:String;
            _local_2 = true;
            _local_3 = 0;
            while (_local_3 < _arg_1.length)
            {
                if (_arg_1.charCodeAt(_local_3) > 127)
                {
                    _local_2 = false;
                    break;
                };
                _local_3++;
            };
            if (_local_2)
            {
                return (_arg_1);
            };
            _local_4 = String.fromCharCode(181);
            _local_4 = (_local_4 + $Base64.encode(_arg_1));
            return (_local_4);
        }

        public function Initialisation_Particule():void
        {
            var i:int;
            var Clip:MovieClip;
            addChildAt(this.ParticuleZone, 3);
            addChildAt(this.ParticuleZone2, 4);
            stage.quality = StageQuality.HIGH;
            Noel.ParticuleNeige = new $ParticuleZero($Res.Pouf("$ParticuleNeige", true));
            Noel.ParticuleNeige2 = new $ParticuleZero($Res.Pouf("$ParticuleNeige2", true));
            i = 0;
            while (true)
            {
                try
                {
                    Clip = $Res.Pouf(("$P" + i), true);
                    if (i == 12)
                    {
                        Clip.transform.colorTransform = this.CouleurRouge;
                    };
                    i = (i + 1);
                    if (Clip)
                    {
                        this.ListeParticule.push(new $ParticuleZero(Clip));
                    }
                    else
                    {
                        stage.quality = StageQuality.HIGH;
                        return;
                    };
                }
                catch(E:Error)
                {
                    stage.quality = StageQuality.HIGH;
                    return;
                };
            };
        }

        public function Mouvement2(_arg_1:$Particule):void
        {
            _arg_1.x = (_arg_1.x + _arg_1.Vx);
            _arg_1.y = (_arg_1.y + _arg_1.Vy);
            if ((((_arg_1.y > 420) || (_arg_1.x < -20)) || (_arg_1.x > 820)))
            {
                _arg_1.Destruction = true;
            };
        }

        public function Mouvement(_arg_1:$Particule):void
        {
            _arg_1.x = (_arg_1.x + _arg_1.Vx);
            if (_arg_1.Vx < 0)
            {
                _arg_1.Vx = (_arg_1.Vx + (_arg_1.Fx + this.Fx));
                if (_arg_1.Vx > 0)
                {
                    _arg_1.Vx = _arg_1.Ax;
                }
                else
                {
                    if (((_arg_1.Ax > 0) || (-(_arg_1.Vmax) < _arg_1.Vx)))
                    {
                        _arg_1.Vx = (_arg_1.Vx + _arg_1.Ax);
                    };
                };
            }
            else
            {
                _arg_1.Vx = (_arg_1.Vx - (_arg_1.Fx + this.Fx));
                if (_arg_1.Vx < 0)
                {
                    _arg_1.Vx = _arg_1.Ax;
                }
                else
                {
                    if (((_arg_1.Ax < 0) || (_arg_1.Vx < _arg_1.Vmax)))
                    {
                        _arg_1.Vx = (_arg_1.Vx + _arg_1.Ax);
                    };
                };
            };
            _arg_1.y = (_arg_1.y + _arg_1.Vy);
            if (_arg_1.Gravité)
            {
                _arg_1.Vy = (_arg_1.Vy + this.Gy);
            };
            if (_arg_1.Vy < 0)
            {
                _arg_1.Vy = (_arg_1.Vy + (_arg_1.Fy + this.Fy));
                if (_arg_1.Vy > 0)
                {
                    _arg_1.Vy = _arg_1.Ay;
                }
                else
                {
                    if (_arg_1.Ay > 0)
                    {
                        _arg_1.Vy = (_arg_1.Vy + _arg_1.Ay);
                    };
                };
            }
            else
            {
                _arg_1.Vy = (_arg_1.Vy - (_arg_1.Fy + this.Fy));
                if (_arg_1.Vy < 0)
                {
                    _arg_1.Vy = _arg_1.Ay;
                }
                else
                {
                    if (_arg_1.Ay < 0)
                    {
                        _arg_1.Vy = (_arg_1.Vy + _arg_1.Ay);
                    };
                };
            };
        }

        public function Explosion(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int, _arg_5:int, _arg_6:Boolean=true, _arg_7:Number=0):void
        {
            var _local_8:$ParticuleZero;
            var _local_9:int;
            var _local_10:$Particule;
            var _local_11:Number;
            var _local_12:Number;
            if (stage.quality == this.LOW)
            {
                _arg_4 = int(Math.ceil((_arg_4 / 10)));
            };
            _local_8 = this.ListeParticule[_arg_1];
            _local_9 = 0;
            while (_local_9 < _arg_4)
            {
                _local_10 = new $Particule(_local_8, false);
                _local_10.Gravité = _arg_6;
                this.ParticuleZone.ListeParticule.push(_local_10);
                _local_10.x = _arg_2;
                _local_10.y = _arg_3;
                _local_11 = ((Math.random() * 3.14) - 1.57);
                _local_12 = (Math.random() * _arg_5);
                if ((_local_9 % 2) == 0)
                {
                    _local_10.Vx = ((-(Math.cos(_local_11)) * _local_12) * 2);
                }
                else
                {
                    _local_10.Vx = ((Math.cos(_local_11) * _local_12) * 2);
                };
                _local_10.Vy = (Math.sin(_local_11) * _local_12);
                _local_10.Ay = _arg_7;
                _local_9++;
            };
            this.ParticuleZone.DemandeRendu = true;
        }

        public function Explosion_Boule(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int, _arg_5:int):void
        {
            var _local_6:$ParticuleZero;
            var _local_7:int;
            var _local_8:int;
            var _local_9:$Particule;
            _local_6 = this.ListeParticule[_arg_1];
            _local_7 = int(((Math.random() < 0.5) ? 1 : -1));
            _local_8 = 0;
            while (_local_8 < _arg_4)
            {
                _local_9 = new $Particule(_local_6, false);
                this.ParticuleZone.ListeParticule.push(_local_9);
                _local_9.Gravité = false;
                _local_9.x = _arg_2;
                _local_9.y = (_arg_3 + ((Math.random() * 10) - 5));
                _local_9.Vx = ((Math.random() * (_arg_5 + 0.5)) * _local_7);
                _local_9.Vy = ((Math.random() * 1) - 0.5);
                _local_8++;
            };
            this.ParticuleZone.DemandeRendu = true;
        }

        public function Gravité(_arg_1:$Particule):void
        {
        }

        public function Changement_Langue(_arg_1:String):void
        {
            var _local_2:int;
            var _local_3:int;
            if (!this.LangueChoisie)
            {
                this.Langue = _arg_1;
                this.LangueChoisie = true;
                this.ClavierAnglais = (!(this.Langue == "fr"));
                if (this.AntiPetit < 0)
                {
                    this.AntiPetit = 1;
                }
                else
                {
                    this.AntiPetit = -1;
                };
                this.Init_Titre();
                stage.quality = StageQuality.HIGH;
                this.Remplacement_Texte(stage);
                _local_2 = this.ListeInterface.length;
                _local_3 = 0;
                while (_local_3 < _local_2)
                {
                    this.Remplacement_Texte(this.ListeInterface[_local_3]);
                    _local_3++;
                };
            };
        }

        public function $Texte(_arg_1:String, ... _args):String
        {
            var _local_3:String;
            var _local_4:int;
            var _local_5:int;
            if (!this.LangueChoisie)
            {
                return ((_arg_1 + "~~") + _args.join("~~"));
            };
            if (this.Langue == "fr")
            {
                _local_3 = $T[("FR" + _arg_1)];
            }
            else
            {
                if (this.Langue == "br")
                {
                    _local_3 = $T[("BR" + _arg_1)];
                }
                else
                {
                    if (this.Langue == "ru")
                    {
                        _local_3 = $T[("RU" + _arg_1)];
                    };
                };
            };
            if (_local_3 == null)
            {
                _local_3 = $T[("EN" + _arg_1)];
            };
            if (_local_3 != null)
            {
                _local_4 = _args.length;
                if (_local_4)
                {
                    _local_5 = 0;
                    while (_local_5 < _local_4)
                    {
                        _local_3 = _local_3.split(("%" + (_local_5 + 1))).join(_args[_local_5]);
                        _local_5++;
                    };
                };
                return (_local_3);
            };
            trace((("ATTENTION : Texte introuvable -> [" + _arg_1) + "]"));
            return ("");
        }

        public function Remplacement_Texte(CLIP:DisplayObjectContainer):void
        {
            var Num:int;
            var i:int;
            var Clip:DisplayObject;
            var Texte:TextField;
            var Couleur:uint;
            var TexteInfo:Array;
            Num = CLIP.numChildren;
            i = 0;
            while (i < Num)
            {
                Clip = CLIP.getChildAt(i);
                if ((Clip is TextField))
                {
                    Texte = (Clip as TextField);
                    if (Texte.text.charAt(0) == "$")
                    {
                        try
                        {
                            Couleur = Texte.textColor;
                            TexteInfo = Texte.text.split("~~");
                            Texte.htmlText = this.$Texte.apply(this, TexteInfo);
                            if (TexteInfo[0].charAt("<") != -1)
                            {
                                Texte.textColor = Couleur;
                            };
                        }
                        catch(e:Error)
                        {
                            trace(("Erreur sur le texte : " + Texte.text));
                        };
                    };
                    if (Texte.defaultTextFormat.font == "Soopafresh")
                    {
                        Texte.x = (Texte.x + this.AntiPetit);
                    };
                }
                else
                {
                    if ((Clip is DisplayObjectContainer))
                    {
                        this.Remplacement_Texte((Clip as DisplayObjectContainer));
                    };
                };
                i = (i + 1);
            };
        }

        public function Init_Titre():void
        {
            this.ClipInterface._AIDE.Reset();
            this.Mot_Tribu = this.$Texte("$Tribu");
            this.Mot_A = this.$Texte("$Mot_À");
            this.Mot_De = this.$Texte("$Mot_De");
            this.Mot_Chamane = this.$Texte("$Mot_Chamane");
            this.ListeTitre[0] = this.$Texte("$Souris_Grise");
            this.ListeTitre[1] = this.$Texte("$Disciple_Chamane");
            this.ListeTitre[2] = this.$Texte("$Chamane_Accomplie");
            this.ListeTitre[3] = this.$Texte("$Titre_Chamane");
            this.ListeTitre[4] = this.$Texte("$Maîtresse_Chamane");
            this.ListeTitre[13] = this.$Texte("$Chamane_Inspirée");
            this.ListeTitre[14] = this.$Texte("$Championne_Chamane");
            this.ListeTitre[15] = this.$Texte("$Chamane_Glorieuse");
            this.ListeTitre[16] = this.$Texte("$Duchesse_Chamane");
            this.ListeTitre[17] = this.$Texte("$Princesse_Chamane");
            this.ListeTitre[18] = this.$Texte("$Impératrice_Chamane");
            this.ListeTitre[19] = this.$Texte("$Chamane_Légendaire");
            this.ListeTitre[20] = this.$Texte("$Chamane_Immortelle");
            this.ListeTitre[21] = this.$Texte("$Chamane_Élue");
            this.ListeTitre[22] = this.$Texte("$Chamane_Sacrée");
            this.ListeTitre[23] = this.$Texte("$Oracle_Chamane");
            this.ListeTitre[24] = this.$Texte("$Prophète_Chamane");
            this.ListeTitre[25] = this.$Texte("$Chamanifique");
            this.ListeTitre[94] = this.$Texte("$Ancienne_Chamane");
            this.ListeTitre[95] = this.$Texte("$Chamane_Sans_Peur");
            this.ListeTitre[96] = this.$Texte("$ToutePuissante_Chamane");
            this.ListeTitre[97] = this.$Texte("$Chamane_Architecte");
            this.ListeTitre[98] = this.$Texte("$Mademoiselle");
            this.ListeTitre[99] = this.$Texte("$Lady_Chamane");
            this.ListeTitre[100] = this.$Texte("$Aimée");
            this.ListeTitre[101] = this.$Texte("$Magicienne");
            this.ListeTitre[102] = this.$Texte("$Héroïne_Des_Souris");
            this.ListeTitre[103] = this.$Texte("$Ange_Chamane");
            this.ListeTitre[104] = this.$Texte("$La_Créatrice");
            this.ListeTitre[105] = this.$Texte("$Chamane_Absolue");
            this.ListeTitre[106] = this.$Texte("$Chamane_Miraculeuse");
            this.ListeTitre[107] = this.$Texte("$Libératrice");
            this.ListeTitre[108] = this.$Texte("$CDM");
            this.ListeTitre[109] = this.$Texte("$Chamane_Fantôme");
            this.ListeTitre[110] = this.$Texte("$Titre_Esprit");
            this.ListeTitre[111] = this.$Texte("$DemiDéesse_Chamane");
            this.ListeTitre[112] = this.$Texte("$Dernier_Espoir");
            this.ListeTitre[113] = this.$Texte("$Rédemptrice");
            this.ListeTitre[114] = this.$Texte("$Alpha_Omega");
            this.ListeTitre[5] = this.$Texte("$Souris_Gourmande");
            this.ListeTitre[6] = this.$Texte("$La_Fromage");
            this.ListeTitre[7] = this.$Texte("$Owi_Fromage");
            this.ListeTitre[8] = this.$Texte("$Fromaaaage");
            this.ListeTitre[35] = this.$Texte("$Souris_Militante");
            this.ListeTitre[36] = this.$Texte("$Souris_Syndiquée");
            this.ListeTitre[37] = this.$Texte("$Souris_en_Grève");
            this.ListeTitre[26] = this.$Texte("$Souris_Gloutonne");
            this.ListeTitre[27] = this.$Texte("$Grapilleuse");
            this.ListeTitre[28] = this.$Texte("$Souris_Dodue");
            this.ListeTitre[29] = this.$Texte("$Souris_Ventrue");
            this.ListeTitre[30] = this.$Texte("$Souris_Joufflue");
            this.ListeTitre[31] = this.$Texte("$Bouboule");
            this.ListeTitre[32] = this.$Texte("$Patapouffe");
            this.ListeTitre[33] = this.$Texte("$La_Rondouillarde");
            this.ListeTitre[34] = this.$Texte("$La_Boursoufflée");
            this.ListeTitre[38] = this.$Texte("$Initiée_du_Fromage");
            this.ListeTitre[39] = this.$Texte("$Adepte_du_Fromage");
            this.ListeTitre[40] = this.$Texte("$Prêtresse_du_Fromage");
            this.ListeTitre[41] = this.$Texte("$La_Moissonneuse");
            this.ListeTitre[72] = this.$Texte("$Chercheuse_De_Fromage");
            this.ListeTitre[73] = this.$Texte("$Chevalier_Fromage");
            this.ListeTitre[74] = this.$Texte("$Cheesegrubber");
            this.ListeTitre[75] = this.$Texte("$Grassouillette");
            this.ListeTitre[76] = this.$Texte("$Souris_Robuste");
            this.ListeTitre[77] = this.$Texte("$Amoureuse_Du_Fromage");
            this.ListeTitre[78] = this.$Texte("$Camembert");
            this.ListeTitre[79] = this.$Texte("$PontLeveque");
            this.ListeTitre[80] = this.$Texte("$L_Attrape_Fromage");
            this.ListeTitre[81] = this.$Texte("$Its_Over_9000");
            this.ListeTitre[82] = this.$Texte("$Collectionneuse");
            this.ListeTitre[83] = this.$Texte("$Cheeseleader");
            this.ListeTitre[84] = this.$Texte("$Voleuse_De_Fromage");
            this.ListeTitre[85] = this.$Texte("$Fromagère");
            this.ListeTitre[86] = this.$Texte("$Pizza_Fromage");
            this.ListeTitre[87] = this.$Texte("$Ministre_Du_Fromage");
            this.ListeTitre[88] = this.$Texte("$Souris_Prodigieuse");
            this.ListeTitre[89] = this.$Texte("$Princesse_De_Transformice");
            this.ListeTitre[90] = this.$Texte("$Fromalcoolique");
            this.ListeTitre[91] = this.$Texte("$The_Cheesen_One");
            this.ListeTitre[92] = this.$Texte("$Sailor_Mouse");
            this.ListeTitre[93] = this.$Texte("$MON_FROMAGE");
            this.ListeTitre[9] = this.$Texte("$Souris_Rapide");
            this.ListeTitre[10] = this.$Texte("$Souris_Agile");
            this.ListeTitre[11] = this.$Texte("$Souris_Pirate");
            this.ListeTitre[12] = this.$Texte("$Souris_Ninja");
            this.ListeTitre[42] = this.$Texte("$Souris_Fripponne");
            this.ListeTitre[43] = this.$Texte("$Pilleuse");
            this.ListeTitre[44] = this.$Texte("$Traqueuse");
            this.ListeTitre[45] = this.$Texte("$Écumeuse");
            this.ListeTitre[46] = this.$Texte("$La_Silencieuse");
            this.ListeTitre[47] = this.$Texte("$Souris_Faucon");
            this.ListeTitre[48] = this.$Texte("$Souris_Cobra");
            this.ListeTitre[49] = this.$Texte("$Spidersouris");
            this.ListeTitre[50] = this.$Texte("$Vif_Argent");
            this.ListeTitre[51] = this.$Texte("$Souris_Athlétique");
            this.ListeTitre[52] = this.$Texte("$Souris_Hâtive");
            this.ListeTitre[53] = this.$Texte("$Le_Missile");
            this.ListeTitre[54] = this.$Texte("$Sonic_La_Souris");
            this.ListeTitre[55] = this.$Texte("$Meilleur_Ping");
            this.ListeTitre[56] = this.$Texte("$Kamikaze");
            this.ListeTitre[57] = this.$Texte("$Souris_Guerrière");
            this.ListeTitre[58] = this.$Texte("$Mach_1");
            this.ListeTitre[59] = this.$Texte("$Chasseresse");
            this.ListeTitre[60] = this.$Texte("$Prem_s");
            this.ListeTitre[61] = this.$Texte("$Sniper");
            this.ListeTitre[62] = this.$Texte("$Flash");
            this.ListeTitre[63] = this.$Texte("$Supermouse");
            this.ListeTitre[64] = this.$Texte("$Vitesse_Lumière");
            this.ListeTitre[65] = this.$Texte("$Voyageuse_Du_Temps");
            this.ListeTitre[66] = this.$Texte("$Vent_Rapide");
            this.ListeTitre[67] = this.$Texte("$EMC2");
            this.ListeTitre[68] = this.$Texte("$La_Sauteuse");
            this.ListeTitre[69] = this.$Texte("$L_Intouchable");
            this.ListeTitre[70] = this.$Texte("$WallJumper");
            this.ListeTitre[71] = this.$Texte("$FOUDRE");
            this.ListeTitre[115] = this.$Texte("$Jolie_Souris");
            this.ListeTitre[116] = this.$Texte("$Souris_Adorable");
            this.ListeTitre[117] = this.$Texte("$Souris_Charmante");
            this.ListeTitre[118] = this.$Texte("$Souris_Coquette");
            this.ListeTitre[119] = this.$Texte("$Souris_Mignonne");
            this.ListeTitre[120] = this.$Texte("$Souris_Frivole");
            this.ListeTitre[121] = this.$Texte("$Souris_Snob");
            this.ListeTitre[122] = this.$Texte("$Souris_A_La_Mode");
            this.ListeTitre[123] = this.$Texte("$Souris_Actrice");
            this.ListeTitre[124] = this.$Texte("$Souris_Fashion");
            this.ListeTitre[125] = this.$Texte("$Sexy");
            this.ListeTitre[126] = this.$Texte("$SuperStar");
            this.ListeTitre[127] = this.$Texte("$Petit_Flocon");
            this.ListeTitre[128] = this.$Texte("$Esprit_Noel");
            this.ListeTitre[129] = this.$Texte("$Petit_Lutin");
            this.ListeTitre[130] = this.$Texte("$Papa_Noel");
            this.ListeTitre[200] = this.$Texte("$Déesse_Chamane");
            this.ListeTitre[201] = this.$Texte("$Gardienne_des_Fromages");
            this.ListeTitre[202] = this.$Texte("$Maîtresse_du_Vent");
            this.ListeTitre[440] = "<font color='#FEB1FC'>Fromadmin</font>";
            this.ListeTitre[444] = "<font color='#FEB1FC'>La Belette</font>";
            this.NomObjet[0] = this.$Texte("$Flèche");
            this.NomObjet[1] = this.$Texte("$Petite_Caisse");
            this.NomObjet[2] = this.$Texte("$Grosse_Caisse");
            this.NomObjet[3] = this.$Texte("$Petite_Planche");
            this.NomObjet[4] = this.$Texte("$Grande_Planche");
            this.NomObjet[5] = this.$Texte("$Balle_Lourde");
            this.NomObjet[6] = this.$Texte("$Balle");
            this.NomObjet[7] = this.$Texte("$Trampoline");
            this.NomObjet[8] = "Petite planche rugueuse";
            this.NomObjet[9] = "Grande planche rugueuse";
            this.NomObjet[10] = this.$Texte("$Enclume");
            this.NomObjet[11] = this.$Texte("$OC_ClouRouge");
            this.NomObjet[12] = this.$Texte("$OC_MoteurRouge1");
            this.NomObjet[13] = this.$Texte("$OC_MoteurRouge2");
            this.NomObjet[14] = this.$Texte("$OC_ClouVert");
            this.NomObjet[15] = this.$Texte("$OC_MoteurVert1");
            this.NomObjet[16] = this.$Texte("$OC_MoteurVert2");
            this.NomObjet[17] = this.$Texte("$Boulet");
            this.NomObjet[18] = this.$Texte("$Boulet");
            this.NomObjet[19] = this.$Texte("$Boulet");
            this.NomObjet[20] = this.$Texte("$Boulet");
            this.NomObjet[21] = "Balle collante";
            this.NomObjet[22] = this.$Texte("$OC_ClouJaune");
            this.NomObjet[23] = "Bombe";
            this.NomObjet[24] = this.$Texte("$Esprit");
            this.NomObjet[25] = this.$Texte("$Appât");
            this.NomObjet[26] = this.$Texte("$TP_0");
            this.NomObjet[27] = this.$Texte("$TP_1");
            this.NomObjet[28] = this.$Texte("$Ballon");
            this.NomObjet[32] = this.$Texte("$Rune");
            this.NomObjet[44] = "Totem";
            this.NomObjet[88] = this.$Texte("$OC_Concentration");
        }

        public function Reception(E:DataEvent):void
        {
            var Donnee:String;
            var Message:Array;
            var Code:String;
            var C:int;
            var CC:int;
            var Joueur:$Joueur;
            var CJ:int;
            var Physique:b2Body;
            var InfoJoueur:Array;
            var Num:int;
            var Vx:Number;
            var Vy:Number;
            var i:int;
            var InfoBaseMobile:String;
            var InfoMobile:Array;
            var Av:Number;
            var AncienneDroite:Boolean;
            var AncienneGauche:Boolean;
            var Réveille:Boolean;
            var CodeTP:int;
            var CodeMondeSuivant:int;
            var InfoMonde:Array;
            var InfoTP:Array;
            var Classement:int;
            var ChaineClassement:String;
            var TempsClassement:Number;
            var CodeTexte:int;
            var Type:int;
            var AncienMessage:String;
            var TempsBan:Number;
            var LCMDT:Array;
            var CMDT:int;
            Donnee = E.data;
            Message = Donnee.split(this.$1);
            Code = Message[0];
            C = Code.charCodeAt(0);
            CC = Code.charCodeAt(1);
            if (C == 4)
            {
                if (CC == 3)
                {
                    if (!this.Synchroniseur)
                    {
                        Message.shift();
                        Message.shift();
                        Num = Message.length;
                        i = 0;
                        while (i < Num)
                        {
                            InfoBaseMobile = Message[i];
                            Physique = this.ListeMobile[i];
                            if (InfoBaseMobile == "x")
                            {
                                if (Physique)
                                {
                                    this.Destruction_Mobile(i);
                                };
                            }
                            else
                            {
                                InfoMobile = InfoBaseMobile.split(",");
                                if (!Physique)
                                {
                                    Physique = this.Creation_Objet(InfoMobile[0], 0, 0, 0, 0, 0, (InfoMobile[7] == "1"), i);
                                };
                                Physique.SetXForm(new b2Vec2(InfoMobile[1], InfoMobile[2]), InfoMobile[5]);
                                Vx = Number(InfoMobile[3]);
                                Vy = Number(InfoMobile[4]);
                                Physique.SetLinearVelocity(new b2Vec2(Vx, Vy));
                                Av = Number(InfoMobile[6]);
                                Physique.SetAngularVelocity(Av);
                                if (InfoMobile[8] == "1")
                                {
                                    Physique.PutToSleep();
                                }
                                else
                                {
                                    Physique.WakeUp();
                                };
                            };
                            i = (i + 1);
                        };
                    };
                    return;
                };
                if (CC == 4)
                {
                    CJ = int(Message[11]);
                    Joueur = this.ListeJoueur[CJ];
                    if (((Joueur) && (!(Joueur.ClipJoueur))))
                    {
                        AncienneDroite = Joueur.DroiteEnCours;
                        AncienneGauche = Joueur.GaucheEnCours;
                        Joueur.DroiteEnCours = (Message[2] == "1");
                        Joueur.GaucheEnCours = (Message[3] == "1");
                        Physique = Joueur.Physique;
                        Physique.SetXForm(new b2Vec2((int(Message[4]) / 100), (int(Message[5]) / 100)), 0);
                        Vx = (Number(Message[6]) / 100);
                        Vy = (Number(Message[7]) / 100);
                        Physique.SetLinearVelocity(new b2Vec2(Vx, Vy));
                        Réveille = false;
                        if (Message[8] == "1")
                        {
                            Joueur.MAJ_Saut(true, Message[9]);
                        }
                        else
                        {
                            Joueur.MAJ_Saut(false);
                        };
                        if (Joueur.DroiteEnCours)
                        {
                            if (!AncienneDroite)
                            {
                                Joueur.Animation_Course(true);
                            };
                            Réveille = true;
                        }
                        else
                        {
                            if (Joueur.GaucheEnCours)
                            {
                                if (!AncienneGauche)
                                {
                                    Joueur.Animation_Course(false);
                                };
                                Réveille = true;
                            }
                            else
                            {
                                if (((AncienneDroite) || (AncienneGauche)))
                                {
                                    Joueur.Animation_Statique(AncienneDroite);
                                };
                            };
                        };
                        if (Réveille)
                        {
                            Physique.WakeUp();
                        }
                        else
                        {
                            if (((((Vx < 0.01) && (-0.01 < Vx)) && (Vy < 0.01)) && (-0.01 < Vy)))
                            {
                                Physique.PutToSleep();
                            }
                            else
                            {
                                Physique.WakeUp();
                            };
                        };
                        CodeTP = int(Message[10]);
                        if (CodeTP == 1)
                        {
                            this.Explosion(9, (this.TP0.x + 31), (this.TP0.y + 31), 20, 2, false, -0.1);
                            Physique.WakeUp();
                        }
                        else
                        {
                            if (CodeTP == 2)
                            {
                                this.Explosion(11, (this.TP1.x + 31), (this.TP1.y + 31), 20, 2, false, -0.1);
                                Physique.WakeUp();
                            };
                        };
                    };
                    return;
                };
                if (CC == 6)
                {
                    Physique = this.ListeMobile[Message[1]];
                    if (Physique)
                    {
                        Physique.SetXForm(new b2Vec2(0, 600), 0);
                    };
                    return;
                };
                if (CC == 8)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (((Joueur) && (!(Joueur.ClipJoueur))))
                    {
                        Joueur.Vers_La_Droite((Message.length == 2));
                    };
                    return;
                };
                if (CC == 9)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (((Joueur) && (!(Joueur.ClipJoueur))))
                    {
                        if (Noel.BouleDeNeige)
                        {
                            if (Message.length == 3)
                            {
                                Joueur.Animation_Neige();
                            }
                            else
                            {
                                Joueur.Animation_Statique(Joueur.AnimDroite);
                            };
                        }
                        else
                        {
                            if (Message.length == 3)
                            {
                                Joueur.Animation_Boule(Joueur.AnimDroite);
                            }
                            else
                            {
                                Joueur.Fin_Animation_Boule(Joueur.AnimDroite);
                            };
                        };
                    };
                    return;
                };
                if (CC == 11)
                {
                    Joueur = this.ListeJoueur[Message[3]];
                    if (((Joueur) && (!(Joueur.ClipJoueur))))
                    {
                        if (Message[1] == "1")
                        {
                            Joueur.HautEnCours = (Message[2] == "1");
                        }
                        else
                        {
                            Joueur.BasEnCours = (Message[2] == "1");
                        };
                    };
                    return;
                };
                if (CC == 12)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        Joueur.Animation_Invocation(Joueur.AnimDroite);
                    };
                    return;
                };
                if (CC == 13)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        Joueur.Animation_Statique(Joueur.AnimDroite);
                    };
                    return;
                };
                if (CC == 14)
                {
                    this.Affichage_Concentration(Message[1], Message[2]);
                    return;
                };
                if (CC == 15)
                {
                    this.Désactivation_Conjuration(Message[1], Message[2]);
                    return;
                };
                if (CC == 20)
                {
                    this.Envoie_Serveur((this.$4 + this.$20));
                    return;
                };
            };
            if (C == 5)
            {
                if (CC == 5)
                {
                    CodeMondeSuivant = int(Message[1]);
                    this.ClipInterface._FRO.visible = false;
                    if (CodeMondeSuivant == -1)
                    {
                        InfoMonde = Message[5].split(this.$2);
                        if (InfoMonde[2] == "1")
                        {
                            this.ClipInterface._FRO.visible = true;
                            this.ClipInterface._M.htmlText = ("      <J>" + InfoMonde[1]);
                        }
                        else
                        {
                            this.ClipInterface._M.htmlText = InfoMonde[1];
                        };
                        this.Nouvelle_Partie(CodeMondeSuivant, InfoMonde[0]);
                    }
                    else
                    {
                        this.ClipInterface._M.htmlText = String(CodeMondeSuivant);
                        this.Nouvelle_Partie(CodeMondeSuivant);
                    };
                    this.ClipInterface.Validation_Carte((Message.length == 7));
                    while (this.ClipOP.numChildren)
                    {
                        this.ClipOP.removeChildAt(0);
                    };
                    this.ClipInterface._JEV.text = Message[2];
                    this.CodePartieEnCours = int(Message[3]);
                    if (Message[4])
                    {
                        InfoTP = Message[4].split("#");
                        this.Activation_TP(true, InfoTP[0], InfoTP[1]);
                        this.Activation_TP(false, InfoTP[2], InfoTP[3]);
                    };
                    return;
                };
                if (CC == 6)
                {
                    this.TempsMondeRestant = int(Message[1]);
                    return;
                };
                if (CC == 7)
                {
                    Num = Message.length;
                    i = 1;
                    while (i < Num)
                    {
                        Transformice.Instance.Création_Lien.apply(Transformice.Instance, Message[i].split(","));
                        i = (i + 1);
                    };
                    return;
                };
                if (CC == 8)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (!Joueur)
                    {
                        return;
                    };
                    if (Joueur.ClipJoueur)
                    {
                        return;
                    };
                    Joueur.Animation_Invocation(Joueur.AnimDroite);
                    this.Objet_Transparent(("O" + Message[1]), Message[2], Message[3], Message[4], Message[5], true);
                    return;
                };
                if (CC == 9)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        Joueur.Animation_Statique(Joueur.AnimDroite);
                    };
                    this.Supprimer_OP(("O" + Message[1]));
                    return;
                };
                if (CC == 14)
                {
                    this.Création_Clou(Message[1], Message[2], Message[3]);
                    return;
                };
                if (CC == 15)
                {
                    this.Création_Sol(Message[1], Message[2], Message[3], Message[4]);
                    return;
                };
                if (CC == 16)
                {
                    this.Déplacement_Fromage(Message[1], Message[2]);
                    return;
                };
                if (CC == 17)
                {
                    this.Génération_Explosion(Message[1], Message[2], Message[3], Message[4], (Message[5] == "1"), true, Message[6]);
                    return;
                };
                if (CC == 18)
                {
                    this.ClipInterface._FRO.visible = true;
                    this.ClipInterface._M.htmlText = ("      <J>" + this.ClipInterface._M.text);
                    this.Message_Chat(("<J>" + this.$Texte("$Carte_Perma")));
                    return;
                };
                if (CC == 19)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        this.Souris_Grosse(Joueur);
                        this.Explosion(3, (Joueur.x - 10), (Joueur.y - 10), 10, 2, false);
                        if (this.Monde.Fromage_Recup != null)
                        {
                            this.Monde.Fromage_Recup();
                        };
                    };
                    return;
                };
                if (CC == 20)
                {
                    if (Message.length == 9)
                    {
                        Joueur = this.ListeJoueur[Message[1]];
                        if (((Joueur) && (Joueur.ClipJoueur)))
                        {
                            return;
                        };
                        this.Creation_Objet(Message[2], Message[3], Message[4], Message[5], Message[6], Message[7], (Message[8] == "1"));
                    }
                    else
                    {
                        this.Creation_Objet(Message[1], Message[2], Message[3], Message[4], Message[5], Message[6], (Message[7] == "1"));
                    };
                    return;
                };
                if (CC == 21)
                {
                    this.Message_Chat(this.$Texte("$Message_Salon", Message[1]));
                    this.ClipInterface._SA.htmlText = this.$Texte("$Salon_Cible", ("<BL>" + Message[1]));
                    this.ClipDessin.graphics.clear();
                    this.ClipDessin.graphics.lineStyle(2, 3225412);
                    return;
                };
                if (CC == 22)
                {
                    this.MondePhysique.m_gravity = new b2Vec2(Message[1], Message[2]);
                    return;
                };
                if (CC == 23)
                {
                    Noel.Tempete_Neige((Message.length == 2));
                    return;
                };
            };
            if (C == 6)
            {
                if (CC == 6)
                {
                    if (this.VersionRusse)
                    {
                        Message[3] = this.wintoutf(Message[3]);
                    };
                    if (Message[3].indexOf("<") != -1)
                    {
                        return;
                    };
                    if (this.ListeMuteJoueur.indexOf(Message[2]) != -1)
                    {
                        return;
                    };
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        this.Affichage_Bulle(Joueur, Message[3]);
                        if (Joueur.Guide2)
                        {
                            this.Message_Chat(Message[3], Message[2], false, true, 0, true);
                        }
                        else
                        {
                            if (Joueur.Guide)
                            {
                                this.Message_Chat(Message[3], Message[2], false, true);
                            }
                            else
                            {
                                this.Message_Chat(Message[3], Message[2]);
                            };
                        };
                    }
                    else
                    {
                        this.Message_Chat(Message[3], Message[2]);
                    };
                    return;
                };
                if (CC == 7)
                {
                    if (((Message.length > 1) && (!(Message[1].indexOf("<") == -1))))
                    {
                        return;
                    };
                    if (Message.length == 1)
                    {
                        this.Message_Chat(this.$Texte("$Joueur_Existe_Pas"));
                    }
                    else
                    {
                        if (Message.length == 3)
                        {
                            if (this.VersionRusse)
                            {
                                Message[1] = this.wintoutf(Message[1]);
                            };
                            this.Message_Chat(Message[1], Message[2], false, false, 1);
                        }
                        else
                        {
                            if (this.ListeMuteJoueur.indexOf(Message[2]) != -1)
                            {
                                return;
                            };
                            if (this.VersionRusse)
                            {
                                Message[1] = this.wintoutf(Message[1]);
                            };
                            this.Message_Chat(Message[1], Message[2], false, false, 2);
                        };
                    };
                    return;
                };
                if (CC == 17)
                {
                    this.TempsPartieZéro = (getTimer() - 100000);
                    return;
                };
                if (CC == 20)
                {
                    this.Message_Chat(("<BL>" + Message[1]), "Serveur");
                    return;
                };
            };
            if (C == 8)
            {
                if (CC == 5)
                {
                    this.Destruction_Joueur(Message[1], 1, Message[3]);
                    this.MAJ_InterfaceListeJoueur();
                    return;
                };
                if (CC == 6)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (!this.Guide)
                    {
                        Classement = int(Message[4]);
                        ChaineClassement = ((Classement < 10) ? ("0" + Classement) : String(Classement));
                        TempsClassement = (int(Message[5]) / 10);
                        if (Classement < 15)
                        {
                            if (Classement == 1)
                            {
                                this.ClipInterface._CL.htmlText = (((((ChaineClassement + "<BL> - ") + Joueur.NomJoueur) + " - <V>") + TempsClassement) + "s");
                            }
                            else
                            {
                                this.ClipInterface._CL.htmlText = (this.ClipInterface._CL.htmlText + (((((("\n" + ChaineClassement) + "<BL> - ") + Joueur.NomJoueur) + " - <V>") + TempsClassement) + "s"));
                            };
                        };
                    };
                    this.Destruction_Joueur(Message[1], 2, Message[3], true);
                    this.MAJ_InterfaceListeJoueur();
                    return;
                };
                if (CC == 7)
                {
                    this.Destruction_Joueur(Message[1]);
                    this.MAJ_InterfaceListeJoueur();
                    return;
                };
                if (CC == 8)
                {
                    InfoJoueur = Message[1].split("#");
                    Joueur = this.Creation_Joueur(InfoJoueur, (Message[2] == "0"));
                    if (!Joueur.Mort)
                    {
                        if (Joueur.ClipJoueur)
                        {
                            this.ClipListeJoueur.addChild(Joueur);
                            this.LancementChargementSouris = true;
                            this.Reset_Saut();
                        }
                        else
                        {
                            this.ClipListeJoueur.addChildAt(Joueur, 0);
                        };
                    };
                    if (Message.length == 2)
                    {
                        this.MAJ_InterfaceListeJoueur();
                    };
                    return;
                };
                if (CC == 9)
                {
                    Message.shift();
                    this.Chargement_Liste_Joueur(Message);
                    this.MAJ_InterfaceListeJoueur();
                    this.InterfaceListeJoueur.Position(0);
                    return;
                };
                if (CC == 10)
                {
                    this.ClipProfil.Affichage(Message[1], Message[2].split(","), Message[3], Message[4].split(","), Message[5], Message[6]);
                    return;
                };
                if (CC == 11)
                {
                    this.Message_Chat(("<V>" + this.$Texte("$Connexion_Ami", Message[1])));
                    return;
                };
                if (CC == 12)
                {
                    CodeTexte = int(Message[1]);
                    if (CodeTexte == 0)
                    {
                        this.Message_Chat(this.$Texte("$Max_Amis"));
                    }
                    else
                    {
                        if (CodeTexte == 1)
                        {
                            this.Message_Chat(this.$Texte("$Nouveau_Ami", Message[2]));
                        }
                        else
                        {
                            if (CodeTexte == 2)
                            {
                                this.Message_Chat(this.$Texte("$Deja_Ami", Message[2]));
                            }
                            else
                            {
                                if (CodeTexte == 4)
                                {
                                    this.Message_Chat(this.$Texte("$Suppr_Ami", Message[2]));
                                }
                                else
                                {
                                    if (CodeTexte == 8)
                                    {
                                        Message.shift();
                                        Message.shift();
                                        this.ClipInterface._A.Reception_Amis(Message);
                                    };
                                };
                            };
                        };
                    };
                    return;
                };
                if (CC == 13)
                {
                    this.Message_Chat(this.$Texte("$Nouveau_Titre", this.ListeTitre[Message[1]]));
                    return;
                };
                if (CC == 14)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        this.Message_Chat(this.$Texte("$Gain_Titre", Joueur.NomJoueur, this.ListeTitre[Message[2]]));
                        if (Joueur.ClipJoueur)
                        {
                            this.ListeTitreDisponible.push(int(Message[2]));
                            this.Message_Chat(this.$Texte("$Info_Titre"));
                        };
                    };
                    return;
                };
                if (CC == 15)
                {
                    i = 1;
                    while (i < Message.length)
                    {
                        this.ListeTitreDisponible.push(int(Message[i]));
                        i = (i + 1);
                    };
                    return;
                };
                if (CC == 16)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        if (Message.length == 3)
                        {
                            if (!Joueur.ClipJoueur)
                            {
                                this.Détachement_Ballon_Joueur(Joueur);
                            };
                        }
                        else
                        {
                            this.Création_Souris_Volante(Joueur);
                        };
                    };
                    return;
                };
                if (CC == 17)
                {
                    this.Message_Chat(this.$Texte("$Info_Fromage_Chamane", Message[1], Message[2]));
                    return;
                };
                if (CC == 18)
                {
                    this.ClipJoueur.Mort = false;
                    this.Message_Chat(this.$Texte("$Info_Fin_Chamane"));
                    return;
                };
                if (CC == 19)
                {
                    this.ListeMuteJoueur.push(Message[1]);
                    this.Message_Chat(this.$Texte("$Info_Mute", Message[1]));
                    return;
                };
                if (CC == 20)
                {
                    this.Guide = false;
                    this._I._CH.htmlText = "";
                    if (Message.length == 2)
                    {
                        Joueur = this.ListeJoueur[Message[1]];
                        this.Transformation_Chamane(Joueur, false);
                        if (Joueur)
                        {
                            this._I._CH.htmlText = Joueur.NomJoueur;
                        };
                    }
                    else
                    {
                        if (Message.length == 3)
                        {
                            this.DoubleChamane = true;
                            Joueur = this.ListeJoueur[Message[1]];
                            this.Transformation_Chamane(Joueur, false);
                            if (Joueur)
                            {
                                this._I._CH.htmlText = (this._I._CH.htmlText + Joueur.NomJoueur);
                            };
                            Joueur = this.ListeJoueur[Message[2]];
                            this.Transformation_Chamane(Joueur, true);
                            if (Joueur)
                            {
                                this._I._CH.htmlText = (this._I._CH.htmlText + (" - <font color='#FEB1FC'>" + Joueur.NomJoueur));
                            };
                        }
                        else
                        {
                            this._I._CH.htmlText = "-";
                        };
                    };
                    this.Init_Guide();
                    this.Chargement_Image(this.ClipInterface._I, "http://avatar.transformice.com/A/", this.ClipJoueur.Avatar);
                    return;
                };
                if (CC == 21)
                {
                    this.Synchroniseur = false;
                    if (int(Message[1]) == this.CodeJoueur)
                    {
                        this.Synchroniseur = true;
                        if (Message.length == 3)
                        {
                            this.Init_XML();
                        };
                    };
                    return;
                };
                if (CC == 22)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        Type = int(Message[2]);
                        if (Type == 1)
                        {
                            Joueur.Animation_Danse(Joueur.AnimDroite);
                        }
                        else
                        {
                            if (Type == 2)
                            {
                                Joueur.Animation_Rire(Joueur.AnimDroite);
                            }
                            else
                            {
                                if (Type == 3)
                                {
                                    Joueur.Animation_Cry(Joueur.AnimDroite);
                                }
                                else
                                {
                                    if (Type == 4)
                                    {
                                        Joueur.Animation_Bisous();
                                    };
                                };
                            };
                        };
                    };
                    return;
                };
                if (CC == 23)
                {
                    this.Guide = false;
                    this._I._CH.htmlText = "";
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        this.Message_Chat(("<J>" + this.$Texte("$Message_Voleuse", Joueur.NomJoueur)));
                        this._I._CH.htmlText = Joueur.NomJoueur;
                        Joueur.NomTexte.textColor = 12238127;
                        this.MondeSourisFromage = true;
                        this.JoueurSourisFromage = Joueur;
                        if (this.SpawnGuide)
                        {
                            Joueur.Physique.SetXForm(new b2Vec2((this.SpawnGuide.x / 30), (this.SpawnGuide.y / 30)), 0);
                            Joueur.x = this.SpawnGuide.x;
                            Joueur.y = this.SpawnGuide.y;
                        };
                    };
                    this.Init_Guide();
                    return;
                };
                if (CC == 24)
                {
                    this.ClipInterface._Avatar.Initialisation(Message[1]);
                    return;
                };
            };
            if (C == 14)
            {
                if (CC == 4)
                {
                    this.ClipInterface._Vote.Initialisation(Message[1], Message[2], Message[3]);
                    return;
                };
                if (CC == 5)
                {
                    this.Edition = false;
                    this.ClipInterface._Exp.Initialisation(Message[1]);
                    return;
                };
                if (CC == 8)
                {
                    this.ClipInterface._Editeur._OptionValidation.Erreur(false, (Message.length == 2));
                    return;
                };
                if (CC == 9)
                {
                    this.ClipInterface._Editeur.Initialisation(Message[1], true, Message[2], Message[3]);
                    return;
                };
                if (CC == 14)
                {
                    if (((Message.length == 2) && (Message[1] == "0")))
                    {
                        this.Edition = false;
                    }
                    else
                    {
                        this.Edition = true;
                    };
                    this.ClipInterface.Clique_Editeur((!(Message.length == 2)), (Message.length < 3));
                    return;
                };
                if (CC == 20)
                {
                    if (Message.length == 2)
                    {
                        this.Message_Chat(this.$Texte("$E_PasAssezFromage2"));
                    }
                    else
                    {
                        this.Message_Chat(this.$Texte("$E_PasAssezFromage"));
                    };
                    return;
                };
                if (CC == 17)
                {
                    this.ClipInterface._Editeur.Carte_Validée();
                    this.Message_Chat(("<ROSE>" + this.$Texte("$E_CarteValide")));
                    return;
                };
                return;
            };
            if (C == 16)
            {
                if (CC == 4)
                {
                    CodeTexte = int(Message[1]);
                    if (CodeTexte == 1)
                    {
                        this.Message_Tribu(this.$Texte("$Connexion_Ami", Message[2]));
                        if (this.ClipTribu.parent)
                        {
                            this.ClipTribu.Affichage();
                        };
                    }
                    else
                    {
                        if (CodeTexte == 2)
                        {
                            this.Message_Tribu(this.$Texte("$Deco_Joueur_Tribu", Message[2]));
                            if (this.ClipTribu.parent)
                            {
                                this.ClipTribu.Affichage();
                            };
                        }
                        else
                        {
                            if (CodeTexte == 3)
                            {
                                this.Message_Chat(this.$Texte("$Erreur_Droit"));
                            }
                            else
                            {
                                if (CodeTexte == 4)
                                {
                                    this.Message_Chat(this.$Texte("$Deja_Dans_Une_Tribu"));
                                }
                                else
                                {
                                    if (CodeTexte == 5)
                                    {
                                        this.Message_Chat(this.$Texte("$Demande_Envoyée"));
                                    }
                                    else
                                    {
                                        if (CodeTexte == 6)
                                        {
                                            this.Message_Chat(this.$Texte("$Rejoindre_Tribu", Message[2], Message[3]));
                                            if (this.ClipTribu.parent)
                                            {
                                                this.ClipTribu.Affichage();
                                            };
                                        }
                                        else
                                        {
                                            if (CodeTexte == 7)
                                            {
                                                this.ClipInterface._CT._E.htmlText = ("<R>" + this.$Texte("$Creation_Deja_Tribu"));
                                            }
                                            else
                                            {
                                                if (CodeTexte == 8)
                                                {
                                                    this.ClipInterface._CT._E.htmlText = ("<R>" + this.$Texte("$Cout_Tribu"));
                                                }
                                                else
                                                {
                                                    if (CodeTexte == 9)
                                                    {
                                                        this.ClipInterface._CT._E.htmlText = ("<R>" + this.$Texte("$Tribu_Utilisée"));
                                                        this.ClipInterface._CT.CliqueValider.visible = true;
                                                    }
                                                    else
                                                    {
                                                        if (CodeTexte == 10)
                                                        {
                                                            this.Message_Chat(this.$Texte("$Tribu_Créée", Message[2]));
                                                            if (this.ClipInterface._CT.parent)
                                                            {
                                                                this.ClipInterface.removeChild(this.ClipInterface._CT);
                                                            };
                                                        }
                                                        else
                                                        {
                                                            if (CodeTexte == 11)
                                                            {
                                                                if (this.NomJoueur == Message[2])
                                                                {
                                                                    $Tribu.Code = 0;
                                                                    this.Message_Tribu(this.$Texte("$Exclusion_Tribu_Soit", $Tribu.Nom));
                                                                    if (this.ClipTribu.parent)
                                                                    {
                                                                        this.ClipInterface.removeChild(this.ClipTribu);
                                                                    };
                                                                }
                                                                else
                                                                {
                                                                    this.Message_Tribu(this.$Texte("$Exclusion_Tribu", Message[2]));
                                                                    if (this.ClipTribu.parent)
                                                                    {
                                                                        this.ClipTribu.Affichage();
                                                                    };
                                                                };
                                                            }
                                                            else
                                                            {
                                                                if (CodeTexte == 12)
                                                                {
                                                                    if (this.NomJoueur == Message[2])
                                                                    {
                                                                        $Tribu.GradeJoueur = int(Message[3]);
                                                                    };
                                                                    this.Message_Tribu(this.$Texte("$Nouveau_Grade", Message[2], (("'" + this.$Texte(("$TG_" + int(Message[3])))) + "'")));
                                                                    if (this.ClipTribu.parent)
                                                                    {
                                                                        this.ClipTribu.Affichage();
                                                                    };
                                                                }
                                                                else
                                                                {
                                                                    if (CodeTexte == 13)
                                                                    {
                                                                        this.Message_Tribu(this.$Texte(("$Canal_Actif_" + Message[2]), Message[3]));
                                                                    }
                                                                    else
                                                                    {
                                                                        if (CodeTexte == 14)
                                                                        {
                                                                            this.Message_Chat(this.$Texte(("$Silence_" + Message[2])));
                                                                        }
                                                                        else
                                                                        {
                                                                            if (CodeTexte == 15)
                                                                            {
                                                                                this.Message_Chat(this.$Texte("$Silence", Message[2]));
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    return;
                };
                if (CC == 5)
                {
                    this.Message_Tribu(Message[2], Message[1]);
                    return;
                };
                if (CC == 14)
                {
                    this.ClipInterface._Invitation.Affichage(Message[1], Message[2], Message[3]);
                    return;
                };
                if (CC == 16)
                {
                    Message.shift();
                    this.ClipTribu.Reception_Liste_Joueur(Message);
                    return;
                };
                if (CC == 18)
                {
                    AncienMessage = $Tribu.Message;
                    $Tribu.Code = int(Message[1]);
                    $Tribu.Nom = Message[2];
                    $Tribu.Fromages = int(Message[3]);
                    $Tribu.Message = Message[4];
                    $Tribu.Informations = new XMLDocument(Message[5]).firstChild;
                    $Tribu.GradeJoueur = int(Message[6]);
                    if ($Tribu.Message.charAt(0) == "#")
                    {
                        $Tribu.Message = this.wintoutf($Tribu.Message.substr(1));
                    };
                    $Tribu.Init();
                    if (AncienMessage != $Tribu.Message)
                    {
                        this.Message_Tribu($Tribu.Message, "^_^");
                    };
                    if (this.ClipTribu.parent)
                    {
                        this.ClipTribu.Affichage();
                    };
                    return;
                };
            };
            if (C == 18)
            {
                if (CC == 4)
                {
                    this._Serveur.visible = true;
                    if (!this._Serveur._F.visible)
                    {
                        this._Serveur._F.visible = true;
                        this._Serveur._F._T1.text = this.$Texte("$File_Info");
                        this._Serveur._F._T3._T.text = ((this.$Texte("$File_Adresse") + "\n") + this.AdresseSecondaire);
                    };
                    this._Serveur._F._T2.text = Message[1];
                    return;
                };
                if (CC == 5)
                {
                    this._Serveur._F.visible = false;
                    this.ClipIdentification.Changement_Connexion(InterfaceConnexion.MODE_IDENTIFICATION);
                    return;
                };
            };
            if (C == 19)
            {
                if (CC == 5)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        Joueur.Animation_Zelda(Message[2], Message[3]);
                    };
                    return;
                };
                if (CC == 20)
                {
                    this.ClipInterface._NCAD.text = Message[1];
                    return;
                };
                if (CC == 21)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        this.Explosion(3, (Joueur.x - 10), (Joueur.y - 10), 10, 2, false);
                    };
                    return;
                };
                if (CC == 23)
                {
                    Joueur = this.ListeJoueur[Message[1]];
                    if (Joueur)
                    {
                        Joueur.Animation_Cadeau();
                    };
                    if (this.ClipJoueur.NomJoueur == Message[3])
                    {
                        this.Message_Chat(this.$Texte("$CadeauJoueur", Message[2]));
                    };
                    return;
                };
            };
            if (C == 20)
            {
                if (CC == 6)
                {
                    if (Message.length == 1)
                    {
                        this.Message_Chat(("<J>" + this.$Texte("$Pas_Assez_Fromage")));
                    };
                    return;
                };
                if (CC == 20)
                {
                    this.ClipMagasin.Reception_Info(Message[1], Message[2].split(";"), Message[3], Message[4].split(","));
                    return;
                };
            };
            if (C == 21)
            {
                if (CC == 21)
                {
                    Message.shift();
                    this.Ajout_PNJ(Message);
                    return;
                };
            };
            if (C == 22)
            {
                if (CC == 22)
                {
                    this.Création_Totem(Donnee.substr(3));
                    return;
                };
            };
            if (C == 24)
            {
                if (CC == 24)
                {
                    this.Message_Chat(this.$Texte("$MP_Forum", Message[1]));
                    return;
                };
            };
            if (C == 25)
            {
                if (CC == 3)
                {
                    this.ClipDessin.graphics.clear();
                    this.ClipDessin.graphics.lineStyle(2, 3225412);
                    return;
                };
                if (CC == 4)
                {
                    this.ClipDessin.graphics.moveTo(int(Message[1]), int(Message[2]));
                    return;
                };
                if (CC == 5)
                {
                    this.ClipDessin.graphics.lineTo(int(Message[1]), int(Message[2]));
                    return;
                };
            };
            if (C == 26)
            {
                if (CC == 3)
                {
                    if (Message.length == 1)
                    {
                        this._Serveur._CC.visible = true;
                        this._Serveur._CC._Info.text = this.$Texte("$Pseudo_Utilisé");
                    }
                    else
                    {
                        if (Message.length == 2)
                        {
                            this.ClipIdentification.clipBase.ModeMDP = false;
                            this.ClipIdentification.clipBase._I._TexteMDP.displayAsPassword = false;
                            this.ClipIdentification.clipBase._I._TexteMDP.text = this.$Texte("$Invalide");
                            this.ClipIdentification.clipBase._I.visible = true;
                        }
                        else
                        {
                            if (Message.length == 3)
                            {
                                this.ClipIdentification.clipBase.ModeMDP = false;
                                this.ClipIdentification.clipBase._I._TexteMDP.displayAsPassword = false;
                                this.ClipIdentification.clipBase._I._TexteMDP.text = this.$Texte("$Déjà_Connecté");
                                this.ClipIdentification.clipBase._I.visible = true;
                            };
                        };
                    };
                    return;
                };
                if (CC == 4)
                {
                    if (Message.length == 2)
                    {
                        this.Message_Chat(Message[1], null, true);
                    }
                    else
                    {
                        this.Message_Chat((Message[1] + this.wintoutf(Message[2])), null, true);
                    };
                    return;
                };
                if (CC == 5)
                {
                    if (Message.length == 4)
                    {
                        this.Message_Chat(((("<font color='#C565FE'>[M][" + Message[1]) + "] ") + this.wintoutf(Message[2])));
                    }
                    else
                    {
                        this.Message_Chat(((("<font color='#C565FE'>[M][" + Message[1]) + "] ") + Message[2]));
                    };
                    return;
                };
                if (CC == 6)
                {
                    if (Message[2].charAt(0) == "#")
                    {
                        this.Message_Chat(((("<font color='#B993CA'>[A][" + Message[1]) + "] ") + this.wintoutf(Message[2].substr(1))));
                    }
                    else
                    {
                        this.Message_Chat(((("<font color='#B993CA'>[A][" + Message[1]) + "] ") + Message[2]));
                    };
                    return;
                };
                if (CC == 7)
                {
                    this.Message_Chat(this.$Texte("$Message_Ban", Message[1], Message[2], Message[3]), null, true);
                    return;
                };
                if (CC == 8)
                {
                    this.NomJoueur = Message[1];
                    this.CodeJoueur = int(Message[2]);
                    this.A_Invité = (Message[3] == "0");
                    this.A_Modo = ((Message[3] == "5") || (Message[3] == "6"));
                    this.A_Admin = (Message[3] == "10");
                    if (this.A_Admin)
                    {
                        this.A_Modo = true;
                    };
                    stage.quality = StageQuality.MEDIUM;
                    stage.frameRate = 36;
                    $ParticuleZero._stage = stage;
                    return;
                };
                if (CC == 9)
                {
                    if (Message.length == 1)
                    {
                        this.Message_Chat(this.$Texte("$Joueur_Existe_Pas"));
                    }
                    else
                    {
                        this.Message_Chat(this.$Texte("$Demande_Ban"));
                    };
                    return;
                };
                if (CC == 10)
                {
                    Message.shift();
                    this.ClipInterface._CLG.Affichage(Message);
                    return;
                };
                if (CC == 11)
                {
                    this.Envoie_Serveur((((((((((((this.$26 + this.$11) + this.$1) + stage.loaderInfo.bytesTotal) + this.$1) + stage.loaderInfo.bytesLoaded) + this.$1) + loaderInfo.bytesTotal) + this.$1) + loaderInfo.bytesLoaded) + this.$1) + stage.loaderInfo.url));
                    return;
                };
                if (CC == 12)
                {
                    if (this.CanalMusique)
                    {
                        this.CanalMusique.stop();
                    };
                    if (Message.length == 2)
                    {
                        if (this.Musique)
                        {
                            try
                            {
                                this.Musique.close();
                            }
                            catch(E:Error)
                            {
                            };
                        };
                        if (Message[1].indexOf("http") == 0)
                        {
                            this.Musique = new Sound(new URLRequest(Message[1]));
                        }
                        else
                        {
                            this.Musique = new Sound(new URLRequest((("http://213.251.135.103/~mice/musiques/" + Message[1]) + ".mp3")));
                        };
                        this.CanalMusique = this.Musique.play();
                    };
                    return;
                };
                if (CC == 17)
                {
                    TempsBan = Math.floor((Number(Message[1]) / 3600000));
                    this.ClipServeur.Texte.text = this.$Texte("$Message_Ban_3", TempsBan, Message[2]);
                    this.MessageSpécial = true;
                    this.Serveur.close();
                    this.Deconnexion(null);
                    return;
                };
                if (CC == 18)
                {
                    if (Message.length == 1)
                    {
                        this.ClipServeur.Texte.text = this.$Texte("$Message_Ban_4");
                        this.MessageSpécial = true;
                        this.Serveur.close();
                        this.Deconnexion(null);
                    }
                    else
                    {
                        if (Message.length == 2)
                        {
                            this.Message_Chat(this.$Texte("$Message_Ban_2", Message[1]));
                        }
                        else
                        {
                            TempsBan = Math.ceil((Number(Message[1]) / 3600000));
                            this.ClipServeur.Texte.text = this.$Texte("$Message_Ban_3", TempsBan, Message[2]);
                            this.MessageSpécial = true;
                            this.Serveur.close();
                            this.Deconnexion(null);
                        };
                    };
                    return;
                };
                if (CC == 19)
                {
                    navigateToURL(new URLRequest("http://www.facebook.com/pages/Transformice/126932107342812#!/pages/Transformice/126932107342812?v=wall"), "_blank");
                    this.Message_Chat(this.$Texte("$GainFromage", 20));
                    return;
                };
                if (CC == 21)
                {
                    this.Envoie_Serveur((((this.$26 + this.$21) + this.$1) + $Hash.SHA256(this.ClipServeur._I._TexteMDP.text)));
                    this.Message_Chat(this.$Texte("$CompteForumPret"));
                    return;
                };
                if (CC == 22)
                {
                    this.CB.loadBytes($Base64.decodeToByteArray(Message[1]));
                    return;
                };
                if (CC == 23)
                {
                    Message.shift();
                    this.ClipInterface._Log.Affichage(Message);
                    return;
                };
                if (CC == 24)
                {
                    for each (Joueur in this.ListeJoueur)
                    {
                        if (!Joueur.Mort)
                        {
                            Joueur.Animation_Danse(Joueur.AnimDroite);
                        };
                    };
                    return;
                };
                if (CC == 25)
                {
                    this.Message_Chat((((("\n" + Message[2]) + "\n<J>Exception pour [") + Message[1]) + "]\n"));
                    return;
                };
                if (CC == 26)
                {
                    this.TZAT = getTimer();
                    this.ATEC = true;
                    return;
                };
                if (CC == 27)
                {
                    LCMDT = Message[2].split("");
                    i = 0;
                    while (i < 10)
                    {
                        CMDT = int(LCMDT[i]);
                        if (CMDT == 0)
                        {
                            this.MDT[i] = String.fromCharCode(10);
                        }
                        else
                        {
                            this.MDT[i] = String.fromCharCode(CMDT);
                        };
                        i = (i + 1);
                    };
                    this.CMDTEC = int(Message[3]);
                    this.MauvaiseVersion = false;
                    this.ClipIdentification._JC.text = this.$Texte("$Nombre_Joueur", Message[1]);
                    this.TexteServeur.text = this.$Texte("$Chargement_En_Cours");
                    if (this.ServeurSecondaire)
                    {
                        this.ServeurSecondaire = false;
                        if (int(Message[1]) > this.LimiteJoueur)
                        {
                            this.ClipIdentification.Changement_Connexion(InterfaceConnexion.MODE_SERVEUR);
                            this.Envoie_Serveur((this.$18 + this.$4));
                            this.TexteServeur.text = "";
                        };
                    };
                    return;
                };
            };
            trace(((("Code inconnu : " + C) + " -> ") + CC));
        }

        public function Creation_Objet(_arg_1:int, _arg_2:int, _arg_3:int, _arg_4:int=0, _arg_5:Number=0, _arg_6:Number=0, _arg_7:Boolean=true, _arg_8:int=-1, _arg_9:Boolean=true):b2Body
        {
            var _local_10:Number;
            var _local_11:Number;
            var _local_12:b2BodyDef;
            var _local_13:b2PolygonDef;
            var _local_14:b2CircleDef;
            var _local_15:b2Body;
            var _local_16:b2MassData;
            var _local_17:MovieClip;
            var _local_18:Boolean;
            var _local_19:Boolean;
            var _local_20:int;
            var _local_21:Bitmap;
            var _local_22:MovieClip;
            var _local_23:int;
            var _local_24:int;
            var _local_25:BitmapData;
            var _local_26:Matrix;
            var _local_27:int;
            var _local_28:$Particule;
            if (_arg_1 == 44)
            {
                return (null);
            };
            _local_12 = new b2BodyDef();
            _local_12.position.x = (_arg_2 / 30);
            _local_12.position.y = (_arg_3 / 30);
            _local_12.angle = ((Math.PI * _arg_4) / 180);
            if ((((!(_arg_1 == 0)) && (!(_arg_1 == 23))) && (!(_arg_1 == 24))))
            {
                if (_arg_1 == 28)
                {
                    _local_20 = int((_arg_1 + int((Math.random() * 4))));
                }
                else
                {
                    _local_20 = _arg_1;
                };
                if (!this.CacheObjet[_local_20])
                {
                    _local_22 = $Res.Pouf(("$Objet_" + _local_20));
                    _local_23 = (_local_22.width + 2);
                    _local_24 = (_local_22.height + 2);
                    _local_25 = new BitmapData(_local_23, _local_24, true, 0);
                    _local_26 = new Matrix();
                    _local_26.translate((_local_23 / 2), (_local_24 / 2));
                    _local_25.draw(_local_22, _local_26);
                    this.CacheObjet[_local_20] = _local_25;
                };
                _local_17 = new MovieClip();
                _local_21 = new Bitmap(this.CacheObjet[_local_20], "auto", true);
                _local_21.x = -(int((_local_21.width / 2)));
                _local_21.y = -(int((_local_21.height / 2)));
                _local_17.addChild(_local_21);
            }
            else
            {
                _local_17 = $Res.Pouf(("$Objet_" + _arg_1));
            };
            _local_17.Type = _arg_1;
            _local_17.Dur = _arg_7;
            _local_18 = false;
            _local_19 = false;
            if (!_arg_7)
            {
                if (_arg_1 == 24)
                {
                    _local_17.transform.colorTransform = this.CouleurRouge;
                }
                else
                {
                    _local_17.transform.colorTransform = this.CouleurFantome;
                };
            };
            if (((_arg_1 == 26) || (_arg_1 == 27)))
            {
                this.Activation_TP((_arg_1 == 26), _arg_2, _arg_3);
                return (null);
            };
            if (_arg_1 == 0)
            {
                this.ClipListeJoueur.addChild(_local_17);
                _local_17.x = _arg_2;
                _local_17.y = _arg_3;
                _local_17.rotation = _arg_4;
                return (null);
            };
            if (((_arg_1 == 1) || (_arg_1 == 2)))
            {
                _local_13 = new b2PolygonDef();
                if (_arg_1 == 1)
                {
                    _local_10 = 0.5;
                    _local_11 = 0.5;
                }
                else
                {
                    _local_10 = 1;
                    _local_11 = 1;
                };
                if (_arg_7)
                {
                    _local_13.filter.categoryBits = 4;
                };
                _local_13.SetAsBox(_local_10, _local_11);
                _local_13.density = 30;
                _local_13.friction = 0.8;
                _local_13.restitution = 0.2;
                _local_12.userData = _local_17;
                _local_17.width = (_local_10 * 60);
                _local_17.height = (_local_11 * 60);
                _local_15 = this.MondePhysique.CreateBody(_local_12);
                _local_15.CreateShape(_local_13);
                _local_15.SetMassFromShapes();
            }
            else
            {
                if (((_arg_1 == 3) || (_arg_1 == 4)))
                {
                    if (_arg_1 == 3)
                    {
                        _local_10 = 1.66;
                    }
                    else
                    {
                        _local_10 = 3.33;
                    };
                    _local_11 = 0.16666;
                    _local_13 = new b2PolygonDef();
                    if (_arg_7)
                    {
                        _local_13.filter.categoryBits = 4;
                    };
                    _local_13.SetAsBox(_local_10, _local_11);
                    _local_13.density = 50;
                    _local_13.friction = 0.4;
                    _local_13.restitution = 0.1;
                    _local_12.userData = _local_17;
                    _local_15 = this.MondePhysique.CreateBody(_local_12);
                    _local_15.CreateShape(_local_13);
                    _local_15.SetMassFromShapes();
                }
                else
                {
                    if (((_arg_1 == 6) || (_arg_1 == 23)))
                    {
                        _local_10 = 0.5;
                        _local_11 = 0.5;
                        _local_14 = new b2CircleDef();
                        if (_arg_7)
                        {
                            _local_14.filter.categoryBits = 4;
                        };
                        _local_14.radius = _local_10;
                        _local_14.density = 10;
                        _local_14.restitution = 0.9;
                        _local_14.friction = 0.1;
                        _local_12.userData = _local_17;
                        _local_15 = this.MondePhysique.CreateBody(_local_12);
                        _local_15.CreateShape(_local_14);
                        _local_15.SetMassFromShapes();
                    }
                    else
                    {
                        if (_arg_1 == 7)
                        {
                            _local_12.userData = _local_17;
                            _local_15 = this.MondePhysique.CreateBody(_local_12);
                            _local_13 = new b2PolygonDef();
                            if (_arg_7)
                            {
                                _local_13.filter.categoryBits = 4;
                            };
                            _local_13.vertexCount = 4;
                            _local_13.vertices[0].Set(-1.66, 0);
                            _local_13.vertices[1].Set(1.66, 0);
                            _local_13.vertices[2].Set(1.66, 0.33);
                            _local_13.vertices[3].Set(-1.66, 0.33);
                            _local_13.density = 50;
                            _local_13.friction = 1;
                            _local_13.restitution = 0;
                            _local_15.CreateShape(_local_13);
                            _local_13 = new b2PolygonDef();
                            if (_arg_7)
                            {
                                _local_13.filter.categoryBits = 4;
                            };
                            _local_13.vertexCount = 4;
                            _local_13.vertices[0].Set(-1.33, 0);
                            _local_13.vertices[1].Set(-0.33, -0.33);
                            _local_13.vertices[2].Set(0.33, -0.33);
                            _local_13.vertices[3].Set(1.33, 0);
                            _local_13.density = 10;
                            _local_13.friction = 0;
                            _local_13.restitution = 1.5;
                            _local_15.CreateShape(_local_13);
                            _local_15.SetMassFromShapes();
                        }
                        else
                        {
                            if (_arg_1 == 10)
                            {
                                _local_10 = 0.5;
                                _local_11 = 0.5;
                                _local_13 = new b2PolygonDef();
                                if (_arg_7)
                                {
                                    _local_13.filter.categoryBits = 4;
                                };
                                _local_13.SetAsBox(_local_10, _local_11);
                                _local_13.density = 50;
                                _local_13.friction = 0.2;
                                _local_13.restitution = 0;
                                _local_12.userData = _local_17;
                                _local_15 = this.MondePhysique.CreateBody(_local_12);
                                _local_15.CreateShape(_local_13);
                                _local_16 = new b2MassData();
                                _local_16.mass = 1000;
                                _local_16.center = new b2Vec2(0, 0);
                                _local_16.I = 100;
                                _local_15.SetMass(_local_16);
                            }
                            else
                            {
                                if (((_arg_1 > 16) && (_arg_1 < 21)))
                                {
                                    _local_10 = 0.5;
                                    _local_11 = 0.5;
                                    _local_14 = new b2CircleDef();
                                    if (_arg_7)
                                    {
                                        _local_14.filter.categoryBits = 4;
                                    };
                                    _local_14.radius = _local_10;
                                    _local_14.density = 1;
                                    _local_14.friction = 0.2;
                                    _local_14.restitution = 0.2;
                                    _local_12.userData = _local_17;
                                    _local_15 = this.MondePhysique.CreateBody(_local_12);
                                    _local_15.CreateShape(_local_14);
                                    _local_16 = new b2MassData();
                                    _local_16.mass = 1000;
                                    if (_arg_1 == 17)
                                    {
                                        _local_27 = 270;
                                    }
                                    else
                                    {
                                        if (_arg_1 == 18)
                                        {
                                            _local_27 = 90;
                                        }
                                        else
                                        {
                                            if (_arg_1 == 19)
                                            {
                                                _local_27 = 0;
                                            }
                                            else
                                            {
                                                if (_arg_1 == 20)
                                                {
                                                    _local_27 = 180;
                                                };
                                            };
                                        };
                                    };
                                    _local_15.m_linearVelocity.x = (20 * Math.cos(((_arg_4 + _local_27) * 0.01745)));
                                    _local_15.m_linearVelocity.y = (20 * Math.sin(((_arg_4 + _local_27) * 0.01745)));
                                    if (_local_15.m_linearVelocity.y < 0)
                                    {
                                        _local_15.m_linearVelocity.y = 0;
                                    };
                                    _local_18 = true;
                                    _local_19 = true;
                                    _local_15.SetBullet(true);
                                    _local_16.center = new b2Vec2(0, 0);
                                    _local_16.I = 100;
                                    _local_15.SetMass(_local_16);
                                }
                                else
                                {
                                    if (_arg_1 == 24)
                                    {
                                        if (((_arg_7) || (true)))
                                        {
                                            this.Génération_Explosion(_arg_2, _arg_3, 10, 200, true, false);
                                            _local_28 = new $Particule(this.ListeParticule[10], false);
                                        }
                                        else
                                        {
                                            this.Génération_Explosion(_arg_2, _arg_3, 25, 250, true, false);
                                            _local_28 = new $Particule(this.ListeParticule[12], false);
                                        };
                                        _local_28.x = _arg_2;
                                        _local_28.y = _arg_3;
                                        this.ParticuleZone.ListeParticule.push(_local_28);
                                        this.ParticuleZone.DemandeRendu = true;
                                        return (null);
                                    };
                                    if (_arg_1 == 28)
                                    {
                                        _local_14 = new b2CircleDef();
                                        _local_14.radius = 0.5;
                                        _local_14.density = 50;
                                        _local_14.friction = 0.5;
                                        _local_14.restitution = 0.5;
                                        _local_12.angularDamping = 0.2;
                                        _local_12.userData = _local_17;
                                        _local_15 = this.MondePhysique.CreateBody(_local_12);
                                        _local_15.CreateShape(_local_14);
                                        _local_15.m_linearDamping = 0.4;
                                        _local_16 = new b2MassData();
                                        _local_16.mass = 300;
                                        _local_16.center = new b2Vec2(0, 0);
                                        _local_16.I = 100;
                                        _local_15.SetMass(_local_16);
                                    }
                                    else
                                    {
                                        if (_arg_1 == 32)
                                        {
                                            _local_14 = new b2CircleDef();
                                            _local_14.radius = 0.5;
                                            _local_14.density = 10;
                                            _local_14.restitution = 0.2;
                                            _local_14.friction = 0.1;
                                            _local_12.userData = _local_17;
                                            _local_15 = this.MondePhysique.CreateBody(_local_12);
                                            _local_15.CreateShape(_local_14);
                                            _local_15.SetMassFromShapes();
                                        }
                                        else
                                        {
                                            if (_arg_1 == 34)
                                            {
                                                _local_14 = new b2CircleDef();
                                                _local_14.radius = 0.2;
                                                _local_14.density = 10;
                                                _local_14.restitution = 0.2;
                                                _local_14.friction = 0.1;
                                                if (_arg_7)
                                                {
                                                    _local_14.filter.categoryBits = 4;
                                                };
                                                _local_12.userData = _local_17;
                                                _arg_9 = false;
                                                _local_17.BouleDroite = (_arg_5 > 0);
                                                _local_15 = this.MondePhysique.CreateBody(_local_12);
                                                _local_15.CreateShape(_local_14);
                                                _local_15.SetMassFromShapes();
                                                _local_15.SetBullet(true);
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            this.ClipListeMobile.addChild(_local_17);
            if (_arg_8 == -1)
            {
                this.ListeMobile.push(_local_15);
            }
            else
            {
                this.ListeMobile[_arg_8] = _local_15;
            };
            _local_17.CodeObjet = _arg_1;
            _local_17.TP = 0;
            _local_17.x = _arg_2;
            _local_17.y = _arg_3;
            _local_17.rotation = _arg_4;
            if (!_local_18)
            {
                _local_15.m_linearVelocity.x = _arg_5;
            };
            if (!_local_19)
            {
                _local_15.m_linearVelocity.y = _arg_6;
            };
            _local_15.SetXForm(new b2Vec2((_arg_2 / 30), (_arg_3 / 30)), ((Math.PI * _arg_4) / 180));
            _local_15.WakeUp();
            if (((_arg_9) && ((getTimer() - this.TempsPartieZéro) > 4000)))
            {
                this.Explosion(3, _arg_2, _arg_3, 10, 2, false);
            };
            return (_local_15);
        }

        public function Initialisation_Base(BASE:MovieClip):void
        {
            var SolInfo:b2BodyDef;
            var ClipSol:MovieClip;
            var ListeRepère:Array;
            var ListeStatique:Array;
            var ListeSuppr:Array;
            var SolStatique:MovieClip;
            var TrouSouris:MovieClip;
            var Num:int;
            var i:int;
            var Liste:Array;
            var Clip:MovieClip;
            var Cadeau:MovieClip;
            var Dynamique:Boolean;
            var ValeurMasse:int;
            var Masse:b2MassData;
            var ObBase:b2PolygonDef;
            var Fromage:MovieClip;
            var PlancheSup:Boolean;
            var MassePlanche:int;
            var ClipFin:MovieClip;
            var ClipPlanche:MovieClip;
            var ObjetProp_Cube:b2PolygonDef;
            var ObjetInfo:b2BodyDef;
            var ObjetPhysique:b2Body;
            var CodeRepère:String;
            var NumRepère:int;
            var ListeV:Array;
            var NumL:int;
            var l:int;
            var P:Point;
            SolInfo = new b2BodyDef();
            SolInfo.position.Set(0, 0);
            ClipSol = new MovieClip();
            ClipSol.mouseEnabled = false;
            ClipSol.mouseChildren = false;
            SolInfo.userData = ClipSol;
            this.PhysiqueSol = this.MondePhysique.CreateBody(SolInfo);
            while (this.ClipStatique.numChildren)
            {
                this.ClipStatique.removeChildAt(0);
            };
            this.ClipListeMobile.addChild(BASE);
            this.ClipListeMobile.addChild(SolInfo.userData);
            this.ListeFromage = new Array();
            this.ClipFromage = null;
            this.SpawnSourisSpé = false;
            this.DoubleChamane = false;
            this.Bonux = false;
            this.LsTS = new Array();
            ListeRepère = new Array();
            ListeStatique = new Array();
            ListeSuppr = new Array();
            Num = BASE.numChildren;
            i = 0;
            while (i < Num)
            {
                Clip = (BASE.getChildAt(i) as MovieClip);
                if (Clip)
                {
                    Clip.gotoAndStop(1);
                    if (((Clip.name.length > 1) && (Clip.name.substr(0, 2) == "TS")))
                    {
                        if (this.Monde.Fake)
                        {
                            TrouSouris = $Res.Pouf("$Fromage");
                        }
                        else
                        {
                            TrouSouris = $Res.Pouf("$Trou_Souris");
                        };
                        TrouSouris.x = Clip.x;
                        TrouSouris.y = Clip.y;
                        this.LsTS.push(TrouSouris, TrouSouris.x, (TrouSouris.y - 20));
                        ListeStatique.push(TrouSouris);
                        ListeSuppr.push(Clip);
                        TrouSouris.cacheAsBitmap = true;
                        if (Clip.name.length == 3)
                        {
                            this.DoubleChamane = true;
                            TrouSouris.Code = int(Clip.name.substr(2));
                            if (TrouSouris.Code == 1)
                            {
                                TrouSouris.filters = new Array(new GlowFilter(10019563, 1, 5, 5, 3, 3));
                            }
                            else
                            {
                                TrouSouris.filters = new Array(new GlowFilter(16691708, 1, 5, 5, 3, 3));
                            };
                        }
                        else
                        {
                            TrouSouris.Code = 0;
                        };
                    }
                    else
                    {
                        if (Clip.name == "CAD")
                        {
                            this.Bonux = true;
                            this.BonuxX = Clip.x;
                            this.BonuxY = Clip.y;
                            Cadeau = $Res.Pouf("$Cadeau");
                            this.IconeBonux = Cadeau;
                            Cadeau.mouseEnabled = false;
                            Cadeau.mouseChildren = false;
                            Cadeau.cacheAsBitmap = true;
                            Cadeau.x = Clip.x;
                            Cadeau.y = Clip.y;
                            Cadeau.width = 35;
                            Cadeau.height = 38;
                            ListeStatique.push(Cadeau);
                            ListeSuppr.push(Clip);
                        }
                        else
                        {
                            if (Clip.name == "SSS")
                            {
                                this.SpawnSourisSpé = true;
                                this.SSSx = Clip.x;
                                this.SSSy = Clip.y;
                                ListeSuppr.push(Clip);
                            }
                            else
                            {
                                if (Clip.name == "SOL")
                                {
                                    ClipFin = new MovieClip();
                                    ClipFin.addChild(Clip);
                                    ClipFin.x = Clip.x;
                                    ClipFin.y = Clip.y;
                                    Dynamique = (Clip.Prop[0] == "1");
                                    if (!Dynamique)
                                    {
                                        ClipFin.rotation = Clip.Prop[4];
                                    };
                                    if (Clip.Type == 1)
                                    {
                                        ClipFin.transform.colorTransform = this.CouleurSolGlace;
                                    }
                                    else
                                    {
                                        if (Clip.Type == 2)
                                        {
                                            ClipFin.transform.colorTransform = this.CouleurSolTramp;
                                        }
                                        else
                                        {
                                            if (Clip.Type == 3)
                                            {
                                                ClipFin.transform.colorTransform = this.CouleurSolLave;
                                            }
                                            else
                                            {
                                                if (Clip.Type == 4)
                                                {
                                                    ClipFin.transform.colorTransform = this.CouleurSolDur;
                                                };
                                            };
                                        };
                                    };
                                    ClipFin.cacheAsBitmap = (!(Dynamique));
                                    ObjetProp_Cube = new b2PolygonDef();
                                    if (Dynamique)
                                    {
                                        ObjetProp_Cube.SetAsBox((Clip.width / 60), (Clip.height / 60));
                                    }
                                    else
                                    {
                                        ObjetProp_Cube.SetAsOrientedBox((Clip.width / 60), (Clip.height / 60), new b2Vec2((Clip.x / 30), (Clip.y / 30)), ((Math.PI * int(Clip.Prop[4])) / 180));
                                    };
                                    ObjetProp_Cube.filter.categoryBits = 4;
                                    if (Dynamique)
                                    {
                                        ObjetProp_Cube.density = 30;
                                    };
                                    ObjetProp_Cube.friction = Clip.Prop[2];
                                    ObjetProp_Cube.restitution = Clip.Prop[3];
                                    if (Dynamique)
                                    {
                                        ObjetInfo = new b2BodyDef();
                                        ObjetInfo.userData = ClipFin;
                                        ObjetInfo.linearDamping = Clip.Prop[6];
                                        ObjetInfo.angularDamping = Clip.Prop[7];
                                        ObjetInfo.fixedRotation = (Clip.Prop[5] == "1");
                                        ObjetPhysique = this.MondePhysique.CreateBody(ObjetInfo);
                                        ObjetPhysique.CreateShape(ObjetProp_Cube);
                                    }
                                    else
                                    {
                                        this.PhysiqueSol.CreateShape(ObjetProp_Cube);
                                    };
                                    ValeurMasse = int(Clip.Prop[1]);
                                    if (Dynamique)
                                    {
                                        if (ValeurMasse)
                                        {
                                            Masse = new b2MassData();
                                            Masse.mass = ValeurMasse;
                                            Masse.center = new b2Vec2(0, 0);
                                            Masse.I = (ValeurMasse / 10);
                                            ObjetPhysique.SetMass(Masse);
                                        }
                                        else
                                        {
                                            ObjetPhysique.SetMassFromShapes();
                                        };
                                    };
                                    if (Dynamique)
                                    {
                                        ObjetPhysique.SetXForm(new b2Vec2((Clip.x / 30), (Clip.y / 30)), ((Math.PI * int(Clip.Prop[4])) / 180));
                                        this.ListeMobile.push(ObjetPhysique);
                                    };
                                    this.ClipListeMobile.addChild(ClipFin);
                                    Clip.x = 0;
                                    Clip.y = 0;
                                    Num = (Num - 1);
                                    i = (i - 1);
                                }
                                else
                                {
                                    if (((((((Clip.name == "S") || (Clip.name == "M")) || (Clip.name == "SP")) || (Clip.name == "SGL")) || (Clip.name == "SA")) || (Clip.name == "SL")))
                                    {
                                        SolStatique = $Res.Pouf("$Sol_Dur");
                                        SolStatique.x = Clip.x;
                                        SolStatique.y = Clip.y;
                                        SolStatique.width = (Clip.width * 1.01);
                                        SolStatique.height = (Clip.height * 1.01);
                                        this.ClipListeMobile.addChild(SolStatique);
                                        ObBase = this.Mobile_Statique(null, new Array(Clip.x, Clip.y, (Clip.x + Clip.width), Clip.y, (Clip.x + Clip.width), (Clip.y + Clip.height), Clip.x, (Clip.y + Clip.height)));
                                        if (Clip.name == "SP")
                                        {
                                            ObBase.restitution = 1.2;
                                            ObBase.friction = 0;
                                            SolStatique.transform.colorTransform = this.CouleurSolTramp;
                                        }
                                        else
                                        {
                                            if (Clip.name == "SGL")
                                            {
                                                ObBase.friction = 0;
                                                SolStatique.transform.colorTransform = this.CouleurSolGlace;
                                            }
                                            else
                                            {
                                                if (Clip.name == "SA")
                                                {
                                                    ObBase.friction = 20;
                                                    SolStatique.transform.colorTransform = this.CouleurSolDur;
                                                }
                                                else
                                                {
                                                    if (Clip.name == "SL")
                                                    {
                                                        ObBase.restitution = 20;
                                                        SolStatique.transform.colorTransform = this.CouleurSolLave;
                                                    };
                                                };
                                            };
                                        };
                                        this.PhysiqueSol.CreateShape(ObBase);
                                        ListeSuppr.push(Clip);
                                        SolStatique.cacheAsBitmap = true;
                                    }
                                    else
                                    {
                                        if (Clip.name == "SF")
                                        {
                                            SolStatique = $Res.Pouf("$Sol_Dur");
                                            SolStatique.x = Clip.x;
                                            SolStatique.y = Clip.y;
                                            SolStatique.width = (Clip.width * 1.015);
                                            SolStatique.height = (Clip.height * 1.015);
                                            this.ClipListeMobile.addChild(SolStatique);
                                            ListeSuppr.push(Clip);
                                            SolStatique.cacheAsBitmap = true;
                                        }
                                        else
                                        {
                                            if (Clip.name == "ST")
                                            {
                                                this.PhysiqueSol.CreateShape(this.Mobile_Statique(null, new Array(Clip.x, Clip.y, (Clip.x + Clip.width), Clip.y, (Clip.x + Clip.width), (Clip.y + Clip.height), Clip.x, (Clip.y + Clip.height))));
                                                ListeSuppr.push(Clip);
                                            }
                                            else
                                            {
                                                if (((Clip.name == "F") || (Clip.name == "FV")))
                                                {
                                                    if (Clip.name == "FV")
                                                    {
                                                        Fromage = $Res.Pouf("$FromageVol");
                                                    }
                                                    else
                                                    {
                                                        if (this.Monde.Fake)
                                                        {
                                                            Fromage = $Res.Pouf("$Trou_Souris");
                                                            Fromage.cacheAsBitmap = true;
                                                        }
                                                        else
                                                        {
                                                            Fromage = $Res.Pouf("$Fromage");
                                                            Fromage.cacheAsBitmap = true;
                                                        };
                                                    };
                                                    if (!this.ClipFromage)
                                                    {
                                                        this.ClipFromage = Fromage;
                                                    };
                                                    Fromage.x = Clip.x;
                                                    Fromage.y = Clip.y;
                                                    Fromage.rotation = Clip.rotation;
                                                    this.ListeFromage.push(Fromage.x, Fromage.y);
                                                    ListeStatique.push(Fromage);
                                                    ListeSuppr.push(Clip);
                                                }
                                                else
                                                {
                                                    if (Clip.name == "SG")
                                                    {
                                                        this.SpawnGuide = new Point(Clip.x, Clip.y);
                                                        ListeSuppr.push(Clip);
                                                    }
                                                    else
                                                    {
                                                        if (Clip.name == "SOLD")
                                                        {
                                                            ListeSuppr.push(Clip);
                                                            PlancheSup = Clip.Valeurs;
                                                            ClipFin = new MovieClip();
                                                            ClipPlanche = $Res.Pouf("$Sol_Dur");
                                                            ClipPlanche.width = (Clip.width * 1.01);
                                                            ClipPlanche.height = (Clip.height * 1.01);
                                                            ClipPlanche.x = -(int((Clip.width / 2)));
                                                            ClipPlanche.y = -(int((Clip.height / 2)));
                                                            ClipFin.x = Clip.x;
                                                            ClipFin.y = Clip.y;
                                                            ClipFin.addChild(ClipPlanche);
                                                            ObjetProp_Cube = new b2PolygonDef();
                                                            ObjetProp_Cube.SetAsBox((Clip.width / 60), (Clip.height / 60));
                                                            ObjetProp_Cube.filter.categoryBits = 4;
                                                            ObjetProp_Cube.density = 30;
                                                            ObjetProp_Cube.friction = Clip.Friction;
                                                            ObjetProp_Cube.restitution = Clip.Restitution;
                                                            ObjetInfo = new b2BodyDef();
                                                            ObjetInfo.userData = ClipFin;
                                                            ObjetInfo.linearDamping = Clip.AL;
                                                            ObjetInfo.angularDamping = Clip.AA;
                                                            ObjetInfo.fixedRotation = Clip.AngleFixe;
                                                            ObjetPhysique = this.MondePhysique.CreateBody(ObjetInfo);
                                                            ObjetPhysique.CreateShape(ObjetProp_Cube);
                                                            ObjetPhysique.SetXForm(new b2Vec2((Clip.x / 30), (Clip.y / 30)), ((Math.PI * Clip.Angle) / 180));
                                                            this.ListeMobile.push(ObjetPhysique);
                                                            this.ClipListeMobile.addChild(ClipFin);
                                                        }
                                                        else
                                                        {
                                                            if (((Clip.name == "Planche") || (Clip.name == "PlancheG")))
                                                            {
                                                                ListeSuppr.push(Clip);
                                                                try
                                                                {
                                                                    MassePlanche = int(Clip.name.substr(7));
                                                                    ClipFin = new MovieClip();
                                                                    ClipPlanche = $Res.Pouf("$Sol_Dur");
                                                                    ClipPlanche.x = Clip.x;
                                                                    ClipPlanche.y = Clip.y;
                                                                    ClipPlanche.width = (Clip.width * 1.015);
                                                                    ClipPlanche.height = (Clip.height * 1.015);
                                                                    ClipFin.addChild(ClipPlanche);
                                                                    ObjetProp_Cube = this.Mobile_Statique(null, new Array(Clip.x, Clip.y, (Clip.x + Clip.width), Clip.y, (Clip.x + Clip.width), (Clip.y + Clip.height), Clip.x, (Clip.y + Clip.height)));
                                                                    ObjetProp_Cube.density = 30;
                                                                    if (Clip.name == "PlancheG")
                                                                    {
                                                                        ObjetProp_Cube.friction = 0;
                                                                        ClipPlanche.transform.colorTransform = new ColorTransform(1, 1, 1.4, 1, 0, 0, 50);
                                                                    }
                                                                    else
                                                                    {
                                                                        ObjetProp_Cube.friction = 0.8;
                                                                    };
                                                                    ObjetProp_Cube.restitution = 0.2;
                                                                    ObjetInfo = new b2BodyDef();
                                                                    ObjetInfo.userData = ClipFin;
                                                                    ObjetPhysique = this.MondePhysique.CreateBody(ObjetInfo);
                                                                    ObjetPhysique.CreateShape(ObjetProp_Cube);
                                                                    ObjetPhysique.SetMassFromShapes();
                                                                    this.ListeMobile.push(ObjetPhysique);
                                                                    this.ClipListeMobile.addChild(ClipFin);
                                                                }
                                                                catch(E:Error)
                                                                {
                                                                };
                                                            }
                                                            else
                                                            {
                                                                if (Clip.name.substr(0, 1) == "_")
                                                                {
                                                                    CodeRepère = Clip.name.substr(1, 1);
                                                                    NumRepère = int(Clip.name.substr(2));
                                                                    if (ListeRepère[CodeRepère] == null)
                                                                    {
                                                                        ListeRepère[CodeRepère] = new Array();
                                                                    };
                                                                    ListeRepère[CodeRepère][NumRepère] = new Point(Clip.x, Clip.y);
                                                                    ListeSuppr.push(Clip);
                                                                }
                                                                else
                                                                {
                                                                    ListeStatique.push(Clip);
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                i = (i + 1);
            };
            Num = ListeStatique.length;
            i = 0;
            while (i < Num)
            {
                this.ClipStatique.addChild(ListeStatique[i]);
                i = (i + 1);
            };
            Num = ListeSuppr.length;
            i = 0;
            while (i < Num)
            {
                BASE.removeChild(ListeSuppr[i]);
                i = (i + 1);
            };
            for each (Liste in ListeRepère)
            {
                ListeV = new Array();
                NumL = Liste.length;
                l = 0;
                while (l < NumL)
                {
                    P = Liste[l];
                    if (P)
                    {
                        ListeV.push(P.x, P.y);
                    }
                    else
                    {
                        ListeV = null;
                    };
                    l = (l + 1);
                };
                if (ListeV)
                {
                    this.PhysiqueSol.CreateShape(this.Mobile_Statique(ClipSol, ListeV));
                };
            };
            this.PhysiqueSol.SetMassFromShapes();
            this.PhysiqueSol = this.MondePhysique.CreateBody(SolInfo);
        }


    }
}//package 

//------------------------------------------------------------
//Transformice_TransformiceFLA

package 
{
    import mx.core.ByteArrayAsset;

    public class Transformice_TransformiceFLA extends ByteArrayAsset 
    {


    }
}//package 

